{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# ToolHub - Online Calculators & Tools\n\n## Overview\n\nToolHub is a full-stack web application that provides free online calculators, converters, and utility tools. The platform emphasizes privacy by performing all calculations client-side in the browser, ensuring no user data is transmitted to servers. Built with a modern React frontend and Express.js backend, the application features a responsive design with shadcn/ui components and a comprehensive set of utility tools including age calculators, BMI calculators, and more planned features.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development practices\n- **Routing**: Wouter for lightweight client-side routing with file-based page structure\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Framework**: shadcn/ui components built on Radix UI primitives for accessible, customizable interface elements\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for consistent theming\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture  \n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Language**: TypeScript throughout for consistent type checking across client and server\n- **Storage Interface**: Abstracted storage layer with in-memory implementation (MemStorage) that can be extended to database backends\n- **Development**: Hot module replacement and development server integration with Vite middleware\n\n### Data Storage Solutions\n- **Database ORM**: Drizzle ORM configured for PostgreSQL with type-safe database operations\n- **Database**: PostgreSQL (configured via Neon Database serverless) for production data persistence\n- **Schema Management**: Centralized schema definitions in shared directory with Zod validation\n- **Development Storage**: In-memory storage for development and testing scenarios\n\n### Authentication and Authorization\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **User Model**: Basic user schema with username/password fields and UUID primary keys\n- **Storage Interface**: User CRUD operations abstracted through IStorage interface\n\n### External Dependencies\n- **Database Provider**: Neon Database (@neondatabase/serverless) for serverless PostgreSQL hosting\n- **Font Loading**: Google Fonts (Inter, Architects Daughter, DM Sans, Fira Code, Geist Mono) for typography\n- **Icon System**: Font Awesome 6.4.0 for consistent iconography throughout the application\n- **Development Tools**: Replit integration with development banner and cartographer plugin for enhanced development experience\n- **Form Handling**: React Hook Form with Hookform Resolvers for robust form validation and user input processing","size_bytes":2928},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'system-ui', 'sans-serif']\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2818},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { type User, type InsertUser } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n\n  constructor() {\n    this.users = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":993},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":584},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Blog from \"@/pages/blog\";\nimport Contact from \"@/pages/contact\";\nimport PrivacyPolicy from \"@/pages/privacy-policy\";\nimport TermsConditions from \"@/pages/terms-conditions\";\nimport Disclaimer from \"@/pages/disclaimer\";\nimport CookiePolicy from \"@/pages/cookie-policy\";\nimport AgeCalculator from \"@/pages/tools/age-calculator\";\nimport BmiCalculator from \"@/pages/tools/bmi-calculator\";\nimport BmrCalculator from \"@/pages/tools/bmr-calculator\";\nimport PercentageCalculator from \"@/pages/tools/percentage-calculator\";\nimport TipCalculator from \"@/pages/tools/tip-calculator\";\nimport SimpleInterestCalculator from \"@/pages/tools/simple-interest-calculator\";\nimport DiscountCalculator from \"@/pages/tools/discount-calculator\";\nimport LoanEmiCalculator from \"@/pages/tools/loan-emi-calculator\";\nimport DateDifferenceCalculator from \"@/pages/tools/date-difference-calculator\";\nimport RandomJokeGenerator from \"@/pages/tools/random-joke-generator\";\nimport IdealWeightCalculator from \"@/pages/tools/ideal-weight-calculator\";\nimport WaterIntakeCalculator from \"@/pages/tools/water-intake-calculator\";\nimport MacroNutrientCalculator from \"@/pages/tools/macro-nutrient-calculator\";\nimport HeartRateZoneCalculator from \"@/pages/tools/heart-rate-zone-calculator\";\nimport BACCalculator from \"@/pages/tools/bac-calculator\";\nimport StepCalorieConverter from \"@/pages/tools/step-calorie-converter\";\nimport ProteinIntakeCalculator from \"@/pages/tools/protein-intake-calculator\";\nimport SleepCycleCalculator from \"@/pages/tools/sleep-cycle-calculator\";\nimport BodySurfaceAreaCalculator from \"@/pages/tools/body-surface-area-calculator\";\nimport TemperatureConverter from \"@/pages/tools/temperature-converter\";\nimport LengthConverter from \"@/pages/tools/length-converter\";\nimport WeightConverter from \"@/pages/tools/weight-converter\";\nimport WordCounter from \"@/pages/tools/word-counter\";\nimport RandomPasswordGenerator from \"@/pages/tools/random-password-generator\";\nimport TextCaseConverter from \"@/pages/tools/text-case-converter\";\nimport QRCodeGenerator from \"@/pages/tools/qr-code-generator\";\nimport CurrencyConverter from \"@/pages/tools/currency-converter\";\nimport Base64EncoderDecoder from \"@/pages/tools/base64-encoder-decoder\";\nimport CharacterCounter from \"@/pages/tools/character-counter\";\nimport LoremIpsumGenerator from \"@/pages/tools/lorem-ipsum-generator\";\nimport PalindromeChecker from \"@/pages/tools/palindrome-checker\";\nimport TimezoneConverter from \"@/pages/tools/timezone-converter\";\nimport CountdownTimer from \"@/pages/tools/countdown-timer\";\nimport WorldClock from \"@/pages/tools/world-clock\";\nimport RemoveExtraSpaces from \"@/pages/tools/remove-extra-spaces\";\nimport ReverseTextGenerator from \"@/pages/tools/reverse-text-generator\";\nimport SpeedConverter from \"@/pages/tools/speed-converter\";\nimport AreaConverter from \"@/pages/tools/area-converter\";\nimport VolumeConverter from \"@/pages/tools/volume-converter\";\nimport AgeInDaysCalculator from \"@/pages/tools/age-in-days-calculator\";\nimport Stopwatch from \"@/pages/tools/stopwatch\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/privacy-policy\" component={PrivacyPolicy} />\n      <Route path=\"/terms-conditions\" component={TermsConditions} />\n      <Route path=\"/disclaimer\" component={Disclaimer} />\n      <Route path=\"/cookie-policy\" component={CookiePolicy} />\n      <Route path=\"/tools/age-calculator\" component={AgeCalculator} />\n      <Route path=\"/tools/bmi-calculator\" component={BmiCalculator} />\n      <Route path=\"/tools/bmr-calculator\" component={BmrCalculator} />\n      <Route path=\"/tools/percentage-calculator\" component={PercentageCalculator} />\n      <Route path=\"/tools/tip-calculator\" component={TipCalculator} />\n      <Route path=\"/tools/simple-interest-calculator\" component={SimpleInterestCalculator} />\n      <Route path=\"/tools/discount-calculator\" component={DiscountCalculator} />\n      <Route path=\"/tools/loan-emi-calculator\" component={LoanEmiCalculator} />\n      <Route path=\"/tools/date-difference-calculator\" component={DateDifferenceCalculator} />\n      <Route path=\"/tools/random-joke-generator\" component={RandomJokeGenerator} />\n      <Route path=\"/tools/ideal-weight-calculator\" component={IdealWeightCalculator} />\n      <Route path=\"/tools/water-intake-calculator\" component={WaterIntakeCalculator} />\n      <Route path=\"/tools/macro-nutrient-calculator\" component={MacroNutrientCalculator} />\n      <Route path=\"/tools/heart-rate-zone-calculator\" component={HeartRateZoneCalculator} />\n      <Route path=\"/tools/bac-calculator\" component={BACCalculator} />\n      <Route path=\"/tools/step-calorie-converter\" component={StepCalorieConverter} />\n      <Route path=\"/tools/protein-intake-calculator\" component={ProteinIntakeCalculator} />\n      <Route path=\"/tools/sleep-cycle-calculator\" component={SleepCycleCalculator} />\n      <Route path=\"/tools/body-surface-area-calculator\" component={BodySurfaceAreaCalculator} />\n      <Route path=\"/tools/temperature-converter\" component={TemperatureConverter} />\n      <Route path=\"/tools/length-converter\" component={LengthConverter} />\n      <Route path=\"/tools/weight-converter\" component={WeightConverter} />\n      <Route path=\"/tools/word-counter\" component={WordCounter} />\n      <Route path=\"/tools/random-password-generator\" component={RandomPasswordGenerator} />\n      <Route path=\"/tools/text-case-converter\" component={TextCaseConverter} />\n      <Route path=\"/tools/qr-code-generator\" component={QRCodeGenerator} />\n      <Route path=\"/tools/currency-converter\" component={CurrencyConverter} />\n      <Route path=\"/tools/base64-encoder-decoder\" component={Base64EncoderDecoder} />\n      <Route path=\"/tools/character-counter\" component={CharacterCounter} />\n      <Route path=\"/tools/lorem-ipsum-generator\" component={LoremIpsumGenerator} />\n      <Route path=\"/tools/palindrome-checker\" component={PalindromeChecker} />\n      <Route path=\"/tools/timezone-converter\" component={TimezoneConverter} />\n      <Route path=\"/tools/countdown-timer\" component={CountdownTimer} />\n      <Route path=\"/tools/world-clock\" component={WorldClock} />\n      <Route path=\"/tools/remove-extra-spaces\" component={RemoveExtraSpaces} />\n      <Route path=\"/tools/reverse-text-generator\" component={ReverseTextGenerator} />\n      <Route path=\"/tools/speed-converter\" component={SpeedConverter} />\n      <Route path=\"/tools/area-converter\" component={AreaConverter} />\n      <Route path=\"/tools/volume-converter\" component={VolumeConverter} />\n      <Route path=\"/tools/age-in-days-calculator\" component={AgeInDaysCalculator} />\n      <Route path=\"/tools/stopwatch\" component={Stopwatch} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":7475},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 13% 45%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(157.4 78.7% 37.3%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(217.2 91.2% 59.8%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(217.2 91.2% 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(157.4 78.7% 37.3%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217.2 91.2% 59.8%);\n  --chart-1: hsl(217.2 91.2% 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(217.2 91.2% 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(217.2 91.2% 59.8%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(217.2 91.2% 59.8%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 1px 2px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 2px 4px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 4px 6px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00), 0px 8px 10px -1px hsl(217.2 91.2% 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.2 91.2% 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-slate-50 text-slate-800;\n  }\n}\n\n/* Custom styles for the multi-tool website */\n.gradient-bg {\n  background: linear-gradient(135deg, #f8fafc 0%, #dbeafe 100%);\n}\n\n.tool-card {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.tool-card:hover {\n  transform: translateY(-4px);\n}\n\n/* Icon gradient backgrounds */\n.icon-gradient-blue {\n  background: linear-gradient(135deg, #3b82f6, #1d4ed8);\n}\n\n.icon-gradient-green {\n  background: linear-gradient(135deg, #10b981, #059669);\n}\n\n.icon-gradient-red {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n}\n\n.icon-gradient-purple {\n  background: linear-gradient(135deg, #8b5cf6, #7c3aed);\n}\n\n.icon-gradient-orange {\n  background: linear-gradient(135deg, #f97316, #ea580c);\n}\n\n.icon-gradient-yellow {\n  background: linear-gradient(135deg, #eab308, #ca8a04);\n}\n\n.icon-gradient-indigo {\n  background: linear-gradient(135deg, #6366f1, #4f46e5);\n}\n\n.icon-gradient-teal {\n  background: linear-gradient(135deg, #14b8a6, #0d9488);\n}\n\n.icon-gradient-cyan {\n  background: linear-gradient(135deg, #06b6d4, #0891b2);\n}\n\n.icon-gradient-violet {\n  background: linear-gradient(135deg, #8b5cf6, #7c3aed);\n}\n\n.icon-gradient-emerald {\n  background: linear-gradient(135deg, #10b981, #047857);\n}\n","size_bytes":6066},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function About() {\n  useEffect(() => {\n    document.title = \"About Us - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Learn about ToolHub and our mission to provide free, secure, and easy-to-use online calculators and converters.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"about-title\">\n              About ToolHub\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"about-subtitle\">\n              Your trusted destination for free online tools and calculators\n            </p>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8 mb-8\">\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-4\" data-testid=\"mission-title\">Our Mission</h2>\n            <p className=\"text-slate-600 leading-relaxed mb-6\" data-testid=\"mission-content\">\n              At ToolHub, we believe that useful tools should be accessible to everyone. Our mission is to provide \n              high-quality, free online calculators and converters that help people with their daily tasks, \n              calculations, and conversions.\n            </p>\n            \n            <h2 className=\"text-2xl font-bold text-slate-800 mb-4\" data-testid=\"values-title\">Our Values</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center p-4\">\n                <div className=\"w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                  <i className=\"fas fa-shield-alt text-primary text-lg\"></i>\n                </div>\n                <h3 className=\"font-semibold text-slate-800 mb-2\">Privacy First</h3>\n                <p className=\"text-sm text-slate-600\">All calculations happen locally in your browser</p>\n              </div>\n              \n              <div className=\"text-center p-4\">\n                <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                  <i className=\"fas fa-heart text-accent text-lg\"></i>\n                </div>\n                <h3 className=\"font-semibold text-slate-800 mb-2\">Always Free</h3>\n                <p className=\"text-sm text-slate-600\">No hidden fees, subscriptions, or premium features</p>\n              </div>\n              \n              <div className=\"text-center p-4\">\n                <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center mx-auto mb-3\">\n                  <i className=\"fas fa-users text-purple-600 text-lg\"></i>\n                </div>\n                <h3 className=\"font-semibold text-slate-800 mb-2\">User-Centric</h3>\n                <p className=\"text-sm text-slate-600\">Designed with simplicity and usability in mind</p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-gradient-to-r from-primary to-accent rounded-2xl p-8 text-white text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\" data-testid=\"contact-cta-title\">Get in Touch</h2>\n            <p className=\"mb-6\" data-testid=\"contact-cta-content\">\n              Have questions, suggestions, or feedback? We'd love to hear from you!\n            </p>\n            <a \n              href=\"/contact\" \n              className=\"bg-white text-primary px-6 py-3 rounded-xl font-semibold hover:bg-slate-100 transition-colors duration-200 inline-block\"\n              data-testid=\"button-contact-us\"\n            >\n              Contact Us\n            </a>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":4134},"client/src/pages/blog.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function Blog() {\n  useEffect(() => {\n    document.title = \"Blog - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Read the latest articles, tutorials, and tips about online calculators, converters, and useful tools.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"blog-title\">\n              ToolHub Blog\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"blog-subtitle\">\n              Tips, tutorials, and insights about calculators and useful tools\n            </p>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8 text-center\">\n            <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-pen-alt text-slate-400 text-2xl\"></i>\n            </div>\n            <h2 className=\"text-2xl font-bold text-slate-800 mb-4\" data-testid=\"coming-soon-title\">\n              Blog Coming Soon!\n            </h2>\n            <p className=\"text-slate-600 mb-6 max-w-2xl mx-auto\" data-testid=\"coming-soon-content\">\n              We're working on creating valuable content about calculators, converters, and productivity tools. \n              Stay tuned for helpful tutorials, tips, and insights that will make your daily calculations easier.\n            </p>\n            \n            <div className=\"bg-slate-50 rounded-xl p-6 mb-6\">\n              <h3 className=\"font-semibold text-slate-800 mb-3\" data-testid=\"upcoming-topics-title\">Upcoming Topics:</h3>\n              <ul className=\"text-sm text-slate-600 space-y-2\">\n                <li data-testid=\"topic-1\">• How to Calculate Your Ideal BMI Range</li>\n                <li data-testid=\"topic-2\">• Understanding Age Calculation Methods</li>\n                <li data-testid=\"topic-3\">• Essential Unit Conversions for Daily Life</li>\n                <li data-testid=\"topic-4\">• Tips for Accurate Percentage Calculations</li>\n                <li data-testid=\"topic-5\">• The Science Behind Our Calculator Algorithms</li>\n              </ul>\n            </div>\n\n            <a \n              href=\"/\" \n              className=\"bg-primary text-white px-6 py-3 rounded-xl font-semibold hover:bg-blue-600 transition-colors duration-200 inline-block\"\n              data-testid=\"button-back-home\"\n            >\n              <i className=\"fas fa-home mr-2\"></i>\n              Back to Tools\n            </a>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":3099},"client/src/pages/contact.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function Contact() {\n  useEffect(() => {\n    document.title = \"Contact Us - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Get in touch with the ToolHub team. Send us your questions, suggestions, or feedback about our free online calculators and tools.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"contact-title\">\n              Contact Us\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"contact-subtitle\">\n              We'd love to hear from you! Send us your questions, suggestions, or feedback.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Contact Form */}\n            <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n              <h2 className=\"text-2xl font-bold text-slate-800 mb-6\" data-testid=\"form-title\">Send us a Message</h2>\n              \n              <form className=\"space-y-6\" data-testid=\"contact-form\">\n                <div>\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Your Name\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    className=\"w-full px-4 py-3 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-colors\"\n                    placeholder=\"Enter your name\"\n                    data-testid=\"input-name\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Email Address\n                  </label>\n                  <input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    className=\"w-full px-4 py-3 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-colors\"\n                    placeholder=\"Enter your email\"\n                    data-testid=\"input-email\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <label htmlFor=\"subject\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Subject\n                  </label>\n                  <select\n                    id=\"subject\"\n                    name=\"subject\"\n                    className=\"w-full px-4 py-3 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-colors\"\n                    data-testid=\"select-subject\"\n                    required\n                  >\n                    <option value=\"\">Select a subject</option>\n                    <option value=\"general\">General Inquiry</option>\n                    <option value=\"tool-suggestion\">Tool Suggestion</option>\n                    <option value=\"bug-report\">Bug Report</option>\n                    <option value=\"feature-request\">Feature Request</option>\n                    <option value=\"partnership\">Partnership</option>\n                  </select>\n                </div>\n\n                <div>\n                  <label htmlFor=\"message\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    Message\n                  </label>\n                  <textarea\n                    id=\"message\"\n                    name=\"message\"\n                    rows={5}\n                    className=\"w-full px-4 py-3 border border-slate-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-colors resize-none\"\n                    placeholder=\"Tell us how we can help you...\"\n                    data-testid=\"textarea-message\"\n                    required\n                  ></textarea>\n                </div>\n\n                <button\n                  type=\"submit\"\n                  className=\"w-full bg-primary text-white px-6 py-3 rounded-xl font-semibold hover:bg-blue-600 transition-colors duration-200\"\n                  data-testid=\"button-send-message\"\n                >\n                  <i className=\"fas fa-paper-plane mr-2\"></i>\n                  Send Message\n                </button>\n              </form>\n            </div>\n\n            {/* Contact Info */}\n            <div className=\"space-y-8\">\n              <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8\">\n                <h3 className=\"text-xl font-bold text-slate-800 mb-4\" data-testid=\"response-title\">Quick Response</h3>\n                <p className=\"text-slate-600 mb-4\" data-testid=\"response-content\">\n                  We typically respond to all inquiries within 24 hours during business days. \n                  For urgent matters, please mention it in your message subject.\n                </p>\n                \n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-clock text-primary\"></i>\n                  </div>\n                  <span className=\"text-sm text-slate-600\">Response time: 24 hours</span>\n                </div>\n                \n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-check text-accent\"></i>\n                  </div>\n                  <span className=\"text-sm text-slate-600\">Available: Monday - Friday</span>\n                </div>\n              </div>\n\n              <div className=\"bg-gradient-to-r from-primary to-accent rounded-2xl p-8 text-white\">\n                <h3 className=\"text-xl font-bold mb-4\" data-testid=\"suggest-title\">Suggest a Tool</h3>\n                <p className=\"mb-4\" data-testid=\"suggest-content\">\n                  Have an idea for a calculator or converter that would be helpful? \n                  We're always looking to expand our collection based on user needs.\n                </p>\n                \n                <div className=\"bg-white/20 rounded-xl p-4\">\n                  <p className=\"text-sm font-medium mb-2\">Popular Requests:</p>\n                  <ul className=\"text-sm space-y-1\">\n                    <li>• Mortgage Calculator</li>\n                    <li>• Currency Converter</li>\n                    <li>• Calorie Calculator</li>\n                    <li>• GPA Calculator</li>\n                  </ul>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7401},"client/src/pages/cookie-policy.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function CookiePolicy() {\n  useEffect(() => {\n    document.title = \"Cookie Policy - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Learn about how ToolHub uses cookies to improve your experience with our online calculators and tools.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"cookie-title\">\n              Cookie Policy\n            </h1>\n            <p className=\"text-lg text-secondary max-w-2xl mx-auto\" data-testid=\"cookie-subtitle\">\n              Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n            </p>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8 prose prose-slate max-w-none\">\n            <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-6 mb-8\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-cookie-bite text-blue-600\"></i>\n                </div>\n                <h2 className=\"text-xl font-bold text-blue-800 m-0\">About Cookies</h2>\n              </div>\n              <p className=\"text-blue-700 m-0\">\n                This policy explains how ToolHub uses cookies and similar technologies to enhance your experience with our calculators and tools.\n              </p>\n            </div>\n\n            <h2>What Are Cookies?</h2>\n            <p>\n              Cookies are small text files that are stored on your computer or mobile device when you visit a website. They are widely used to make websites work more efficiently and to provide information to website owners.\n            </p>\n\n            <h2>How We Use Cookies</h2>\n            <p>\n              ToolHub uses cookies for the following purposes:\n            </p>\n\n            <h3>Essential Cookies</h3>\n            <p>\n              These cookies are necessary for our website to function properly:\n            </p>\n            <ul>\n              <li><strong>Session management:</strong> Keep you logged into any features that require it</li>\n              <li><strong>Preferences:</strong> Remember your settings like dark mode or language preferences</li>\n              <li><strong>Security:</strong> Protect against malicious attacks and ensure secure browsing</li>\n            </ul>\n\n            <h3>Analytics Cookies</h3>\n            <p>\n              We use analytics cookies to understand how visitors interact with our website:\n            </p>\n            <ul>\n              <li><strong>Google Analytics:</strong> Tracks page views, session duration, and user behavior</li>\n              <li><strong>Performance monitoring:</strong> Helps us identify and fix technical issues</li>\n              <li><strong>Usage statistics:</strong> Shows us which tools are most popular</li>\n            </ul>\n\n            <h3>Advertising Cookies</h3>\n            <p>\n              We may use advertising cookies to show relevant ads:\n            </p>\n            <ul>\n              <li><strong>Google AdSense:</strong> Displays relevant advertisements based on content</li>\n              <li><strong>Frequency capping:</strong> Prevents showing the same ad too many times</li>\n              <li><strong>Performance tracking:</strong> Measures ad effectiveness</li>\n            </ul>\n\n            <h2>Types of Cookies We Use</h2>\n            \n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full border-collapse border border-slate-200\">\n                <thead>\n                  <tr className=\"bg-slate-50\">\n                    <th className=\"border border-slate-200 px-4 py-2 text-left\">Cookie Type</th>\n                    <th className=\"border border-slate-200 px-4 py-2 text-left\">Purpose</th>\n                    <th className=\"border border-slate-200 px-4 py-2 text-left\">Duration</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td className=\"border border-slate-200 px-4 py-2\">Session</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">Essential site functionality</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">Browser session</td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-slate-200 px-4 py-2\">Persistent</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">Remember preferences</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">30 days - 2 years</td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-slate-200 px-4 py-2\">Analytics</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">Track usage and performance</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">2 years</td>\n                  </tr>\n                  <tr>\n                    <td className=\"border border-slate-200 px-4 py-2\">Advertising</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">Show relevant ads</td>\n                    <td className=\"border border-slate-200 px-4 py-2\">30 days - 1 year</td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n\n            <h2>Managing Cookies</h2>\n            <p>\n              You have several options for managing cookies:\n            </p>\n\n            <h3>Browser Settings</h3>\n            <p>\n              Most browsers allow you to:\n            </p>\n            <ul>\n              <li>View and delete cookies</li>\n              <li>Block cookies from specific sites</li>\n              <li>Block third-party cookies</li>\n              <li>Clear all cookies when closing the browser</li>\n            </ul>\n\n            <h3>Opt-out Links</h3>\n            <ul>\n              <li><a href=\"https://tools.google.com/dlpage/gaoptout\" className=\"text-primary hover:text-blue-600\" target=\"_blank\" rel=\"noopener noreferrer\">Google Analytics Opt-out</a></li>\n              <li><a href=\"https://support.google.com/ads/answer/2662922\" className=\"text-primary hover:text-blue-600\" target=\"_blank\" rel=\"noopener noreferrer\">Google Ads Settings</a></li>\n            </ul>\n\n            <h2>Impact of Disabling Cookies</h2>\n            <p>\n              If you disable cookies, some features of ToolHub may not work properly:\n            </p>\n            <ul>\n              <li>Preferences won't be saved between visits</li>\n              <li>Some tools may not function correctly</li>\n              <li>You may see less relevant advertisements</li>\n              <li>Analytics won't work, affecting our ability to improve the site</li>\n            </ul>\n\n            <h2>Third-Party Cookies</h2>\n            <p>\n              Some cookies are set by third-party services we use:\n            </p>\n            <ul>\n              <li><strong>Google Analytics:</strong> Web analytics service</li>\n              <li><strong>Google AdSense:</strong> Advertising network</li>\n              <li><strong>Font providers:</strong> Web fonts (Google Fonts)</li>\n              <li><strong>CDN services:</strong> Content delivery networks</li>\n            </ul>\n\n            <h2>Updates to This Policy</h2>\n            <p>\n              We may update this cookie policy to reflect changes in our practices or for other operational, legal, or regulatory reasons. \n              Please revisit this policy regularly to stay informed about our use of cookies.\n            </p>\n\n            <h2>Contact Us</h2>\n            <p>\n              If you have questions about our use of cookies, please <a href=\"/contact\" className=\"text-primary hover:text-blue-600\">contact us</a>.\n            </p>\n\n            <div className=\"bg-green-50 border border-green-200 rounded-xl p-6 mt-8\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-shield-alt text-green-600\"></i>\n                </div>\n                <h3 className=\"text-lg font-bold text-green-800 m-0\">Your Privacy Matters</h3>\n              </div>\n              <p className=\"text-green-700 m-0\">\n                We are committed to being transparent about our use of cookies and respecting your privacy choices. \n                Our calculators work without storing personal data, ensuring your privacy is always protected.\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9213},"client/src/pages/disclaimer.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function Disclaimer() {\n  useEffect(() => {\n    document.title = \"Disclaimer - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Important disclaimer about the use of ToolHub calculators and tools. Understand the limitations and proper use of our services.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"disclaimer-title\">\n              Disclaimer\n            </h1>\n            <p className=\"text-lg text-secondary max-w-2xl mx-auto\" data-testid=\"disclaimer-subtitle\">\n              Important information about the use of our calculators and tools\n            </p>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8 prose prose-slate max-w-none\">\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-6 mb-8\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-exclamation-triangle text-yellow-600\"></i>\n                </div>\n                <h2 className=\"text-xl font-bold text-yellow-800 m-0\">Important Notice</h2>\n              </div>\n              <p className=\"text-yellow-700 m-0\">\n                The information and calculations provided by ToolHub are for general informational and educational purposes only. \n                Always consult with qualified professionals for important decisions.\n              </p>\n            </div>\n\n            <h2>General Information</h2>\n            <p>\n              The calculators, converters, and tools provided on ToolHub are intended for general informational and educational purposes only. \n              While we strive for accuracy, we make no representations or warranties of any kind, express or implied, about the completeness, \n              accuracy, reliability, suitability, or availability of the information contained in our tools.\n            </p>\n\n            <h2>No Professional Advice</h2>\n            <p>\n              The results from our tools should not be considered as:\n            </p>\n            <ul>\n              <li><strong>Medical advice:</strong> BMI and health-related calculations are for informational purposes only</li>\n              <li><strong>Financial advice:</strong> Any financial calculations should be verified with qualified professionals</li>\n              <li><strong>Legal advice:</strong> Our tools do not provide legal guidance or recommendations</li>\n              <li><strong>Professional consultation:</strong> Always seek advice from qualified professionals for important decisions</li>\n            </ul>\n\n            <h2>Accuracy and Reliability</h2>\n            <p>\n              While we make every effort to ensure our calculators provide accurate results:\n            </p>\n            <ul>\n              <li>We cannot guarantee 100% accuracy of all calculations</li>\n              <li>Results may vary due to rounding, input errors, or calculation methods</li>\n              <li>Users should verify important calculations using alternative methods</li>\n              <li>We are not responsible for decisions made based on our tool results</li>\n            </ul>\n\n            <h2>Limitation of Liability</h2>\n            <p>\n              In no event will ToolHub be liable for any loss or damage including, without limitation, indirect or consequential loss or damage, \n              or any loss or damage whatsoever arising from loss of data or profits arising out of, or in connection with, the use of our tools.\n            </p>\n\n            <h2>External Links</h2>\n            <p>\n              Our website may contain links to external websites. We have no control over the content and nature of these sites and cannot be responsible for their content or availability.\n            </p>\n\n            <h2>Updates and Changes</h2>\n            <p>\n              We reserve the right to:\n            </p>\n            <ul>\n              <li>Update calculation methods and formulas</li>\n              <li>Modify or discontinue tools without notice</li>\n              <li>Change this disclaimer at any time</li>\n              <li>Improve accuracy and functionality of our tools</li>\n            </ul>\n\n            <h2>User Responsibility</h2>\n            <p>\n              Users of ToolHub are responsible for:\n            </p>\n            <ul>\n              <li>Verifying the accuracy of input data</li>\n              <li>Understanding the limitations of each tool</li>\n              <li>Seeking professional advice when needed</li>\n              <li>Using tools appropriately and legally</li>\n            </ul>\n\n            <h2>Reporting Issues</h2>\n            <p>\n              If you discover any calculation errors or have concerns about our tools, please <a href=\"/contact\" className=\"text-primary hover:text-blue-600\">contact us</a> immediately. \n              We take accuracy seriously and will investigate all reported issues.\n            </p>\n\n            <h2>Educational Purpose</h2>\n            <p>\n              Our tools are designed to help users understand calculations and conversions. They serve an educational purpose and should supplement, \n              not replace, proper learning and professional guidance.\n            </p>\n\n            <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-6 mt-8\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-info-circle text-blue-600\"></i>\n                </div>\n                <h3 className=\"text-lg font-bold text-blue-800 m-0\">Questions?</h3>\n              </div>\n              <p className=\"text-blue-700 m-0\">\n                If you have any questions about this disclaimer or need clarification about our tools, \n                please don't hesitate to <a href=\"/contact\" className=\"text-blue-600 hover:text-blue-800 font-medium\">contact us</a>.\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":6726},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport Hero from \"@/components/home/hero\";\nimport ToolsDashboard from \"@/components/home/tools-dashboard\";\nimport Features from \"@/components/home/features\";\n\nexport default function Home() {\n  useEffect(() => {\n    document.title = \"ToolHub - Free Online Calculators, Converters & Tools\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Free online calculators, converters, and fun tools. 100% free and secure. Age calculator, BMI calculator, and more useful tools.');\n    } else {\n      const meta = document.createElement('meta');\n      meta.name = 'description';\n      meta.content = 'Free online calculators, converters, and fun tools. 100% free and secure. Age calculator, BMI calculator, and more useful tools.';\n      document.head.appendChild(meta);\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      <Hero />\n      <ToolsDashboard />\n      <Features />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":1215},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/privacy-policy.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function PrivacyPolicy() {\n  useEffect(() => {\n    document.title = \"Privacy Policy - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Read our privacy policy to understand how ToolHub protects your data and privacy while using our free online calculators and tools.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"privacy-title\">\n              Privacy Policy\n            </h1>\n            <p className=\"text-lg text-secondary max-w-2xl mx-auto\" data-testid=\"privacy-subtitle\">\n              Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n            </p>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8 prose prose-slate max-w-none\">\n            <div className=\"bg-green-50 border border-green-200 rounded-xl p-6 mb-8\">\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-shield-alt text-green-600\"></i>\n                </div>\n                <h2 className=\"text-xl font-bold text-green-800 m-0\">Privacy First</h2>\n              </div>\n              <p className=\"text-green-700 m-0\">\n                All calculations on ToolHub happen directly in your browser. We do not collect, store, or transmit your personal data or calculation inputs to our servers.\n              </p>\n            </div>\n\n            <h2>Information We Collect</h2>\n            \n            <h3>Personal Information</h3>\n            <p>\n              We do not collect any personal information when you use our calculators and tools. All calculations are performed locally in your browser without sending data to our servers.\n            </p>\n\n            <h3>Usage Data</h3>\n            <p>\n              We may collect anonymous usage statistics including:\n            </p>\n            <ul>\n              <li>Pages visited on our website</li>\n              <li>Time spent on our site</li>\n              <li>Browser type and version</li>\n              <li>Operating system</li>\n              <li>Referring websites</li>\n            </ul>\n\n            <h2>How We Use Information</h2>\n            <p>\n              The limited anonymous data we collect is used solely to:\n            </p>\n            <ul>\n              <li>Improve our website performance</li>\n              <li>Understand which tools are most popular</li>\n              <li>Identify technical issues</li>\n              <li>Enhance user experience</li>\n            </ul>\n\n            <h2>Cookies</h2>\n            <p>\n              We use essential cookies only to:\n            </p>\n            <ul>\n              <li>Remember your preferences (dark mode, etc.)</li>\n              <li>Analyze website traffic (Google Analytics)</li>\n              <li>Ensure proper website functionality</li>\n            </ul>\n            <p>\n              You can disable cookies in your browser settings, but this may affect some website functionality.\n            </p>\n\n            <h2>Third-Party Services</h2>\n            <p>\n              We may use the following third-party services:\n            </p>\n            <ul>\n              <li><strong>Google Analytics:</strong> For anonymous website analytics</li>\n              <li><strong>Google AdSense:</strong> For displaying relevant advertisements</li>\n              <li><strong>CDN Services:</strong> For faster content delivery</li>\n            </ul>\n\n            <h2>Data Security</h2>\n            <p>\n              Since we don't collect personal data from calculations, there's minimal risk to your privacy. However, we implement standard security measures including:\n            </p>\n            <ul>\n              <li>HTTPS encryption for all communications</li>\n              <li>Regular security updates</li>\n              <li>Secure hosting infrastructure</li>\n            </ul>\n\n            <h2>Your Rights</h2>\n            <p>\n              You have the right to:\n            </p>\n            <ul>\n              <li>Use our tools without providing personal information</li>\n              <li>Disable cookies in your browser</li>\n              <li>Contact us with privacy concerns</li>\n              <li>Request information about any data we may have</li>\n            </ul>\n\n            <h2>Changes to This Policy</h2>\n            <p>\n              We may update this privacy policy from time to time. We will notify users of any significant changes by posting a notice on our website.\n            </p>\n\n            <h2>Contact Us</h2>\n            <p>\n              If you have questions about this privacy policy, please <a href=\"/contact\" className=\"text-primary hover:text-blue-600\">contact us</a>.\n            </p>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5444},"client/src/pages/terms-conditions.tsx":{"content":"import { useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\n\nexport default function TermsConditions() {\n  useEffect(() => {\n    document.title = \"Terms & Conditions - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Read our terms and conditions for using ToolHub online calculators and tools. Understand your rights and responsibilities.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"terms-title\">\n              Terms & Conditions\n            </h1>\n            <p className=\"text-lg text-secondary max-w-2xl mx-auto\" data-testid=\"terms-subtitle\">\n              Last updated: {new Date().toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}\n            </p>\n          </div>\n\n          <div className=\"bg-white rounded-2xl shadow-sm border border-slate-200 p-8 prose prose-slate max-w-none\">\n            <h2>Agreement to Terms</h2>\n            <p>\n              By accessing and using ToolHub, you accept and agree to be bound by the terms and provision of this agreement. \n              If you do not agree to abide by the above, please do not use this service.\n            </p>\n\n            <h2>Use License</h2>\n            <p>\n              Permission is granted to temporarily use ToolHub for personal, non-commercial transitory viewing only. This includes:\n            </p>\n            <ul>\n              <li>Using our calculators and tools for personal calculations</li>\n              <li>Sharing results from our tools</li>\n              <li>Linking to our tools from other websites</li>\n            </ul>\n\n            <p>This license does not include:</p>\n            <ul>\n              <li>Modifying or copying the materials</li>\n              <li>Using the materials for commercial purposes</li>\n              <li>Attempting to reverse engineer our tools</li>\n              <li>Removing any copyright or proprietary notations</li>\n            </ul>\n\n            <h2>Service Availability</h2>\n            <p>\n              We strive to maintain ToolHub with 99.9% uptime, but we cannot guarantee uninterrupted service. The service is provided \"as is\" without warranties of any kind.\n            </p>\n\n            <h2>Accuracy of Tools</h2>\n            <p>\n              While we make every effort to ensure our calculators and tools provide accurate results, we cannot guarantee 100% accuracy. Users should:\n            </p>\n            <ul>\n              <li>Verify important calculations with alternative methods</li>\n              <li>Use professional advice for critical decisions</li>\n              <li>Report any calculation errors to us</li>\n            </ul>\n\n            <h2>User Conduct</h2>\n            <p>\n              When using ToolHub, you agree not to:\n            </p>\n            <ul>\n              <li>Use our service for illegal activities</li>\n              <li>Attempt to disrupt or damage our website</li>\n              <li>Use automated tools to access our service excessively</li>\n              <li>Impersonate others or provide false information</li>\n            </ul>\n\n            <h2>Privacy</h2>\n            <p>\n              Your privacy is important to us. Please review our <a href=\"/privacy-policy\" className=\"text-primary hover:text-blue-600\">Privacy Policy</a>, \n              which also governs your use of the service.\n            </p>\n\n            <h2>Intellectual Property</h2>\n            <p>\n              The service and its original content, features, and functionality are and will remain the exclusive property of ToolHub and its licensors. \n              The service is protected by copyright, trademark, and other laws.\n            </p>\n\n            <h2>Termination</h2>\n            <p>\n              We may terminate or suspend your access immediately, without prior notice, for any reason whatsoever, including without limitation if you breach the Terms.\n            </p>\n\n            <h2>Limitation of Liability</h2>\n            <p>\n              In no event shall ToolHub, nor its directors, employees, partners, agents, suppliers, or affiliates, be liable for any indirect, incidental, special, consequential, or punitive damages, including without limitation, loss of profits, data, use, goodwill, or other intangible losses, resulting from your use of the service.\n            </p>\n\n            <h2>Governing Law</h2>\n            <p>\n              These Terms shall be interpreted and governed by the laws of the jurisdiction in which our company is registered, without regard to its conflict of law provisions.\n            </p>\n\n            <h2>Changes to Terms</h2>\n            <p>\n              We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material, we will try to provide at least 30 days notice prior to any new terms taking effect.\n            </p>\n\n            <h2>Contact Information</h2>\n            <p>\n              If you have any questions about these Terms and Conditions, please <a href=\"/contact\" className=\"text-primary hover:text-blue-600\">contact us</a>.\n            </p>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":5641},"client/src/components/home/features.tsx":{"content":"export default function Features() {\n  const features = [\n    {\n      icon: 'fas fa-shield-alt',\n      iconColor: 'text-accent',\n      iconBg: 'bg-green-100',\n      title: '100% Secure',\n      description: 'All calculations happen in your browser. No data is sent to our servers or stored anywhere.'\n    },\n    {\n      icon: 'fas fa-bolt',\n      iconColor: 'text-primary',\n      iconBg: 'bg-blue-100',\n      title: 'Lightning Fast',\n      description: 'Optimized for speed and performance. Get instant results without any delays or loading times.'\n    },\n    {\n      icon: 'fas fa-mobile-alt',\n      iconColor: 'text-purple-600',\n      iconBg: 'bg-purple-100',\n      title: 'Mobile Friendly',\n      description: 'Perfect responsive design that works seamlessly on all devices, from phones to desktops.'\n    }\n  ];\n\n  return (\n    <section className=\"py-16 bg-slate-50\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 mb-4\" data-testid=\"features-title\">\n            Why Choose Our Tools?\n          </h2>\n          <p className=\"text-lg text-secondary max-w-2xl mx-auto\" data-testid=\"features-description\">\n            Built with privacy, accuracy, and user experience in mind.\n          </p>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {features.map((feature, index) => (\n            <div key={index} className=\"text-center p-6\" data-testid={`feature-${index}`}>\n              <div className={`w-16 h-16 ${feature.iconBg} rounded-2xl flex items-center justify-center mx-auto mb-4`}>\n                <i className={`${feature.icon} ${feature.iconColor} text-2xl`}></i>\n              </div>\n              <h3 className=\"text-xl font-semibold text-slate-800 mb-3\" data-testid={`feature-title-${index}`}>\n                {feature.title}\n              </h3>\n              <p className=\"text-slate-600\" data-testid={`feature-description-${index}`}>\n                {feature.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2168},"client/src/components/home/hero.tsx":{"content":"export default function Hero() {\n  const scrollToTools = () => {\n    const toolsSection = document.getElementById('tools');\n    if (toolsSection) {\n      toolsSection.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start'\n      });\n    }\n  };\n\n  return (\n    <section className=\"gradient-bg py-20\">\n      <div className=\"container mx-auto px-4 text-center\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-slate-800 mb-6 leading-tight\" data-testid=\"hero-title\">\n            Free Online Calculators, <br className=\"hidden md:block\" />\n            <span className=\"text-primary\">Converters & Fun Tools</span>\n          </h1>\n          <p className=\"text-xl md:text-2xl text-secondary mb-8 font-medium\" data-testid=\"hero-subtitle\">\n            100% Free & Secure – No Registration Required\n          </p>\n          <p className=\"text-lg text-slate-600 mb-10 max-w-2xl mx-auto\" data-testid=\"hero-description\">\n            Discover our collection of carefully crafted online tools designed to make your daily calculations and conversions effortless. All tools work directly in your browser with complete privacy.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <button \n              onClick={scrollToTools}\n              className=\"bg-primary text-white px-8 py-4 rounded-xl font-semibold text-lg hover:bg-blue-600 transition-colors duration-200 shadow-lg hover:shadow-xl\"\n              data-testid=\"button-explore-tools\"\n            >\n              <i className=\"fas fa-calculator mr-2\"></i>\n              Explore Tools\n            </button>\n            <button \n              onClick={scrollToTools}\n              className=\"bg-white text-primary border-2 border-primary px-8 py-4 rounded-xl font-semibold text-lg hover:bg-primary hover:text-white transition-colors duration-200\"\n              data-testid=\"button-learn-more\"\n            >\n              <i className=\"fas fa-info-circle mr-2\"></i>\n              Learn More\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2136},"client/src/components/home/tools-dashboard.tsx":{"content":"import { Link } from \"wouter\";\nimport { useState } from \"react\";\nimport { Input } from \"@/components/ui/input\";\n\ninterface ToolCard {\n  id: string;\n  title: string;\n  description: string;\n  icon: string;\n  iconBg: string;\n  iconColor: string;\n  users: string;\n  href: string;\n  isActive: boolean;\n}\n\nconst tools: ToolCard[] = [\n  // Health & Fitness Calculators\n  {\n    id: 'age-calculator',\n    title: 'Age Calculator',\n    description: 'Calculate your exact age in years, months, days, hours, and minutes. Find out how many days until your next birthday.',\n    icon: 'fas fa-birthday-cake',\n    iconBg: 'from-primary to-blue-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '12.5k users',\n    href: '/tools/age-calculator',\n    isActive: true\n  },\n  {\n    id: 'bmi-calculator',\n    title: 'BMI Calculator',\n    description: 'Calculate your Body Mass Index (BMI) and get health insights based on your height and weight measurements.',\n    icon: 'fas fa-weight',\n    iconBg: 'from-accent to-green-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '8.2k users',\n    href: '/tools/bmi-calculator',\n    isActive: true\n  },\n  {\n    id: 'bmr-calculator',\n    title: 'BMR Calculator',\n    description: 'Calculate your Basal Metabolic Rate and daily calorie needs based on activity level and personal metrics.',\n    icon: 'fas fa-fire',\n    iconBg: 'from-orange-500 to-red-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '6.8k users',\n    href: '/tools/bmr-calculator',\n    isActive: true\n  },\n  // Financial Calculators\n  {\n    id: 'percentage-calculator',\n    title: 'Percentage Calculator',\n    description: 'Calculate percentages, percentage increase, decrease, and find what percentage one number is of another.',\n    icon: 'fas fa-percentage',\n    iconBg: 'from-purple-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '9.1k users',\n    href: '/tools/percentage-calculator',\n    isActive: true\n  },\n  {\n    id: 'tip-calculator',\n    title: 'Tip Calculator',\n    description: 'Calculate tips and split bills easily for restaurants and services. Perfect for dining out with friends.',\n    icon: 'fas fa-money-bill-wave',\n    iconBg: 'from-green-500 to-emerald-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '7.3k users',\n    href: '/tools/tip-calculator',\n    isActive: true\n  },\n  {\n    id: 'discount-calculator',\n    title: 'Discount Calculator',\n    description: 'Calculate discounts, sale prices, and total savings. Perfect for shopping and finding the best deals.',\n    icon: 'fas fa-tags',\n    iconBg: 'from-red-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '5.9k users',\n    href: '/tools/discount-calculator',\n    isActive: true\n  },\n  {\n    id: 'simple-interest-calculator',\n    title: 'Simple Interest Calculator',\n    description: 'Calculate simple interest on loans, deposits, and investments with detailed breakdown and projections.',\n    icon: 'fas fa-percent',\n    iconBg: 'from-blue-500 to-indigo-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '4.2k users',\n    href: '/tools/simple-interest-calculator',\n    isActive: true\n  },\n  {\n    id: 'loan-emi-calculator',\n    title: 'Loan EMI Calculator',\n    description: 'Calculate loan EMI, monthly payments, and total interest with detailed amortization schedule.',\n    icon: 'fas fa-calculator',\n    iconBg: 'from-green-500 to-teal-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '8.7k users',\n    href: '/tools/loan-emi-calculator',\n    isActive: true\n  },\n  // Date & Time Tools\n  {\n    id: 'timezone-converter',\n    title: 'Time Zone Converter',\n    description: 'Convert time between different time zones instantly. Perfect for scheduling meetings across time zones.',\n    icon: 'fas fa-globe-americas',\n    iconBg: 'from-blue-500 to-indigo-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '14.2k users',\n    href: '/tools/timezone-converter',\n    isActive: true\n  },\n  {\n    id: 'countdown-timer',\n    title: 'Countdown Timer Generator',\n    description: 'Create custom countdown timers for events, deadlines, or special occasions with real-time updates.',\n    icon: 'fas fa-hourglass-half',\n    iconBg: 'from-red-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '11.8k users',\n    href: '/tools/countdown-timer',\n    isActive: true\n  },\n  {\n    id: 'stopwatch-tool',\n    title: 'Stopwatch Tool',\n    description: 'Precise online stopwatch with millisecond accuracy, lap times, and statistics for timing activities.',\n    icon: 'fas fa-stopwatch',\n    iconBg: 'from-green-500 to-emerald-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '9.7k users',\n    href: '/tools/stopwatch',\n    isActive: true\n  },\n  {\n    id: 'age-in-days-calculator',\n    title: 'Age in Days Calculator',\n    description: 'Calculate your exact age in days, weeks, months, hours, and minutes. Discover fun age facts.',\n    icon: 'fas fa-calendar-day',\n    iconBg: 'from-purple-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '13.5k users',\n    href: '/tools/age-in-days-calculator',\n    isActive: true\n  },\n  {\n    id: 'world-clock',\n    title: 'World Clock Tool',\n    description: 'View current time in major cities worldwide. Real-time world clock with multiple time zones.',\n    icon: 'fas fa-globe',\n    iconBg: 'from-cyan-500 to-blue-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '16.3k users',\n    href: '/tools/world-clock',\n    isActive: true\n  },\n  {\n    id: 'work-days-calculator',\n    title: 'Work Days Calculator',\n    description: 'Calculate working days between dates, excluding weekends and holidays. Perfect for project planning.',\n    icon: 'fas fa-briefcase',\n    iconBg: 'from-orange-500 to-red-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '8.4k users',\n    href: '/tools/work-days-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'event-reminder',\n    title: 'Event Reminder Tool',\n    description: 'Set up event reminders with browser notifications. Never miss important meetings or appointments.',\n    icon: 'fas fa-bell',\n    iconBg: 'from-yellow-500 to-orange-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '7.1k users',\n    href: '/tools/event-reminder.html',\n    isActive: true\n  },\n  {\n    id: 'calendar-generator',\n    title: 'Calendar Generator',\n    description: 'Generate printable calendars for any month and year. Customize with holidays and different layouts.',\n    icon: 'fas fa-calendar-alt',\n    iconBg: 'from-indigo-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '12.9k users',\n    href: '/tools/calendar-generator.html',\n    isActive: true\n  },\n  {\n    id: 'date-to-day-calculator',\n    title: 'Date to Day Calculator',\n    description: 'Find out what day of the week any date falls on. Perfect for historical events and planning.',\n    icon: 'fas fa-calendar-week',\n    iconBg: 'from-teal-500 to-cyan-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '6.8k users',\n    href: '/tools/date-to-day-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'sleep-timer',\n    title: 'Sleep Timer',\n    description: 'Calculate optimal bedtime and wake times based on natural sleep cycles for better sleep quality.',\n    icon: 'fas fa-bed',\n    iconBg: 'from-violet-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '10.6k users',\n    href: '/tools/sleep-timer.html',\n    isActive: true\n  },\n  // Text & Utility Tools\n  {\n    id: 'word-counter',\n    title: 'Word Counter',\n    description: 'Count words, characters, paragraphs, and sentences in your text with detailed statistics and analysis.',\n    icon: 'fas fa-file-word',\n    iconBg: 'from-blue-500 to-indigo-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '24.7k users',\n    href: '/tools/word-counter.html',\n    isActive: true\n  },\n  {\n    id: 'character-counter',\n    title: 'Character Counter',\n    description: 'Count characters in your text with and without spaces, including detailed character analysis.',\n    icon: 'fas fa-font',\n    iconBg: 'from-green-500 to-emerald-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '18.3k users',\n    href: '/tools/character-counter.html',\n    isActive: true\n  },\n  {\n    id: 'random-password-generator',\n    title: 'Random Password Generator',\n    description: 'Generate strong, secure passwords with customizable options for length and character types.',\n    icon: 'fas fa-key',\n    iconBg: 'from-red-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '31.2k users',\n    href: '/tools/random-password-generator.html',\n    isActive: true\n  },\n  {\n    id: 'qr-code-generator',\n    title: 'QR Code Generator',\n    description: 'Generate QR codes for text, URLs, contact info, WiFi credentials, and more with download options.',\n    icon: 'fas fa-qrcode',\n    iconBg: 'from-purple-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '27.8k users',\n    href: '/tools/qr-code-generator.html',\n    isActive: true\n  },\n  {\n    id: 'text-case-converter',\n    title: 'Text Case Converter',\n    description: 'Convert text between different cases: uppercase, lowercase, title case, camel case, and more.',\n    icon: 'fas fa-font',\n    iconBg: 'from-orange-500 to-red-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '15.9k users',\n    href: '/tools/text-case-converter.html',\n    isActive: true\n  },\n  {\n    id: 'remove-extra-spaces',\n    title: 'Remove Extra Spaces',\n    description: 'Clean up text by removing extra spaces, duplicate spaces, and formatting issues instantly.',\n    icon: 'fas fa-eraser',\n    iconBg: 'from-cyan-500 to-blue-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '12.4k users',\n    href: '/tools/remove-extra-spaces',\n    isActive: true\n  },\n  {\n    id: 'reverse-text-generator',\n    title: 'Reverse Text Generator',\n    description: 'Reverse text in multiple ways: reverse entire text, words, word order, or create mirror text.',\n    icon: 'fas fa-exchange-alt',\n    iconBg: 'from-indigo-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '9.7k users',\n    href: '/tools/reverse-text-generator',\n    isActive: true\n  },\n  {\n    id: 'palindrome-checker',\n    title: 'Palindrome Checker',\n    description: 'Check if words, phrases, or sentences are palindromes with detailed analysis and examples.',\n    icon: 'fas fa-exchange-alt',\n    iconBg: 'from-teal-500 to-cyan-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '7.8k users',\n    href: '/tools/palindrome-checker.html',\n    isActive: true\n  },\n  {\n    id: 'lorem-ipsum-generator',\n    title: 'Lorem Ipsum Generator',\n    description: 'Generate Lorem Ipsum placeholder text for designs and mockups with customizable options.',\n    icon: 'fas fa-paragraph',\n    iconBg: 'from-yellow-500 to-orange-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '22.1k users',\n    href: '/tools/lorem-ipsum-generator.html',\n    isActive: true\n  },\n  {\n    id: 'base64-encoder-decoder',\n    title: 'Base64 Encoder/Decoder',\n    description: 'Encode text to Base64 or decode Base64 strings with instant conversion and validation.',\n    icon: 'fas fa-code',\n    iconBg: 'from-violet-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '16.5k users',\n    href: '/tools/base64-encoder-decoder.html',\n    isActive: true\n  },\n  {\n    id: 'text-to-binary-converter',\n    title: 'Text to Binary Converter',\n    description: 'Convert text to binary and binary to text with detailed character analysis and validation.',\n    icon: 'fas fa-code',\n    iconBg: 'from-emerald-500 to-teal-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '13.7k users',\n    href: '/tools/text-to-binary-converter.html',\n    isActive: true\n  },\n  // Utility Tools\n  {\n    id: 'date-difference-calculator',\n    title: 'Date Difference Calculator',\n    description: 'Calculate the difference between dates, add or subtract days, and find working days between dates.',\n    icon: 'fas fa-calendar-alt',\n    iconBg: 'from-indigo-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '6.4k users',\n    href: '/tools/date-difference-calculator',\n    isActive: true\n  },\n  // Converter Tools\n  {\n    id: 'length-converter',\n    title: 'Length Converter',\n    description: 'Convert between different units of length including meters, feet, inches, kilometers, and more.',\n    icon: 'fas fa-ruler',\n    iconBg: 'from-blue-500 to-indigo-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '15.2k users',\n    href: '/tools/length-converter.html',\n    isActive: true\n  },\n  {\n    id: 'weight-converter',\n    title: 'Weight Converter',\n    description: 'Convert between different units of weight including kilograms, pounds, ounces, and more.',\n    icon: 'fas fa-weight-hanging',\n    iconBg: 'from-green-500 to-emerald-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '12.8k users',\n    href: '/tools/weight-converter.html',\n    isActive: true\n  },\n  {\n    id: 'temperature-converter',\n    title: 'Temperature Converter',\n    description: 'Convert between Celsius, Fahrenheit, and Kelvin temperature scales with instant results.',\n    icon: 'fas fa-thermometer-half',\n    iconBg: 'from-red-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '18.5k users',\n    href: '/tools/temperature-converter.html',\n    isActive: true\n  },\n  {\n    id: 'speed-converter',\n    title: 'Speed Converter',\n    description: 'Convert between different units of speed including mph, km/h, m/s, and more.',\n    icon: 'fas fa-tachometer-alt',\n    iconBg: 'from-purple-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '9.7k users',\n    href: '/tools/speed-converter',\n    isActive: true\n  },\n  {\n    id: 'area-converter',\n    title: 'Area Converter',\n    description: 'Convert between different units of area including square meters, acres, hectares, and more.',\n    icon: 'fas fa-expand-arrows-alt',\n    iconBg: 'from-orange-500 to-red-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '7.3k users',\n    href: '/tools/area-converter',\n    isActive: true\n  },\n  {\n    id: 'volume-converter',\n    title: 'Volume Converter',\n    description: 'Convert between different units of volume including liters, gallons, cubic meters, and more.',\n    icon: 'fas fa-cube',\n    iconBg: 'from-cyan-500 to-blue-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '8.1k users',\n    href: '/tools/volume-converter',\n    isActive: true\n  },\n  {\n    id: 'time-converter',\n    title: 'Time Converter',\n    description: 'Convert between different units of time including seconds, minutes, hours, days, and more.',\n    icon: 'fas fa-clock',\n    iconBg: 'from-indigo-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '11.4k users',\n    href: '/tools/time-converter.html',\n    isActive: true\n  },\n  {\n    id: 'fuel-efficiency-converter',\n    title: 'Fuel Efficiency Converter',\n    description: 'Convert between MPG, L/100km, and other fuel efficiency units for vehicles.',\n    icon: 'fas fa-gas-pump',\n    iconBg: 'from-yellow-500 to-orange-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '5.9k users',\n    href: '/tools/fuel-efficiency-converter.html',\n    isActive: true\n  },\n  {\n    id: 'pressure-converter',\n    title: 'Pressure Converter',\n    description: 'Convert between different units of pressure including PSI, bar, Pascal, and more.',\n    icon: 'fas fa-gauge-high',\n    iconBg: 'from-teal-500 to-cyan-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '4.6k users',\n    href: '/tools/pressure-converter.html',\n    isActive: true\n  },\n  {\n    id: 'energy-converter',\n    title: 'Energy Converter',\n    description: 'Convert between different units of energy including Joules, calories, BTU, and more.',\n    icon: 'fas fa-bolt',\n    iconBg: 'from-violet-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '6.2k users',\n    href: '/tools/energy-converter.html',\n    isActive: true\n  },\n  // Currency & Finance Tools\n  {\n    id: 'currency-converter',\n    title: 'Currency Converter',\n    description: 'Convert between different currencies with real-time exchange rates. Supports 170+ currencies worldwide.',\n    icon: 'fas fa-exchange-alt',\n    iconBg: 'from-green-500 to-emerald-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '25.4k users',\n    href: '/tools/currency-converter.html',\n    isActive: true\n  },\n  {\n    id: 'crypto-price-converter',\n    title: 'Crypto Price Converter',\n    description: 'Convert cryptocurrency prices with real-time data from CoinGecko API. Track popular coins.',\n    icon: 'fab fa-bitcoin',\n    iconBg: 'group-hover:from-orange-500 group-hover:to-yellow-600',\n    iconColor: 'text-white',\n    users: '18.7k users',\n    href: '/tools/crypto-price-converter.html',\n    isActive: true\n  },\n  {\n    id: 'inflation-calculator',\n    title: 'Inflation Calculator',\n    description: 'Calculate inflation impact on purchasing power using historical data from multiple countries.',\n    icon: 'fas fa-chart-line',\n    iconBg: 'from-red-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '12.3k users',\n    href: '/tools/inflation-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'mortgage-calculator',\n    title: 'Mortgage Calculator',\n    description: 'Calculate monthly mortgage payments, total interest, and amortization schedules for home loans.',\n    icon: 'fas fa-home',\n    iconBg: 'from-blue-500 to-indigo-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '21.8k users',\n    href: '/tools/mortgage-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'car-loan-calculator',\n    title: 'Car Loan Calculator',\n    description: 'Calculate auto loan payments, total cost, and compare different financing options for vehicles.',\n    icon: 'fas fa-car',\n    iconBg: 'from-purple-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '16.9k users',\n    href: '/tools/car-loan-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'investment-return-calculator',\n    title: 'Investment Return Calculator',\n    description: 'Calculate investment returns, compound interest, and future value with detailed projections.',\n    icon: 'fas fa-chart-area',\n    iconBg: 'from-cyan-500 to-blue-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '14.2k users',\n    href: '/tools/investment-return-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'stock-profit-calculator',\n    title: 'Stock Profit Calculator',\n    description: 'Calculate stock trading profits, losses, and returns including fees and commission costs.',\n    icon: 'fas fa-chart-candlestick',\n    iconBg: 'from-emerald-500 to-green-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '11.5k users',\n    href: '/tools/stock-profit-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'break-even-calculator',\n    title: 'Break-Even Calculator',\n    description: 'Calculate break-even point for business planning, pricing strategies, and financial analysis.',\n    icon: 'fas fa-balance-scale-right',\n    iconBg: 'from-teal-500 to-cyan-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '8.9k users',\n    href: '/tools/break-even-calculator.html',\n    isActive: true\n  },\n  {\n    id: 'salary-hourly-converter',\n    title: 'Salary to Hourly Converter',\n    description: 'Convert between salary and hourly wages with customizable working hours and vacation time.',\n    icon: 'fas fa-money-check-alt',\n    iconBg: 'from-indigo-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '19.3k users',\n    href: '/tools/salary-hourly-converter.html',\n    isActive: true\n  },\n  {\n    id: 'freelancer-hourly-rate-calculator',\n    title: 'Freelancer Rate Calculator',\n    description: 'Calculate freelancer hourly rates considering expenses, taxes, and desired profit margins.',\n    icon: 'fas fa-user-tie',\n    iconBg: 'from-violet-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '7.6k users',\n    href: '/tools/freelancer-hourly-rate-calculator.html',\n    isActive: true\n  },\n  // Fun Tools\n  {\n    id: 'random-joke-generator',\n    title: 'Random Joke Generator',\n    description: 'Generate random jokes to brighten your day! Family-friendly jokes from different categories.',\n    icon: 'fas fa-laugh',\n    iconBg: 'from-yellow-500 to-orange-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '3.1k users',\n    href: '/tools/random-joke-generator.html',\n    isActive: true\n  },\n  // Additional Health & Fitness Tools\n  {\n    id: 'ideal-weight-calculator',\n    title: 'Ideal Weight Calculator',\n    description: 'Calculate your ideal weight using multiple medical formulas (Robinson, Miller, Devine, Hamwi).',\n    icon: 'fas fa-balance-scale',\n    iconBg: 'from-teal-500 to-cyan-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '4.7k users',\n    href: '/tools/ideal-weight-calculator',\n    isActive: true\n  },\n  {\n    id: 'water-intake-calculator',\n    title: 'Water Intake Calculator',\n    description: 'Calculate daily water intake needs based on weight, activity level, and environmental factors.',\n    icon: 'fas fa-tint',\n    iconBg: 'group-hover:from-blue-500 group-hover:to-cyan-600',\n    iconColor: 'text-white',\n    users: '5.3k users',\n    href: '/tools/water-intake-calculator',\n    isActive: true\n  },\n  {\n    id: 'macro-nutrient-calculator',\n    title: 'Macro Nutrient Calculator',\n    description: 'Calculate daily macronutrient needs (protein, carbs, fats) based on your fitness goals.',\n    icon: 'fas fa-apple-alt',\n    iconBg: 'from-green-500 to-emerald-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '6.8k users',\n    href: '/tools/macro-nutrient-calculator',\n    isActive: true\n  },\n  {\n    id: 'heart-rate-zone-calculator',\n    title: 'Heart Rate Zone Calculator',\n    description: 'Calculate heart rate training zones for optimal workout intensity and performance.',\n    icon: 'fas fa-heartbeat',\n    iconBg: 'from-red-500 to-pink-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '4.1k users',\n    href: '/tools/heart-rate-zone-calculator',\n    isActive: true\n  },\n  {\n    id: 'bac-calculator',\n    title: 'BAC Calculator',\n    description: 'Calculate Blood Alcohol Content levels for educational purposes and safety awareness.',\n    icon: 'fas fa-wine-glass',\n    iconBg: 'group-hover:from-red-500 group-hover:to-red-700',\n    iconColor: 'text-white',\n    users: '2.9k users',\n    href: '/tools/bac-calculator',\n    isActive: true\n  },\n  {\n    id: 'step-calorie-converter',\n    title: 'Step to Calorie Converter',\n    description: 'Convert steps to calories burned or find how many steps you need for a calorie goal.',\n    icon: 'fas fa-walking',\n    iconBg: 'from-green-500 to-teal-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '7.2k users',\n    href: '/tools/step-calorie-converter',\n    isActive: true\n  },\n  {\n    id: 'protein-intake-calculator',\n    title: 'Protein Intake Calculator',\n    description: 'Calculate daily protein needs based on weight, activity level, and fitness goals.',\n    icon: 'fas fa-drumstick-bite',\n    iconBg: 'from-blue-500 to-indigo-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '5.6k users',\n    href: '/tools/protein-intake-calculator',\n    isActive: true\n  },\n  {\n    id: 'sleep-cycle-calculator',\n    title: 'Sleep Cycle Calculator',\n    description: 'Calculate optimal sleep and wake times based on 90-minute sleep cycles for better rest.',\n    icon: 'fas fa-bed',\n    iconBg: 'from-indigo-500 to-purple-600 bg-gradient-to-br',\n    iconColor: 'text-white',\n    users: '8.9k users',\n    href: '/tools/sleep-cycle-calculator',\n    isActive: true\n  },\n  {\n    id: 'body-surface-area-calculator',\n    title: 'Body Surface Area Calculator',\n    description: 'Calculate body surface area using multiple medical formulas for accurate medical dosing.',\n    icon: 'fas fa-user-cog',\n    iconBg: 'group-hover:from-purple-500 group-hover:to-indigo-600',\n    iconColor: 'text-white',\n    users: '2.1k users',\n    href: '/tools/body-surface-area-calculator',\n    isActive: true\n  }\n];\n\nexport default function ToolsDashboard() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Filter tools based on search query\n  const filteredTools = tools.filter(tool =>\n    tool.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    tool.description.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    tool.id.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <section id=\"tools\" className=\"py-16 bg-white\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-slate-800 mb-4\" data-testid=\"tools-title\">\n            Popular Tools\n          </h2>\n          <p className=\"text-lg text-secondary max-w-2xl mx-auto mb-8\" data-testid=\"tools-description\">\n            Choose from our growing collection of free online tools. Each tool is designed for accuracy, speed, and ease of use.\n          </p>\n          \n          {/* Search Bar */}\n          <div className=\"max-w-md mx-auto mb-8\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search tools...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-12 pr-4 py-3 text-lg border-2 border-slate-200 rounded-xl focus:border-primary focus:ring-0 bg-white\"\n                data-testid=\"search-input\"\n              />\n              <div className=\"absolute left-4 top-1/2 transform -translate-y-1/2\">\n                <i className=\"fas fa-search text-slate-400\"></i>\n              </div>\n              {searchQuery && (\n                <button\n                  onClick={() => setSearchQuery(\"\")}\n                  className=\"absolute right-4 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-600\"\n                  data-testid=\"clear-search\"\n                >\n                  <i className=\"fas fa-times\"></i>\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Search Results Info */}\n          {searchQuery && (\n            <div className=\"mb-6\" data-testid=\"search-results-info\">\n              <p className=\"text-slate-600\">\n                {filteredTools.length === 0 \n                  ? `No tools found for \"${searchQuery}\"`\n                  : `${filteredTools.length} tool${filteredTools.length === 1 ? '' : 's'} found for \"${searchQuery}\"`\n                }\n              </p>\n            </div>\n          )}\n        </div>\n        \n        {/* Tools Grid */}\n        {filteredTools.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto\">\n            {filteredTools.map((tool) => (\n              <Link href={tool.href} key={tool.id} data-testid={`link-${tool.id}`}>\n                <div\n                  className={`tool-card rounded-2xl shadow-sm border p-6 transition-all duration-300 cursor-pointer ${\n                    tool.isActive\n                      ? 'bg-white border-slate-200 hover:shadow-xl hover:border-primary/20'\n                      : 'bg-slate-50 border-slate-200 hover:shadow-md opacity-75'\n                  }`}\n                  data-testid={`card-tool-${tool.id}`}\n                >\n                  <div className={`flex items-center justify-center w-14 h-14 ${tool.iconBg} rounded-xl mb-4 transition-colors duration-300`}>\n                    <i className={`${tool.icon} text-xl transition-colors duration-300 ${tool.iconColor}`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-800 mb-2\" data-testid={`title-${tool.id}`}>\n                    {tool.title}\n                  </h3>\n                  <p className=\"text-slate-600 mb-4 text-sm leading-relaxed\" data-testid={`description-${tool.id}`}>\n                    {tool.description}\n                  </p>\n                </div>\n              </Link>\n            ))}\n          </div>\n        ) : searchQuery ? (\n          <div className=\"text-center py-16\" data-testid=\"no-results\">\n            <div className=\"w-24 h-24 bg-slate-100 rounded-full flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-search text-slate-400 text-3xl\"></i>\n            </div>\n            <h3 className=\"text-2xl font-semibold text-slate-700 mb-4\">No tools found</h3>\n            <p className=\"text-slate-500 mb-6 max-w-md mx-auto\">\n              We couldn't find any tools matching \"<span className=\"font-semibold\">{searchQuery}</span>\". \n              Try searching with different keywords or browse all available tools.\n            </p>\n            <button\n              onClick={() => setSearchQuery(\"\")}\n              className=\"bg-primary text-white px-6 py-3 rounded-xl font-semibold hover:bg-blue-600 transition-colors duration-200\"\n              data-testid=\"clear-search-button\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Show All Tools\n            </button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 max-w-7xl mx-auto\">\n            {tools.map((tool) => (\n              <Link href={tool.href} key={tool.id} data-testid={`link-${tool.id}`}>\n                <div\n                  className={`tool-card rounded-2xl shadow-sm border p-6 transition-all duration-300 cursor-pointer ${\n                    tool.isActive\n                      ? 'bg-white border-slate-200 hover:shadow-xl hover:border-primary/20'\n                      : 'bg-slate-50 border-slate-200 hover:shadow-md opacity-75'\n                  }`}\n                  data-testid={`card-tool-${tool.id}`}\n                >\n                  <div className={`flex items-center justify-center w-14 h-14 ${tool.iconBg} rounded-xl mb-4 transition-colors duration-300`}>\n                    <i className={`${tool.icon} text-xl transition-colors duration-300 ${tool.iconColor}`}></i>\n                  </div>\n                  <h3 className=\"text-xl font-semibold text-slate-800 mb-2\" data-testid={`title-${tool.id}`}>\n                    {tool.title}\n                  </h3>\n                  <p className=\"text-slate-600 mb-4 text-sm leading-relaxed\" data-testid={`description-${tool.id}`}>\n                    {tool.description}\n                  </p>\n                </div>\n              </Link>\n            ))}\n          </div>\n        )}\n        \n        {/* Call to Action for More Tools */}\n        <div className=\"text-center mt-12\">\n          <div className=\"bg-gradient-to-r from-primary to-accent rounded-2xl p-8 text-white\">\n            <h3 className=\"text-2xl font-bold mb-3\" data-testid=\"cta-title\">\n              Even More Tools Coming Soon!\n            </h3>\n            <p className=\"text-blue-100 mb-6 max-w-2xl mx-auto\" data-testid=\"cta-description\">\n              We're constantly expanding our collection of free calculators and tools. \n              More health, financial, and utility calculators are on the way!\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <button \n                className=\"bg-white text-primary px-6 py-3 rounded-xl font-semibold hover:bg-slate-100 transition-colors duration-200\"\n                data-testid=\"button-suggest-tool\"\n              >\n                <i className=\"fas fa-lightbulb mr-2\"></i>\n                Suggest a Tool\n              </button>\n              <Link href=\"/tools/random-joke-generator.html\">\n                <span className=\"bg-yellow-500 text-white px-6 py-3 rounded-xl font-semibold hover:bg-yellow-600 transition-colors duration-200 inline-block cursor-pointer\">\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Need a Laugh?\n                </span>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":32336},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-slate-800 text-slate-300\">\n      <div className=\"container mx-auto px-4 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8\">\n          {/* Brand Section */}\n          <div className=\"md:col-span-1\">\n            <div className=\"flex items-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-tools text-white text-sm\"></i>\n              </div>\n              <span className=\"text-xl font-bold text-white\">ToolHub</span>\n            </div>\n            <p className=\"text-slate-400 text-sm mb-4 leading-relaxed\">\n              Your go-to destination for free online calculators, converters, and useful tools. Fast, secure, and always free.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\" data-testid=\"social-twitter\">\n                <i className=\"fab fa-twitter\"></i>\n              </a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\" data-testid=\"social-facebook\">\n                <i className=\"fab fa-facebook\"></i>\n              </a>\n              <a href=\"#\" className=\"text-slate-400 hover:text-white transition-colors\" data-testid=\"social-linkedin\">\n                <i className=\"fab fa-linkedin\"></i>\n              </a>\n            </div>\n          </div>\n          \n          {/* Tools Section */}\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\">Popular Tools</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/tools/age-calculator\" data-testid=\"footer-age-calculator\" className=\"hover:text-white transition-colors\">\n                  Age Calculator\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/tools/bmi-calculator\" data-testid=\"footer-bmi-calculator\" className=\"hover:text-white transition-colors\">\n                  BMI Calculator\n                </Link>\n              </li>\n              <li>\n                <span className=\"text-slate-500\">Percentage Calculator</span>\n              </li>\n              <li>\n                <span className=\"text-slate-500\">Unit Converter</span>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Company Section */}\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\">Company</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/about\" data-testid=\"footer-about\" className=\"hover:text-white transition-colors\">\n                  About\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/blog\" data-testid=\"footer-blog\" className=\"hover:text-white transition-colors\">\n                  Blog\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/contact\" data-testid=\"footer-contact\" className=\"hover:text-white transition-colors\">\n                  Contact Us\n                </Link>\n              </li>\n              <li>\n                <a href=\"#\" className=\"hover:text-white transition-colors\" data-testid=\"footer-careers\">Careers</a>\n              </li>\n            </ul>\n          </div>\n          \n          {/* Legal Section */}\n          <div>\n            <h4 className=\"text-white font-semibold mb-4\">Legal</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li>\n                <Link href=\"/privacy-policy\" data-testid=\"footer-privacy\" className=\"hover:text-white transition-colors\">\n                  Privacy Policy\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/terms-conditions\" data-testid=\"footer-terms\" className=\"hover:text-white transition-colors\">\n                  Terms & Conditions\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/disclaimer\" data-testid=\"footer-disclaimer\" className=\"hover:text-white transition-colors\">\n                  Disclaimer\n                </Link>\n              </li>\n              <li>\n                <Link href=\"/cookie-policy\" data-testid=\"footer-cookies\" className=\"hover:text-white transition-colors\">\n                  Cookie Policy\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </div>\n        \n        {/* Bottom Section */}\n        <div className=\"border-t border-slate-700 mt-8 pt-8 flex flex-col md:flex-row justify-between items-center\">\n          <p className=\"text-slate-400 text-sm\" data-testid=\"copyright\">\n            © {currentYear} ToolHub. All rights reserved.\n          </p>\n          <div className=\"mt-4 md:mt-0 flex items-center space-x-6 text-sm\">\n            <span className=\"text-slate-500\">🔒 Secure & Private</span>\n            <span className=\"text-slate-500\">⚡ Lightning Fast</span>\n            <span className=\"text-slate-500\">📱 Mobile Ready</span>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5240},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\n\nexport default function Header() {\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const [location] = useLocation();\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const closeMobileMenu = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  const isActiveLink = (path: string) => {\n    return location === path;\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-slate-200\">\n      <nav className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex justify-between items-center\">\n          {/* Logo */}\n          <Link href=\"/\" onClick={closeMobileMenu} data-testid=\"logo-link\">\n            <div className=\"flex items-center space-x-2 cursor-pointer\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-tools text-white text-sm\"></i>\n              </div>\n              <span className=\"text-xl font-bold text-slate-800\">ToolHub</span>\n            </div>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex space-x-8\">\n            <Link href=\"/\" data-testid=\"nav-home\" className={`transition-colors duration-200 font-medium ${\n              isActiveLink('/') ? 'text-primary' : 'text-slate-600 hover:text-primary'\n            }`}>\n              Home\n            </Link>\n            <a href=\"#tools\" className=\"text-slate-600 hover:text-primary transition-colors duration-200 font-medium\" data-testid=\"nav-tools\">\n              Tools\n            </a>\n            <Link href=\"/about\" data-testid=\"nav-about\" className={`transition-colors duration-200 font-medium ${\n              isActiveLink('/about') ? 'text-primary' : 'text-slate-600 hover:text-primary'\n            }`}>\n              About\n            </Link>\n            <Link href=\"/blog\" data-testid=\"nav-blog\" className={`transition-colors duration-200 font-medium ${\n              isActiveLink('/blog') ? 'text-primary' : 'text-slate-600 hover:text-primary'\n            }`}>\n              Blog\n            </Link>\n            <Link href=\"/contact\" data-testid=\"nav-contact\" className={`transition-colors duration-200 font-medium ${\n              isActiveLink('/contact') ? 'text-primary' : 'text-slate-600 hover:text-primary'\n            }`}>\n              Contact\n            </Link>\n          </div>\n          \n          {/* Mobile Menu Button */}\n          <button \n            onClick={toggleMobileMenu}\n            className=\"md:hidden p-2 rounded-lg hover:bg-slate-100 transition-colors\"\n            data-testid=\"mobile-menu-button\"\n          >\n            <i className={`text-slate-600 ${isMobileMenuOpen ? 'fas fa-times' : 'fas fa-bars'}`}></i>\n          </button>\n        </div>\n        \n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden mt-4 pb-4 border-t border-slate-200 pt-4\" data-testid=\"mobile-menu\">\n            <div className=\"flex flex-col space-y-3\">\n              <Link href=\"/\" data-testid=\"mobile-nav-home\" className=\"text-slate-600 hover:text-primary transition-colors duration-200 font-medium py-2\" onClick={closeMobileMenu}>\n                Home\n              </Link>\n              <a href=\"#tools\" className=\"text-slate-600 hover:text-primary transition-colors duration-200 font-medium py-2\" onClick={closeMobileMenu} data-testid=\"mobile-nav-tools\">\n                Tools\n              </a>\n              <Link href=\"/about\" data-testid=\"mobile-nav-about\" className=\"text-slate-600 hover:text-primary transition-colors duration-200 font-medium py-2\" onClick={closeMobileMenu}>\n                About\n              </Link>\n              <Link href=\"/blog\" data-testid=\"mobile-nav-blog\" className=\"text-slate-600 hover:text-primary transition-colors duration-200 font-medium py-2\" onClick={closeMobileMenu}>\n                Blog\n              </Link>\n              <Link href=\"/contact\" data-testid=\"mobile-nav-contact\" className=\"text-slate-600 hover:text-primary transition-colors duration-200 font-medium py-2\" onClick={closeMobileMenu}>\n                Contact\n              </Link>\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n}\n","size_bytes":4332},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/tools/age-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface AgeResult {\n  years: number;\n  months: number;\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  totalDays: number;\n  totalHours: number;\n  totalMinutes: number;\n  totalSeconds: number;\n  nextBirthdayDays: number;\n}\n\nexport default function AgeCalculator() {\n  const [birthDate, setBirthDate] = useState(\"\");\n  const [result, setResult] = useState<AgeResult | null>(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    document.title = \"Age Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your exact age in years, months, days, hours, and minutes. Find out how many days until your next birthday with our free age calculator.');\n    }\n\n    // Update current time every second for live calculation\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n      if (birthDate && result) {\n        calculateAge();\n      }\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [birthDate, result]);\n\n  const calculateAge = () => {\n    if (!birthDate) return;\n\n    const birth = new Date(birthDate);\n    const now = currentTime;\n\n    if (birth > now) {\n      alert(\"Birth date cannot be in the future!\");\n      return;\n    }\n\n    // Calculate age\n    let years = now.getFullYear() - birth.getFullYear();\n    let months = now.getMonth() - birth.getMonth();\n    let days = now.getDate() - birth.getDate();\n\n    // Adjust for negative values\n    if (days < 0) {\n      months--;\n      const lastMonth = new Date(now.getFullYear(), now.getMonth(), 0);\n      days += lastMonth.getDate();\n    }\n\n    if (months < 0) {\n      years--;\n      months += 12;\n    }\n\n    // Calculate exact time differences\n    const timeDiff = now.getTime() - birth.getTime();\n    const totalDays = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n    const totalHours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const totalMinutes = Math.floor(timeDiff / (1000 * 60));\n    const totalSeconds = Math.floor(timeDiff / 1000);\n\n    // Calculate current age in hours, minutes, seconds\n    const hours = now.getHours() - birth.getHours();\n    const minutes = now.getMinutes() - birth.getMinutes();\n    const seconds = now.getSeconds() - birth.getSeconds();\n\n    // Calculate next birthday\n    let nextBirthday = new Date(now.getFullYear(), birth.getMonth(), birth.getDate());\n    if (nextBirthday < now) {\n      nextBirthday.setFullYear(now.getFullYear() + 1);\n    }\n    const nextBirthdayDays = Math.ceil((nextBirthday.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n\n    setResult({\n      years,\n      months,\n      days: Math.abs(days),\n      hours: Math.abs(hours),\n      minutes: Math.abs(minutes),\n      seconds: Math.abs(seconds),\n      totalDays,\n      totalHours,\n      totalMinutes,\n      totalSeconds,\n      nextBirthdayDays\n    });\n  };\n\n  const clearCalculation = () => {\n    setBirthDate(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-birthday-cake text-primary text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"age-calc-title\">\n              Age Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"age-calc-subtitle\">\n              Calculate your exact age in years, months, days, hours, and minutes\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-alt text-primary\"></i>\n                  <span>Enter Your Birth Date</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"birthdate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Birth Date\n                  </Label>\n                  <Input\n                    id=\"birthdate\"\n                    type=\"date\"\n                    value={birthDate}\n                    onChange={(e) => setBirthDate(e.target.value)}\n                    className=\"w-full text-lg\"\n                    data-testid=\"input-birthdate\"\n                    max={new Date().toISOString().split('T')[0]}\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateAge} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!birthDate}\n                    data-testid=\"button-calculate-age\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Age\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-age\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Quick Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">How it works</span>\n                  </div>\n                  <p className=\"text-blue-700\">\n                    Our calculator provides precise age calculations including leap years and updates in real-time. \n                    All calculations happen in your browser for complete privacy.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-accent\"></i>\n                  <span>Your Age Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"age-results\">\n                    {/* Main Age Display */}\n                    <div className=\"bg-gradient-to-r from-primary to-accent rounded-2xl p-6 text-white text-center\">\n                      <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"main-age\">\n                        {result.years} years, {result.months} months, {result.days} days\n                      </h2>\n                      <p className=\"text-blue-100\">\n                        {result.hours} hours, {result.minutes} minutes, {result.seconds} seconds\n                      </p>\n                    </div>\n\n                    {/* Detailed Breakdown */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-slate-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-primary\" data-testid=\"total-days\">\n                          {result.totalDays.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-slate-600\">Total Days</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-slate-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-accent\" data-testid=\"total-hours\">\n                          {result.totalHours.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-slate-600\">Total Hours</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-slate-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"total-minutes\">\n                          {result.totalMinutes.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-slate-600\">Total Minutes</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-slate-50 rounded-xl\">\n                        <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"total-seconds\">\n                          {result.totalSeconds.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-slate-600\">Total Seconds</div>\n                      </div>\n                    </div>\n\n                    {/* Next Birthday */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <i className=\"fas fa-gift text-yellow-600\"></i>\n                        <span className=\"font-medium text-yellow-800\">Next Birthday</span>\n                      </div>\n                      <p className=\"text-yellow-700\" data-testid=\"next-birthday\">\n                        Your next birthday is in <strong>{result.nextBirthdayDays} days</strong>!\n                      </p>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-calendar-plus text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Birth Date</h3>\n                    <p className=\"text-slate-500\">\n                      Select your birth date above to calculate your exact age\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Why Use Our Age Calculator?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Precise calculations including leap years</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Real-time updates every second</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Shows age in multiple formats</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Calculates days until next birthday</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Complete privacy - no data stored</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Uses</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-birthday-cake text-purple-500 mt-1\"></i>\n                    <span>Planning birthday celebrations</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-file-alt text-blue-500 mt-1\"></i>\n                    <span>Filling out forms and applications</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-heart text-red-500 mt-1\"></i>\n                    <span>Calculating relationship milestones</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-graduation-cap text-green-500 mt-1\"></i>\n                    <span>School and work eligibility</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calculator text-orange-500 mt-1\"></i>\n                    <span>General curiosity and fun facts</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14161},"client/src/pages/tools/bac-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface BACResult {\n  bac: number;\n  level: string;\n  effects: string[];\n  timeToSober: number;\n  legalStatus: string;\n  color: string;\n}\n\nexport default function BACCalculator() {\n  const [weight, setWeight] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [drinks, setDrinks] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<BACResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"BAC Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate Blood Alcohol Content (BAC) levels for educational purposes. Understand alcohol impairment effects and safety guidelines.');\n    }\n  }, []);\n\n  const calculateBAC = () => {\n    if (!weight || !gender || !drinks || !hours) return;\n\n    let weightValue = parseFloat(weight);\n    const drinksValue = parseFloat(drinks);\n    const hoursValue = parseFloat(hours);\n\n    // Convert weight to grams if needed\n    if (unit === \"imperial\") {\n      weightValue = weightValue * 453.592; // pounds to grams\n    } else {\n      weightValue = weightValue * 1000; // kg to grams\n    }\n\n    // Widmark Formula\n    // BAC = (Alcohol consumed in grams / (Body weight in grams × r)) - (0.015 × hours)\n    // r = distribution ratio (0.68 for men, 0.55 for women)\n    \n    const alcoholConsumedGrams = drinksValue * 14; // Standard drink = 14g alcohol\n    const distributionRatio = gender === \"male\" ? 0.68 : 0.55;\n    const metabolismRate = 0.015; // 0.015% per hour\n\n    let bac = (alcoholConsumedGrams / (weightValue * distributionRatio)) * 100;\n    bac = bac - (metabolismRate * hoursValue);\n    bac = Math.max(0, bac); // BAC cannot be negative\n\n    // Determine impairment level and effects\n    let level: string;\n    let effects: string[];\n    let legalStatus: string;\n    let color: string;\n    \n    if (bac < 0.02) {\n      level = \"Minimal Impairment\";\n      effects = [\"Little to no impairment\", \"Slight mood changes\"];\n      legalStatus = \"Legal to drive in most places\";\n      color = \"text-green-600 bg-green-50 border-green-200\";\n    } else if (bac < 0.05) {\n      level = \"Slight Impairment\";\n      effects = [\"Relaxation\", \"Slight decrease in visual tracking\", \"Reduced coordination\"];\n      legalStatus = \"Legal limit in some countries (0.05%)\";\n      color = \"text-yellow-600 bg-yellow-50 border-yellow-200\";\n    } else if (bac < 0.08) {\n      level = \"Mild Impairment\";\n      effects = [\"Reduced judgment\", \"Decreased reaction time\", \"Impaired coordination\"];\n      legalStatus = \"Approaching legal limit (0.08%)\";\n      color = \"text-orange-600 bg-orange-50 border-orange-200\";\n    } else if (bac < 0.10) {\n      level = \"Moderate Impairment\";\n      effects = [\"Slurred speech\", \"Poor coordination\", \"Impaired thinking\", \"Reduced reaction time\"];\n      legalStatus = \"Over legal limit - DO NOT DRIVE\";\n      color = \"text-red-600 bg-red-50 border-red-200\";\n    } else if (bac < 0.15) {\n      level = \"High Impairment\";\n      effects = [\"Major motor impairment\", \"Vomiting likely\", \"Loss of balance\", \"Serious impairment\"];\n      legalStatus = \"Severely intoxicated - Seek help\";\n      color = \"text-red-700 bg-red-100 border-red-300\";\n    } else {\n      level = \"Severe Intoxication\";\n      effects = [\"Potentially life-threatening\", \"Loss of consciousness possible\", \"Medical attention needed\"];\n      legalStatus = \"EMERGENCY - Call 911\";\n      color = \"text-red-800 bg-red-200 border-red-400\";\n    }\n\n    // Time to reach 0.00% BAC (assuming 0.015% metabolism per hour)\n    const timeToSober = Math.ceil(bac / 0.015);\n\n    setResult({\n      bac: Math.round(bac * 1000) / 1000,\n      level,\n      effects,\n      timeToSober,\n      legalStatus,\n      color\n    });\n  };\n\n  const clearCalculation = () => {\n    setWeight(\"\");\n    setGender(\"\");\n    setDrinks(\"\");\n    setHours(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-red-100 to-red-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-wine-glass text-red-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"bac-title\">\n              Blood Alcohol Content Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"bac-subtitle\">\n              Calculate BAC levels for educational purposes and understand alcohol impairment effects\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user text-primary\"></i>\n                  <span>Your Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                    </Label>\n                    <Input\n                      id=\"weight\"\n                      type=\"number\"\n                      value={weight}\n                      onChange={(e) => setWeight(e.target.value)}\n                      className=\"w-full\"\n                      placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-weight\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"gender\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Gender\n                    </Label>\n                    <Select value={gender} onValueChange={setGender} data-testid=\"select-gender\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"drinks\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Standard Drinks\n                    </Label>\n                    <Input\n                      id=\"drinks\"\n                      type=\"number\"\n                      value={drinks}\n                      onChange={(e) => setDrinks(e.target.value)}\n                      className=\"w-full\"\n                      placeholder=\"3\"\n                      min=\"0\"\n                      step=\"0.5\"\n                      data-testid=\"input-drinks\"\n                    />\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      1 drink = 12oz beer, 5oz wine, 1.5oz spirits\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"hours\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Hours Since First Drink\n                    </Label>\n                    <Input\n                      id=\"hours\"\n                      type=\"number\"\n                      value={hours}\n                      onChange={(e) => setHours(e.target.value)}\n                      className=\"w-full\"\n                      placeholder=\"2\"\n                      min=\"0\"\n                      step=\"0.25\"\n                      data-testid=\"input-hours\"\n                    />\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateBAC} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!weight || !gender || !drinks || !hours}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate BAC\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Important Warning */}\n                <div className=\"bg-red-50 border border-red-200 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-exclamation-triangle text-red-600 mt-1\"></i>\n                    <div>\n                      <p className=\"text-red-800 font-medium mb-1\">Important Disclaimer</p>\n                      <p className=\"text-red-700\">\n                        This calculator is for educational purposes only. Do not use for determining \n                        fitness to drive. Many factors affect BAC. When in doubt, don't drive.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-accent\"></i>\n                  <span>BAC Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"bac-results\">\n                    {/* BAC Level */}\n                    <div className={`text-center rounded-2xl p-6 border ${result.color}`}>\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"bac-level\">\n                        {result.bac}%\n                      </h2>\n                      <p className=\"mb-2\">{result.level}</p>\n                      <p className=\"text-sm font-medium\">{result.legalStatus}</p>\n                    </div>\n\n                    {/* Effects */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-semibold text-slate-800\">Expected Effects:</h4>\n                      <ul className=\"space-y-2\">\n                        {result.effects.map((effect, index) => (\n                          <li key={index} className=\"flex items-start space-x-2\">\n                            <i className=\"fas fa-dot-circle text-slate-400 mt-1 text-xs\"></i>\n                            <span className=\"text-slate-700\">{effect}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n\n                    {/* Time to Sober */}\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4\">\n                      <h4 className=\"font-semibold text-blue-800 mb-2\">Time to Reach 0.00% BAC</h4>\n                      <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"time-to-sober\">\n                        {result.timeToSober} hour{result.timeToSober !== 1 ? 's' : ''}\n                      </div>\n                      <p className=\"text-sm text-blue-700 mt-1\">\n                        Based on average metabolism rate of 0.015% per hour\n                      </p>\n                    </div>\n\n                    {/* BAC Scale */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold text-slate-800\">BAC Impairment Scale:</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className={`p-2 rounded border ${result.bac < 0.02 ? 'bg-green-100 border-green-300 font-medium' : 'bg-slate-50'}`}>\n                          <span className=\"font-medium\">0.00-0.02%:</span> Minimal impairment\n                        </div>\n                        <div className={`p-2 rounded border ${result.bac >= 0.02 && result.bac < 0.05 ? 'bg-yellow-100 border-yellow-300 font-medium' : 'bg-slate-50'}`}>\n                          <span className=\"font-medium\">0.02-0.05%:</span> Slight impairment\n                        </div>\n                        <div className={`p-2 rounded border ${result.bac >= 0.05 && result.bac < 0.08 ? 'bg-orange-100 border-orange-300 font-medium' : 'bg-slate-50'}`}>\n                          <span className=\"font-medium\">0.05-0.08%:</span> Mild impairment\n                        </div>\n                        <div className={`p-2 rounded border ${result.bac >= 0.08 && result.bac < 0.10 ? 'bg-red-100 border-red-300 font-medium' : 'bg-slate-50'}`}>\n                          <span className=\"font-medium\">0.08-0.10%:</span> Moderate impairment\n                        </div>\n                        <div className={`p-2 rounded border ${result.bac >= 0.10 ? 'bg-red-200 border-red-400 font-medium' : 'bg-slate-50'}`}>\n                          <span className=\"font-medium\">0.10%+:</span> High to severe impairment\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Safety Reminders */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <h4 className=\"font-semibold text-yellow-800 mb-3\">Safety Reminders</h4>\n                      <ul className=\"space-y-2 text-yellow-700\">\n                        <li className=\"flex items-start space-x-2\">\n                          <i className=\"fas fa-car text-yellow-600 mt-1\"></i>\n                          <span>Never drive under the influence of alcohol</span>\n                        </li>\n                        <li className=\"flex items-start space-x-2\">\n                          <i className=\"fas fa-clock text-yellow-600 mt-1\"></i>\n                          <span>Time is the only way to sober up</span>\n                        </li>\n                        <li className=\"flex items-start space-x-2\">\n                          <i className=\"fas fa-water text-yellow-600 mt-1\"></i>\n                          <span>Stay hydrated and eat before drinking</span>\n                        </li>\n                        <li className=\"flex items-start space-x-2\">\n                          <i className=\"fas fa-phone text-yellow-600 mt-1\"></i>\n                          <span>Use rideshare, taxi, or designated driver</span>\n                        </li>\n                      </ul>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-wine-glass text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your details to calculate Blood Alcohol Content\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Standard Drink Equivalents</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">One Standard Drink Contains 14g of Alcohol:</h5>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between\">\n                        <span>Beer (5% ABV):</span>\n                        <span className=\"font-medium\">12 fl oz</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Wine (12% ABV):</span>\n                        <span className=\"font-medium\">5 fl oz</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Spirits (40% ABV):</span>\n                        <span className=\"font-medium\">1.5 fl oz</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Malt Liquor (7% ABV):</span>\n                        <span className=\"font-medium\">8-9 fl oz</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Factors Affecting BAC</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-weight text-blue-500 mt-1\"></i>\n                    <span>Body weight and composition</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-venus-mars text-purple-500 mt-1\"></i>\n                    <span>Gender (women typically have higher BAC)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-utensils text-green-500 mt-1\"></i>\n                    <span>Food consumption before/during drinking</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-pills text-orange-500 mt-1\"></i>\n                    <span>Medications and health conditions</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-tachometer-alt text-red-500 mt-1\"></i>\n                    <span>Rate of alcohol consumption</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Emergency Info */}\n          <div className=\"mt-8\">\n            <Card className=\"bg-red-50 border-red-200\">\n              <CardHeader>\n                <CardTitle className=\"text-lg text-red-800\">\n                  <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n                  Alcohol Poisoning Emergency Signs\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid md:grid-cols-2 gap-6 text-sm\">\n                  <div>\n                    <h5 className=\"font-medium text-red-800 mb-2\">Call 911 if someone shows:</h5>\n                    <ul className=\"space-y-1 text-red-700\">\n                      <li>• Unconsciousness or cannot be roused</li>\n                      <li>• Vomiting while unconscious</li>\n                      <li>• Slow or irregular breathing</li>\n                      <li>• Blue lips or fingernails</li>\n                      <li>• Low body temperature</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-red-800 mb-2\">While waiting for help:</h5>\n                    <ul className=\"space-y-1 text-red-700\">\n                      <li>• Keep person awake and sitting up</li>\n                      <li>• Give them water if conscious</li>\n                      <li>• Keep them warm</li>\n                      <li>• Do not leave them alone</li>\n                      <li>• Be prepared to perform CPR</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Stay Safe & Have Fun!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Enjoy a laugh while staying responsible - check out our joke generator!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":22902},"client/src/pages/tools/bmi-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface BMIResult {\n  bmi: number;\n  category: string;\n  categoryColor: string;\n  healthyMin: number;\n  healthyMax: number;\n  weightStatus: string;\n}\n\nexport default function BmiCalculator() {\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<BMIResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"BMI Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your Body Mass Index (BMI) and get health insights. Free BMI calculator with metric and imperial units. Understand your weight status.');\n    }\n  }, []);\n\n  const getBMICategory = (bmi: number): { category: string; color: string; status: string } => {\n    if (bmi < 18.5) {\n      return { category: \"Underweight\", color: \"text-blue-600 bg-blue-50 border-blue-200\", status: \"Below normal weight\" };\n    } else if (bmi >= 18.5 && bmi < 25) {\n      return { category: \"Normal weight\", color: \"text-green-600 bg-green-50 border-green-200\", status: \"Healthy weight range\" };\n    } else if (bmi >= 25 && bmi < 30) {\n      return { category: \"Overweight\", color: \"text-orange-600 bg-orange-50 border-orange-200\", status: \"Above normal weight\" };\n    } else {\n      return { category: \"Obese\", color: \"text-red-600 bg-red-50 border-red-200\", status: \"Significantly above normal weight\" };\n    }\n  };\n\n  const calculateBMI = () => {\n    if (!weight || !height) return;\n\n    let weightKg = parseFloat(weight);\n    let heightM = parseFloat(height);\n\n    // Convert units if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592; // pounds to kg\n      heightM = heightM * 0.0254; // inches to meters\n    } else {\n      heightM = heightM / 100; // cm to meters\n    }\n\n    const bmi = weightKg / (heightM * heightM);\n    const categoryInfo = getBMICategory(bmi);\n    \n    // Calculate healthy weight range\n    const healthyMinWeight = unit === \"imperial\" \n      ? Math.round((18.5 * heightM * heightM) / 0.453592) \n      : Math.round(18.5 * heightM * heightM);\n    const healthyMaxWeight = unit === \"imperial\" \n      ? Math.round((24.9 * heightM * heightM) / 0.453592) \n      : Math.round(24.9 * heightM * heightM);\n\n    setResult({\n      bmi: Math.round(bmi * 10) / 10,\n      category: categoryInfo.category,\n      categoryColor: categoryInfo.color,\n      healthyMin: healthyMinWeight,\n      healthyMax: healthyMaxWeight,\n      weightStatus: categoryInfo.status\n    });\n  };\n\n  const clearCalculation = () => {\n    setWeight(\"\");\n    setHeight(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-weight text-accent text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"bmi-calc-title\">\n              BMI Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"bmi-calc-subtitle\">\n              Calculate your Body Mass Index and get health insights based on your measurements\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-ruler-combined text-primary\"></i>\n                  <span>Enter Your Measurements</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg, cm)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs, inches)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                  </Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-weight\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"height\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Height {unit === \"metric\" ? \"(cm)\" : \"(inches)\"}\n                  </Label>\n                  <Input\n                    id=\"height\"\n                    type=\"number\"\n                    value={height}\n                    onChange={(e) => setHeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"170\" : \"67\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-height\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateBMI} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!weight || !height}\n                    data-testid=\"button-calculate-bmi\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate BMI\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-bmi\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* BMI Scale Info */}\n                <div className=\"bg-slate-50 rounded-xl p-4 text-sm\">\n                  <h4 className=\"font-medium text-slate-800 mb-3\">BMI Categories:</h4>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-blue-600\">Underweight</span>\n                      <span className=\"text-slate-600\">&lt; 18.5</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-green-600\">Normal weight</span>\n                      <span className=\"text-slate-600\">18.5 - 24.9</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-orange-600\">Overweight</span>\n                      <span className=\"text-slate-600\">25 - 29.9</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-red-600\">Obese</span>\n                      <span className=\"text-slate-600\">&ge; 30</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-pie text-accent\"></i>\n                  <span>Your BMI Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"bmi-results\">\n                    {/* Main BMI Display */}\n                    <div className=\"text-center\">\n                      <div className=\"text-6xl font-bold text-primary mb-2\" data-testid=\"bmi-value\">\n                        {result.bmi}\n                      </div>\n                      <div className={`inline-block px-4 py-2 rounded-xl border font-semibold ${result.categoryColor}`} data-testid=\"bmi-category\">\n                        {result.category}\n                      </div>\n                    </div>\n\n                    {/* Status Description */}\n                    <div className=\"text-center p-4 bg-slate-50 rounded-xl\">\n                      <p className=\"text-slate-700\" data-testid=\"bmi-status\">\n                        <strong>Status:</strong> {result.weightStatus}\n                      </p>\n                    </div>\n\n                    {/* Healthy Weight Range */}\n                    <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                      <div className=\"flex items-center space-x-2 mb-2\">\n                        <i className=\"fas fa-heart text-green-600\"></i>\n                        <span className=\"font-medium text-green-800\">Healthy Weight Range</span>\n                      </div>\n                      <p className=\"text-green-700\" data-testid=\"healthy-range\">\n                        For your height, a healthy weight range is{\" \"}\n                        <strong>\n                          {result.healthyMin} - {result.healthyMax} {unit === \"metric\" ? \"kg\" : \"lbs\"}\n                        </strong>\n                      </p>\n                    </div>\n\n                    {/* BMI Scale Visualization */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-medium text-slate-800\">BMI Scale</h4>\n                      <div className=\"relative\">\n                        <div className=\"h-6 rounded-full overflow-hidden flex\">\n                          <div className=\"bg-blue-400 flex-1\"></div>\n                          <div className=\"bg-green-400 flex-1\"></div>\n                          <div className=\"bg-orange-400 flex-1\"></div>\n                          <div className=\"bg-red-400 flex-1\"></div>\n                        </div>\n                        <div className=\"flex justify-between text-xs text-slate-600 mt-1\">\n                          <span>18.5</span>\n                          <span>25</span>\n                          <span>30</span>\n                          <span>35+</span>\n                        </div>\n                        <div \n                          className=\"absolute top-0 w-2 h-6 bg-slate-800 rounded-sm\"\n                          style={{\n                            left: `${Math.min(Math.max((result.bmi - 15) / 25 * 100, 0), 95)}%`\n                          }}\n                          data-testid=\"bmi-indicator\"\n                        ></div>\n                      </div>\n                    </div>\n\n                    {/* Health Disclaimer */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Important Note</p>\n                          <p className=\"text-yellow-700\">\n                            BMI is a general indicator and doesn't account for muscle mass, bone density, or overall body composition. \n                            Consult healthcare professionals for comprehensive health assessment.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-weight text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Measurements</h3>\n                    <p className=\"text-slate-500\">\n                      Enter your weight and height above to calculate your BMI\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Understanding BMI</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <p>\n                    Body Mass Index (BMI) is a measure that uses height and weight to determine if weight is healthy. \n                    It's calculated by dividing weight by height squared.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <h5 className=\"font-medium text-slate-800\">BMI Limitations:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Doesn't distinguish between muscle and fat</li>\n                      <li>• May not be accurate for athletes or elderly</li>\n                      <li>• Doesn't consider body fat distribution</li>\n                      <li>• Age and gender differences not accounted</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Tips for Healthy Weight</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-utensils text-green-500 mt-1\"></i>\n                    <span>Maintain a balanced, nutritious diet</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-running text-blue-500 mt-1\"></i>\n                    <span>Get regular physical activity</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-bed text-purple-500 mt-1\"></i>\n                    <span>Ensure adequate sleep</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-tint text-cyan-500 mt-1\"></i>\n                    <span>Stay properly hydrated</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-user-md text-red-500 mt-1\"></i>\n                    <span>Consult healthcare professionals</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":16392},"client/src/pages/tools/bmr-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface BMRResult {\n  bmr: number;\n  maintenanceCalories: number;\n  lightActivity: number;\n  moderateActivity: number;\n  heavyActivity: number;\n  extremeActivity: number;\n}\n\nexport default function BmrCalculator() {\n  const [age, setAge] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<BMRResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"BMR Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your Basal Metabolic Rate (BMR) and daily calorie needs. Free BMR calculator with activity level multipliers.');\n    }\n  }, []);\n\n  const calculateBMR = () => {\n    if (!age || !weight || !height || !gender) return;\n\n    let weightKg = parseFloat(weight);\n    let heightCm = parseFloat(height);\n\n    // Convert units if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592; // pounds to kg\n      heightCm = heightCm * 2.54; // inches to cm\n    }\n\n    let bmr: number;\n\n    // Mifflin-St Jeor Equation\n    if (gender === \"male\") {\n      bmr = 10 * weightKg + 6.25 * heightCm - 5 * parseInt(age) + 5;\n    } else {\n      bmr = 10 * weightKg + 6.25 * heightCm - 5 * parseInt(age) - 161;\n    }\n\n    // Activity level multipliers\n    const sedentary = bmr * 1.2; // Little or no exercise\n    const lightActivity = bmr * 1.375; // Light exercise 1-3 days/week\n    const moderateActivity = bmr * 1.55; // Moderate exercise 3-5 days/week\n    const heavyActivity = bmr * 1.725; // Heavy exercise 6-7 days/week\n    const extremeActivity = bmr * 1.9; // Very heavy exercise, physical job\n\n    setResult({\n      bmr: Math.round(bmr),\n      maintenanceCalories: Math.round(sedentary),\n      lightActivity: Math.round(lightActivity),\n      moderateActivity: Math.round(moderateActivity),\n      heavyActivity: Math.round(heavyActivity),\n      extremeActivity: Math.round(extremeActivity)\n    });\n  };\n\n  const clearCalculation = () => {\n    setAge(\"\");\n    setWeight(\"\");\n    setHeight(\"\");\n    setGender(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-orange-100 to-orange-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-fire text-orange-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"bmr-calc-title\">\n              BMR Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"bmr-calc-subtitle\">\n              Calculate your Basal Metabolic Rate and daily calorie needs\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-cog text-primary\"></i>\n                  <span>Enter Your Details</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg, cm)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs, inches)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"gender\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Gender\n                  </Label>\n                  <Select value={gender} onValueChange={setGender} data-testid=\"select-gender\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"age\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Age (years)\n                  </Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    value={age}\n                    onChange={(e) => setAge(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"25\"\n                    min=\"1\"\n                    max=\"120\"\n                    data-testid=\"input-age\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                  </Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-weight\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"height\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Height {unit === \"metric\" ? \"(cm)\" : \"(inches)\"}\n                  </Label>\n                  <Input\n                    id=\"height\"\n                    type=\"number\"\n                    value={height}\n                    onChange={(e) => setHeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"170\" : \"67\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-height\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateBMR} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!age || !weight || !height || !gender}\n                    data-testid=\"button-calculate-bmr\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate BMR\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-bmr\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Formula Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Formula Used</span>\n                  </div>\n                  <p className=\"text-blue-700\">\n                    Mifflin-St Jeor Equation: Most accurate for modern lifestyles.<br/>\n                    <strong>Men:</strong> BMR = 10×weight + 6.25×height - 5×age + 5<br/>\n                    <strong>Women:</strong> BMR = 10×weight + 6.25×height - 5×age - 161\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-accent\"></i>\n                  <span>Your BMR Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"bmr-results\">\n                    {/* Main BMR Display */}\n                    <div className=\"text-center bg-gradient-to-r from-orange-500 to-red-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"bmr-value\">\n                        {result.bmr} calories/day\n                      </h2>\n                      <p className=\"text-orange-100\">Your Basal Metabolic Rate</p>\n                    </div>\n\n                    {/* Activity Level Breakdown */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"font-semibold text-slate-800\">Daily Calorie Needs by Activity Level:</h3>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">Sedentary</div>\n                            <div className=\"text-sm text-slate-600\">Little or no exercise</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-primary\" data-testid=\"sedentary-calories\">\n                            {result.maintenanceCalories} cal\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">Light Activity</div>\n                            <div className=\"text-sm text-slate-600\">Light exercise 1-3 days/week</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-green-600\" data-testid=\"light-calories\">\n                            {result.lightActivity} cal\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">Moderate Activity</div>\n                            <div className=\"text-sm text-slate-600\">Moderate exercise 3-5 days/week</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-orange-600\" data-testid=\"moderate-calories\">\n                            {result.moderateActivity} cal\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">Heavy Activity</div>\n                            <div className=\"text-sm text-slate-600\">Heavy exercise 6-7 days/week</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-red-600\" data-testid=\"heavy-calories\">\n                            {result.heavyActivity} cal\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">Extreme Activity</div>\n                            <div className=\"text-sm text-slate-600\">Very heavy exercise, physical job</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-purple-600\" data-testid=\"extreme-calories\">\n                            {result.extremeActivity} cal\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Important Note */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Important Note</p>\n                          <p className=\"text-yellow-700\">\n                            BMR represents calories burned at rest. Add activity calories for total daily needs. \n                            Consult healthcare professionals for personalized nutrition advice.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-fire text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Details</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your information above to calculate your BMR\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">What is BMR?</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <p>\n                    Basal Metabolic Rate (BMR) is the number of calories your body needs to perform basic physiological functions while at rest.\n                  </p>\n                  <div className=\"space-y-2\">\n                    <h5 className=\"font-medium text-slate-800\">BMR includes energy for:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Breathing and circulation</li>\n                      <li>• Cell production and repair</li>\n                      <li>• Brain and nerve functions</li>\n                      <li>• Protein synthesis</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Factors Affecting BMR</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-user text-blue-500 mt-1\"></i>\n                    <span>Age, gender, and genetics</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-dumbbell text-green-500 mt-1\"></i>\n                    <span>Muscle mass and body composition</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-thermometer-half text-red-500 mt-1\"></i>\n                    <span>Climate and body temperature</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-pills text-purple-500 mt-1\"></i>\n                    <span>Hormones and medications</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-utensils text-orange-500 mt-1\"></i>\n                    <span>Diet and eating patterns</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17465},"client/src/pages/tools/body-surface-area-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface BSAResult {\n  mosteller: number;\n  dubois: number;\n  haycock: number;\n  gehan: number;\n  boyd: number;\n  average: number;\n}\n\nexport default function BodySurfaceAreaCalculator() {\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<BSAResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Body Surface Area Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate body surface area using multiple medical formulas (Mosteller, DuBois, Haycock). Free BSA calculator for medical dosing.');\n    }\n  }, []);\n\n  const calculateBSA = () => {\n    if (!weight || !height) return;\n\n    let weightKg = parseFloat(weight);\n    let heightCm = parseFloat(height);\n\n    // Convert units if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592; // pounds to kg\n      heightCm = heightCm * 2.54; // inches to cm\n    }\n\n    // Mosteller Formula (most widely used)\n    const mosteller = Math.sqrt((weightKg * heightCm) / 3600);\n\n    // DuBois Formula (original, 1916)\n    const dubois = 0.007184 * Math.pow(weightKg, 0.425) * Math.pow(heightCm, 0.725);\n\n    // Haycock Formula (1978)\n    const haycock = 0.024265 * Math.pow(weightKg, 0.5378) * Math.pow(heightCm, 0.3964);\n\n    // Gehan and George Formula (1970)\n    const gehan = 0.0235 * Math.pow(weightKg, 0.51456) * Math.pow(heightCm, 0.42246);\n\n    // Boyd Formula (1935)\n    const boyd = 0.0333 * Math.pow(weightKg, (0.6157 - 0.0188 * Math.log10(weightKg))) * Math.pow(heightCm, 0.3);\n\n    // Average of all formulas\n    const average = (mosteller + dubois + haycock + gehan + boyd) / 5;\n\n    setResult({\n      mosteller: Math.round(mosteller * 1000) / 1000,\n      dubois: Math.round(dubois * 1000) / 1000,\n      haycock: Math.round(haycock * 1000) / 1000,\n      gehan: Math.round(gehan * 1000) / 1000,\n      boyd: Math.round(boyd * 1000) / 1000,\n      average: Math.round(average * 1000) / 1000\n    });\n  };\n\n  const clearCalculation = () => {\n    setWeight(\"\");\n    setHeight(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-user-cog text-purple-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"bsa-title\">\n              Body Surface Area Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"bsa-subtitle\">\n              Calculate body surface area using multiple medical formulas for accurate medication dosing\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-md text-primary\"></i>\n                  <span>Patient Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg, cm)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs, inches)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                  </Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-weight\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"height\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Height {unit === \"metric\" ? \"(cm)\" : \"(inches)\"}\n                  </Label>\n                  <Input\n                    id=\"height\"\n                    type=\"number\"\n                    value={height}\n                    onChange={(e) => setHeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"170\" : \"67\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-height\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateBSA} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!weight || !height}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate BSA\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* BSA Info */}\n                <div className=\"bg-purple-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-purple-600\"></i>\n                    <span className=\"font-medium text-purple-800\">About Body Surface Area</span>\n                  </div>\n                  <p className=\"text-purple-700\">\n                    BSA is used in medical settings for calculating medication dosages, \n                    determining cardiac index, and various medical procedures. \n                    Normal adult BSA ranges from 1.5 to 2.0 m².\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-area text-accent\"></i>\n                  <span>BSA Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"bsa-results\">\n                    {/* Average Result */}\n                    <div className=\"text-center bg-gradient-to-r from-purple-500 to-indigo-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"average-bsa\">\n                        {result.average} m²\n                      </h2>\n                      <p className=\"text-purple-100\">Average Body Surface Area</p>\n                    </div>\n\n                    {/* Formula Results */}\n                    <Tabs defaultValue=\"formulas\" className=\"space-y-4\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"formulas\">All Formulas</TabsTrigger>\n                        <TabsTrigger value=\"clinical\">Clinical Info</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"formulas\" className=\"space-y-4\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Mosteller Formula</div>\n                              <div className=\"text-sm text-slate-600\">Most widely used (1987)</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-primary\" data-testid=\"mosteller-bsa\">\n                              {result.mosteller} m²\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">DuBois Formula</div>\n                              <div className=\"text-sm text-slate-600\">Original BSA formula (1916)</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-green-600\" data-testid=\"dubois-bsa\">\n                              {result.dubois} m²\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Haycock Formula</div>\n                              <div className=\"text-sm text-slate-600\">Pediatric applications (1978)</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-orange-600\" data-testid=\"haycock-bsa\">\n                              {result.haycock} m²\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Gehan Formula</div>\n                              <div className=\"text-sm text-slate-600\">Oncology applications (1970)</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-purple-600\" data-testid=\"gehan-bsa\">\n                              {result.gehan} m²\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Boyd Formula</div>\n                              <div className=\"text-sm text-slate-600\">Historical formula (1935)</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-indigo-600\" data-testid=\"boyd-bsa\">\n                              {result.boyd} m²\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"clinical\" className=\"space-y-4\">\n                        <div className=\"space-y-4\">\n                          {/* BSA Categories */}\n                          <div className=\"space-y-3\">\n                            <h4 className=\"font-semibold text-slate-800\">BSA Categories:</h4>\n                            <div className=\"space-y-2 text-sm\">\n                              <div className={`p-2 rounded ${result.average < 1.5 ? 'bg-blue-100 border border-blue-300' : 'bg-slate-100'}`}>\n                                <strong>Small Adult:</strong> &lt; 1.5 m² (requires dose adjustment)\n                              </div>\n                              <div className={`p-2 rounded ${result.average >= 1.5 && result.average <= 2.0 ? 'bg-green-100 border border-green-300' : 'bg-slate-100'}`}>\n                                <strong>Average Adult:</strong> 1.5 - 2.0 m² (normal range)\n                              </div>\n                              <div className={`p-2 rounded ${result.average > 2.0 ? 'bg-orange-100 border border-orange-300' : 'bg-slate-100'}`}>\n                                <strong>Large Adult:</strong> &gt; 2.0 m² (may need dose adjustment)\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Clinical Applications */}\n                          <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-blue-800 mb-3\">Clinical Applications</h4>\n                            <ul className=\"space-y-2 text-sm text-blue-700\">\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-pills text-blue-600 mt-1\"></i>\n                                <span>Chemotherapy dosing calculations</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-heart text-blue-600 mt-1\"></i>\n                                <span>Cardiac index determination</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-kidneys text-blue-600 mt-1\"></i>\n                                <span>Renal function assessment</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-burn text-blue-600 mt-1\"></i>\n                                <span>Burn injury treatment planning</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-syringe text-blue-600 mt-1\"></i>\n                                <span>Pediatric medication dosing</span>\n                              </li>\n                            </ul>\n                          </div>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Important Medical Note */}\n                    <div className=\"bg-red-50 border border-red-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-red-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-red-800 font-medium mb-1\">Medical Use Only</p>\n                          <p className=\"text-red-700\">\n                            BSA calculations are for healthcare professionals only. Never use this for \n                            self-medication or dosing without proper medical supervision. Always \n                            consult qualified healthcare providers for medical decisions.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-user-cog text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Patient Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in weight and height to calculate body surface area\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Formula Accuracy & Usage</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Most Accurate Formulas:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li><strong>Mosteller:</strong> Simplest and most widely used</li>\n                      <li><strong>DuBois:</strong> Classic, well-validated formula</li>\n                      <li><strong>Haycock:</strong> Best for children and small adults</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Clinical Standards:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Mosteller formula is FDA recommended</li>\n                      <li>• DuBois used in cardiac index calculations</li>\n                      <li>• Haycock preferred for pediatric oncology</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">BSA Reference Values</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Average BSA by Age:</h5>\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between\">\n                        <span>Newborn:</span>\n                        <span className=\"font-medium\">0.25 m²</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Child (2 years):</span>\n                        <span className=\"font-medium\">0.5 m²</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Child (9 years):</span>\n                        <span className=\"font-medium\">1.07 m²</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Adult (average):</span>\n                        <span className=\"font-medium\">1.7 m²</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Adult (large):</span>\n                        <span className=\"font-medium\">2.0+ m²</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Medical Calculations Complete!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Time for some lighter content - enjoy a random joke!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":21108},"client/src/pages/tools/date-difference-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface DateDifferenceResult {\n  years: number;\n  months: number;\n  days: number;\n  totalDays: number;\n  totalWeeks: number;\n  totalHours: number;\n  totalMinutes: number;\n  totalSeconds: number;\n  workingDays: number;\n}\n\nexport default function DateDifferenceCalculator() {\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [result, setResult] = useState<DateDifferenceResult | null>(null);\n\n  // Add/Subtract days functionality\n  const [baseDate, setBaseDate] = useState(\"\");\n  const [daysToAdd, setDaysToAdd] = useState(\"\");\n  const [operation, setOperation] = useState(\"add\");\n  const [calculatedDate, setCalculatedDate] = useState<string | null>(null);\n\n  useEffect(() => {\n    document.title = \"Date Difference Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate difference between dates, add or subtract days, and find working days. Free date calculator with detailed breakdown.');\n    }\n  }, []);\n\n  const calculateDateDifference = () => {\n    if (!startDate || !endDate) return;\n\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n\n    if (start > end) {\n      alert(\"End date must be after start date!\");\n      return;\n    }\n\n    // Calculate total difference in milliseconds\n    const timeDiff = end.getTime() - start.getTime();\n    \n    // Calculate various time units\n    const totalDays = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n    const totalWeeks = Math.floor(totalDays / 7);\n    const totalHours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const totalMinutes = Math.floor(timeDiff / (1000 * 60));\n    const totalSeconds = Math.floor(timeDiff / 1000);\n\n    // Calculate years, months, and days\n    let years = end.getFullYear() - start.getFullYear();\n    let months = end.getMonth() - start.getMonth();\n    let days = end.getDate() - start.getDate();\n\n    // Adjust for negative values\n    if (days < 0) {\n      months--;\n      const lastMonth = new Date(end.getFullYear(), end.getMonth(), 0);\n      days += lastMonth.getDate();\n    }\n\n    if (months < 0) {\n      years--;\n      months += 12;\n    }\n\n    // Calculate working days (excluding weekends)\n    let workingDays = 0;\n    const currentDate = new Date(start);\n    \n    while (currentDate <= end) {\n      const dayOfWeek = currentDate.getDay();\n      if (dayOfWeek !== 0 && dayOfWeek !== 6) { // Not Sunday (0) or Saturday (6)\n        workingDays++;\n      }\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    setResult({\n      years,\n      months,\n      days,\n      totalDays,\n      totalWeeks,\n      totalHours,\n      totalMinutes,\n      totalSeconds,\n      workingDays\n    });\n  };\n\n  const calculateNewDate = () => {\n    if (!baseDate || !daysToAdd) return;\n\n    const base = new Date(baseDate);\n    const days = parseInt(daysToAdd);\n    \n    if (operation === \"add\") {\n      base.setDate(base.getDate() + days);\n    } else {\n      base.setDate(base.getDate() - days);\n    }\n\n    setCalculatedDate(base.toISOString().split('T')[0]);\n  };\n\n  const clearAll = () => {\n    setStartDate(\"\");\n    setEndDate(\"\");\n    setBaseDate(\"\");\n    setDaysToAdd(\"\");\n    setResult(null);\n    setCalculatedDate(null);\n  };\n\n  // Set today's date\n  const setToday = (field: 'start' | 'end' | 'base') => {\n    const today = new Date().toISOString().split('T')[0];\n    if (field === 'start') setStartDate(today);\n    else if (field === 'end') setEndDate(today);\n    else setBaseDate(today);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-indigo-100 to-indigo-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-calendar-alt text-indigo-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"date-calc-title\">\n              Date Difference Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"date-calc-subtitle\">\n              Calculate the difference between dates and add or subtract days\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"difference\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"difference\">Date Difference</TabsTrigger>\n              <TabsTrigger value=\"calculate\">Add/Subtract Days</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"difference\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-calculator text-primary\"></i>\n                    <span>Calculate Difference Between Two Dates</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"startDate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Start Date\n                      </Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"startDate\"\n                          type=\"date\"\n                          value={startDate}\n                          onChange={(e) => setStartDate(e.target.value)}\n                          className=\"flex-1 text-lg\"\n                          data-testid=\"input-start-date\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setToday('start')}\n                          className=\"px-3\"\n                          data-testid=\"button-today-start\"\n                        >\n                          Today\n                        </Button>\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"endDate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        End Date\n                      </Label>\n                      <div className=\"flex gap-2\">\n                        <Input\n                          id=\"endDate\"\n                          type=\"date\"\n                          value={endDate}\n                          onChange={(e) => setEndDate(e.target.value)}\n                          className=\"flex-1 text-lg\"\n                          data-testid=\"input-end-date\"\n                        />\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setToday('end')}\n                          className=\"px-3\"\n                          data-testid=\"button-today-end\"\n                        >\n                          Today\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculateDateDifference} \n                    className=\"w-full bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!startDate || !endDate}\n                    data-testid=\"button-calculate-difference\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Difference\n                  </Button>\n\n                  {result && (\n                    <div className=\"space-y-6\" data-testid=\"difference-results\">\n                      {/* Main Result */}\n                      <div className=\"bg-gradient-to-r from-indigo-500 to-purple-500 rounded-2xl p-6 text-white text-center\">\n                        <h3 className=\"text-2xl font-bold mb-2\" data-testid=\"main-difference\">\n                          {result.years} years, {result.months} months, {result.days} days\n                        </h3>\n                        <p className=\"text-indigo-100\">\n                          From {startDate} to {endDate}\n                        </p>\n                      </div>\n\n                      {/* Detailed Breakdown */}\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                          <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"total-days\">\n                            {result.totalDays.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-blue-700\">Total Days</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-green-50 rounded-xl border border-green-200\">\n                          <div className=\"text-2xl font-bold text-green-600\" data-testid=\"total-weeks\">\n                            {result.totalWeeks.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-green-700\">Total Weeks</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-orange-50 rounded-xl border border-orange-200\">\n                          <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"working-days\">\n                            {result.workingDays.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-orange-700\">Working Days</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-purple-50 rounded-xl border border-purple-200\">\n                          <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"total-hours\">\n                            {result.totalHours.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-purple-700\">Total Hours</div>\n                        </div>\n                      </div>\n\n                      {/* Additional Time Units */}\n                      <div className=\"bg-slate-50 rounded-xl p-4\">\n                        <h4 className=\"font-semibold text-slate-800 mb-3\">Additional Time Units</h4>\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span>Total Minutes:</span>\n                            <span className=\"font-medium\" data-testid=\"total-minutes\">\n                              {result.totalMinutes.toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Total Seconds:</span>\n                            <span className=\"font-medium\" data-testid=\"total-seconds\">\n                              {result.totalSeconds.toLocaleString()}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Special Occasions */}\n                      <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n                        <div className=\"flex items-center space-x-2 mb-2\">\n                          <i className=\"fas fa-gift text-yellow-600\"></i>\n                          <span className=\"font-medium text-yellow-800\">Quick Facts</span>\n                        </div>\n                        <div className=\"text-yellow-700 text-sm space-y-1\">\n                          <p>• That's approximately {Math.round(result.totalDays / 365.25 * 100) / 100} years</p>\n                          <p>• Excluding weekends: {result.workingDays} working days</p>\n                          <p>• Weekend days: {result.totalDays - result.workingDays}</p>\n                          {result.totalDays > 365 && (\n                            <p>• That's more than a year of time difference!</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"calculate\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-plus-minus text-green-600\"></i>\n                    <span>Add or Subtract Days from a Date</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"baseDate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Base Date\n                    </Label>\n                    <div className=\"flex gap-2\">\n                      <Input\n                        id=\"baseDate\"\n                        type=\"date\"\n                        value={baseDate}\n                        onChange={(e) => setBaseDate(e.target.value)}\n                        className=\"flex-1 text-lg\"\n                        data-testid=\"input-base-date\"\n                      />\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setToday('base')}\n                        className=\"px-3\"\n                        data-testid=\"button-today-base\"\n                      >\n                        Today\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Operation\n                      </Label>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant={operation === \"add\" ? \"default\" : \"outline\"}\n                          onClick={() => setOperation(\"add\")}\n                          className=\"flex-1\"\n                          data-testid=\"button-add\"\n                        >\n                          <i className=\"fas fa-plus mr-2\"></i>\n                          Add\n                        </Button>\n                        <Button\n                          variant={operation === \"subtract\" ? \"default\" : \"outline\"}\n                          onClick={() => setOperation(\"subtract\")}\n                          className=\"flex-1\"\n                          data-testid=\"button-subtract\"\n                        >\n                          <i className=\"fas fa-minus mr-2\"></i>\n                          Subtract\n                        </Button>\n                      </div>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"daysToAdd\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Number of Days\n                      </Label>\n                      <Input\n                        id=\"daysToAdd\"\n                        type=\"number\"\n                        value={daysToAdd}\n                        onChange={(e) => setDaysToAdd(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"30\"\n                        min=\"0\"\n                        data-testid=\"input-days-to-add\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculateNewDate} \n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                    disabled={!baseDate || !daysToAdd}\n                    data-testid=\"button-calculate-new-date\"\n                  >\n                    <i className=\"fas fa-calendar-plus mr-2\"></i>\n                    Calculate New Date\n                  </Button>\n\n                  {calculatedDate && (\n                    <div className=\"bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl p-6 text-white text-center\" data-testid=\"calculated-date-result\">\n                      <h3 className=\"text-3xl font-bold mb-2\">\n                        {new Date(calculatedDate).toLocaleDateString('en-US', { \n                          weekday: 'long', \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric' \n                        })}\n                      </h3>\n                      <p className=\"text-green-100 mb-2\">\n                        {operation === 'add' ? 'Adding' : 'Subtracting'} {daysToAdd} days \n                        {operation === 'add' ? ' to ' : ' from '} \n                        {new Date(baseDate).toLocaleDateString('en-US', { \n                          year: 'numeric', \n                          month: 'long', \n                          day: 'numeric' \n                        })}\n                      </p>\n                      <div className=\"text-sm text-green-100\">\n                        Result: {calculatedDate}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Quick Actions */}\n                  <div className=\"bg-blue-50 rounded-xl p-4\">\n                    <h4 className=\"font-semibold text-blue-800 mb-3\">Quick Calculations</h4>\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2\">\n                      {[7, 30, 90, 365].map((days) => (\n                        <Button\n                          key={days}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setDaysToAdd(days.toString())}\n                          className=\"text-xs\"\n                          data-testid={`button-quick-${days}`}\n                        >\n                          {days} days\n                        </Button>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-8 text-center\">\n            <Button \n              onClick={clearAll} \n              variant=\"outline\"\n              className=\"px-8\"\n              data-testid=\"button-clear-all\"\n            >\n              <i className=\"fas fa-trash-alt mr-2\"></i>\n              Clear All\n            </Button>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Use Cases</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-birthday-cake text-purple-500 mt-1\"></i>\n                    <span>Calculate age or time until birthday</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-briefcase text-blue-500 mt-1\"></i>\n                    <span>Project deadlines and working days</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-heart text-red-500 mt-1\"></i>\n                    <span>Relationship anniversaries and milestones</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-plane text-green-500 mt-1\"></i>\n                    <span>Travel planning and vacation countdown</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-graduation-cap text-orange-500 mt-1\"></i>\n                    <span>Academic terms and school schedules</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Date Calculation Tips</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calendar text-blue-500 mt-1\"></i>\n                    <span>Leap years have 366 days (every 4 years)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-business-time text-green-500 mt-1\"></i>\n                    <span>Working days exclude weekends (Sat & Sun)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-clock text-purple-500 mt-1\"></i>\n                    <span>Time zones are not considered in calculations</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-star text-yellow-500 mt-1\"></i>\n                    <span>Calculations are inclusive of start and end dates</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-info-circle text-red-500 mt-1\"></i>\n                    <span>Results are approximate for months/years</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":22530},"client/src/pages/tools/discount-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface DiscountResult {\n  discountAmount: number;\n  finalPrice: number;\n  savings: number;\n}\n\nexport default function DiscountCalculator() {\n  // Standard discount calculation\n  const [originalPrice, setOriginalPrice] = useState(\"\");\n  const [discountPercent, setDiscountPercent] = useState(\"\");\n  const [discountResult, setDiscountResult] = useState<DiscountResult | null>(null);\n\n  // Multiple discounts\n  const [multiOriginalPrice, setMultiOriginalPrice] = useState(\"\");\n  const [discount1, setDiscount1] = useState(\"\");\n  const [discount2, setDiscount2] = useState(\"\");\n  const [discount3, setDiscount3] = useState(\"\");\n  const [multiResult, setMultiResult] = useState<{steps: any[], finalPrice: number, totalSavings: number} | null>(null);\n\n  // Reverse calculation (find original price)\n  const [salePrice, setSalePrice] = useState(\"\");\n  const [knownDiscount, setKnownDiscount] = useState(\"\");\n  const [originalPriceResult, setOriginalPriceResult] = useState<number | null>(null);\n\n  useEffect(() => {\n    document.title = \"Discount Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate discounts, sale prices, and savings. Free discount calculator with multiple discounts and reverse calculations.');\n    }\n  }, []);\n\n  const calculateDiscount = () => {\n    if (!originalPrice || !discountPercent) return;\n\n    const price = parseFloat(originalPrice);\n    const discount = parseFloat(discountPercent);\n\n    const discountAmount = (price * discount) / 100;\n    const finalPrice = price - discountAmount;\n\n    setDiscountResult({\n      discountAmount: Math.round(discountAmount * 100) / 100,\n      finalPrice: Math.round(finalPrice * 100) / 100,\n      savings: Math.round(discountAmount * 100) / 100\n    });\n  };\n\n  const calculateMultipleDiscounts = () => {\n    if (!multiOriginalPrice || !discount1) return;\n\n    let currentPrice = parseFloat(multiOriginalPrice);\n    const originalPrice = currentPrice;\n    const steps = [];\n\n    // Apply first discount\n    if (discount1) {\n      const disc1 = parseFloat(discount1);\n      const discountAmount = (currentPrice * disc1) / 100;\n      currentPrice = currentPrice - discountAmount;\n      steps.push({\n        step: 1,\n        discount: disc1,\n        discountAmount: Math.round(discountAmount * 100) / 100,\n        priceAfter: Math.round(currentPrice * 100) / 100\n      });\n    }\n\n    // Apply second discount\n    if (discount2) {\n      const disc2 = parseFloat(discount2);\n      const discountAmount = (currentPrice * disc2) / 100;\n      currentPrice = currentPrice - discountAmount;\n      steps.push({\n        step: 2,\n        discount: disc2,\n        discountAmount: Math.round(discountAmount * 100) / 100,\n        priceAfter: Math.round(currentPrice * 100) / 100\n      });\n    }\n\n    // Apply third discount\n    if (discount3) {\n      const disc3 = parseFloat(discount3);\n      const discountAmount = (currentPrice * disc3) / 100;\n      currentPrice = currentPrice - discountAmount;\n      steps.push({\n        step: 3,\n        discount: disc3,\n        discountAmount: Math.round(discountAmount * 100) / 100,\n        priceAfter: Math.round(currentPrice * 100) / 100\n      });\n    }\n\n    const totalSavings = originalPrice - currentPrice;\n\n    setMultiResult({\n      steps,\n      finalPrice: Math.round(currentPrice * 100) / 100,\n      totalSavings: Math.round(totalSavings * 100) / 100\n    });\n  };\n\n  const calculateOriginalPrice = () => {\n    if (!salePrice || !knownDiscount) return;\n\n    const sale = parseFloat(salePrice);\n    const discount = parseFloat(knownDiscount);\n\n    // Formula: Original Price = Sale Price / (1 - Discount/100)\n    const original = sale / (1 - discount / 100);\n\n    setOriginalPriceResult(Math.round(original * 100) / 100);\n  };\n\n  const clearAll = () => {\n    setOriginalPrice(\"\");\n    setDiscountPercent(\"\");\n    setMultiOriginalPrice(\"\");\n    setDiscount1(\"\");\n    setDiscount2(\"\");\n    setDiscount3(\"\");\n    setSalePrice(\"\");\n    setKnownDiscount(\"\");\n    setDiscountResult(null);\n    setMultiResult(null);\n    setOriginalPriceResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-red-100 to-red-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-tags text-red-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"discount-calc-title\">\n              Discount Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"discount-calc-subtitle\">\n              Calculate discounts, sale prices, and total savings on your purchases\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"simple\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"simple\">Simple Discount</TabsTrigger>\n              <TabsTrigger value=\"multiple\">Multiple Discounts</TabsTrigger>\n              <TabsTrigger value=\"reverse\">Find Original Price</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"simple\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-calculator text-primary\"></i>\n                    <span>Single Discount Calculation</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"originalPrice\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Original Price ($)\n                      </Label>\n                      <Input\n                        id=\"originalPrice\"\n                        type=\"number\"\n                        value={originalPrice}\n                        onChange={(e) => setOriginalPrice(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"100.00\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        data-testid=\"input-original-price\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"discountPercent\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Discount Percentage (%)\n                      </Label>\n                      <Input\n                        id=\"discountPercent\"\n                        type=\"number\"\n                        value={discountPercent}\n                        onChange={(e) => setDiscountPercent(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"20\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        data-testid=\"input-discount-percent\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculateDiscount} \n                    className=\"w-full bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!originalPrice || !discountPercent}\n                    data-testid=\"button-calculate-discount\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Discount\n                  </Button>\n\n                  {discountResult && (\n                    <div className=\"space-y-4\" data-testid=\"discount-results\">\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"text-center p-4 bg-red-50 rounded-xl border border-red-200\">\n                          <div className=\"text-2xl font-bold text-red-600\" data-testid=\"discount-amount\">\n                            ${discountResult.discountAmount}\n                          </div>\n                          <div className=\"text-sm text-red-700\">Discount Amount</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-green-50 rounded-xl border border-green-200\">\n                          <div className=\"text-2xl font-bold text-green-600\" data-testid=\"final-price\">\n                            ${discountResult.finalPrice}\n                          </div>\n                          <div className=\"text-sm text-green-700\">Final Price</div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-gradient-to-r from-red-500 to-pink-500 rounded-2xl p-6 text-white\">\n                        <h3 className=\"text-xl font-bold mb-4 text-center\">Discount Summary</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between\">\n                            <span>Original Price:</span>\n                            <span>${originalPrice}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Discount ({discountPercent}%):</span>\n                            <span>-${discountResult.discountAmount}</span>\n                          </div>\n                          <div className=\"border-t border-red-300 pt-2\">\n                            <div className=\"flex justify-between font-bold text-lg\">\n                              <span>You Pay:</span>\n                              <span>${discountResult.finalPrice}</span>\n                            </div>\n                          </div>\n                          <div className=\"text-center mt-3 text-red-100\">\n                            You save ${discountResult.savings}!\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"multiple\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-layer-group text-purple-600\"></i>\n                    <span>Multiple Discounts (Sequential)</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"multiOriginalPrice\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Original Price ($)\n                    </Label>\n                    <Input\n                      id=\"multiOriginalPrice\"\n                      type=\"number\"\n                      value={multiOriginalPrice}\n                      onChange={(e) => setMultiOriginalPrice(e.target.value)}\n                      className=\"w-full text-lg\"\n                      placeholder=\"100.00\"\n                      min=\"0\"\n                      step=\"0.01\"\n                      data-testid=\"input-multi-original-price\"\n                    />\n                  </div>\n\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"discount1\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        First Discount (%)\n                      </Label>\n                      <Input\n                        id=\"discount1\"\n                        type=\"number\"\n                        value={discount1}\n                        onChange={(e) => setDiscount1(e.target.value)}\n                        className=\"w-full\"\n                        placeholder=\"20\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        data-testid=\"input-discount1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"discount2\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Second Discount (%) <span className=\"text-gray-500\">[Optional]</span>\n                      </Label>\n                      <Input\n                        id=\"discount2\"\n                        type=\"number\"\n                        value={discount2}\n                        onChange={(e) => setDiscount2(e.target.value)}\n                        className=\"w-full\"\n                        placeholder=\"10\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        data-testid=\"input-discount2\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"discount3\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Third Discount (%) <span className=\"text-gray-500\">[Optional]</span>\n                      </Label>\n                      <Input\n                        id=\"discount3\"\n                        type=\"number\"\n                        value={discount3}\n                        onChange={(e) => setDiscount3(e.target.value)}\n                        className=\"w-full\"\n                        placeholder=\"5\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        data-testid=\"input-discount3\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculateMultipleDiscounts} \n                    className=\"w-full bg-purple-600 hover:bg-purple-700 text-white\"\n                    disabled={!multiOriginalPrice || !discount1}\n                    data-testid=\"button-calculate-multiple\"\n                  >\n                    <i className=\"fas fa-layer-group mr-2\"></i>\n                    Calculate Multiple Discounts\n                  </Button>\n\n                  {multiResult && (\n                    <div className=\"space-y-4\" data-testid=\"multiple-results\">\n                      <div className=\"bg-gradient-to-r from-purple-500 to-indigo-500 rounded-2xl p-6 text-white\">\n                        <h3 className=\"text-xl font-bold mb-4 text-center\">Step-by-Step Discounts</h3>\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between\">\n                            <span>Starting Price:</span>\n                            <span>${multiOriginalPrice}</span>\n                          </div>\n                          {multiResult.steps.map((step, index) => (\n                            <div key={index}>\n                              <div className=\"flex justify-between text-purple-100\">\n                                <span>Discount {step.step} ({step.discount}%):</span>\n                                <span>-${step.discountAmount}</span>\n                              </div>\n                              <div className=\"flex justify-between font-semibold\">\n                                <span>After Discount {step.step}:</span>\n                                <span>${step.priceAfter}</span>\n                              </div>\n                              {index < multiResult.steps.length - 1 && <div className=\"border-t border-purple-300 my-2\"></div>}\n                            </div>\n                          ))}\n                          <div className=\"border-t border-purple-300 pt-2\">\n                            <div className=\"flex justify-between font-bold text-lg\">\n                              <span>Final Price:</span>\n                              <span>${multiResult.finalPrice}</span>\n                            </div>\n                            <div className=\"text-center mt-2 text-purple-100\">\n                              Total Savings: ${multiResult.totalSavings}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"reverse\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-search text-orange-600\"></i>\n                    <span>Find Original Price from Sale Price</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"salePrice\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Sale Price ($)\n                      </Label>\n                      <Input\n                        id=\"salePrice\"\n                        type=\"number\"\n                        value={salePrice}\n                        onChange={(e) => setSalePrice(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"80.00\"\n                        min=\"0\"\n                        step=\"0.01\"\n                        data-testid=\"input-sale-price\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"knownDiscount\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Known Discount (%)\n                      </Label>\n                      <Input\n                        id=\"knownDiscount\"\n                        type=\"number\"\n                        value={knownDiscount}\n                        onChange={(e) => setKnownDiscount(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"20\"\n                        min=\"0\"\n                        max=\"100\"\n                        step=\"0.01\"\n                        data-testid=\"input-known-discount\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculateOriginalPrice} \n                    className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                    disabled={!salePrice || !knownDiscount}\n                    data-testid=\"button-calculate-original\"\n                  >\n                    <i className=\"fas fa-search mr-2\"></i>\n                    Find Original Price\n                  </Button>\n\n                  {originalPriceResult !== null && (\n                    <div className=\"bg-gradient-to-r from-orange-500 to-amber-500 rounded-2xl p-6 text-white text-center\" data-testid=\"original-price-result\">\n                      <h3 className=\"text-3xl font-bold mb-2\">${originalPriceResult}</h3>\n                      <p className=\"text-orange-100 mb-4\">Original Price</p>\n                      <div className=\"text-sm text-orange-100\">\n                        With a {knownDiscount}% discount, the sale price of ${salePrice} means the original price was ${originalPriceResult}\n                      </div>\n                      <div className=\"mt-4 text-sm text-orange-100\">\n                        Formula: Original Price = Sale Price ÷ (1 - Discount ÷ 100)\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-8 text-center\">\n            <Button \n              onClick={clearAll} \n              variant=\"outline\"\n              className=\"px-8\"\n              data-testid=\"button-clear-all\"\n            >\n              <i className=\"fas fa-trash-alt mr-2\"></i>\n              Clear All\n            </Button>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Discount Tips</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-tags text-red-500 mt-1\"></i>\n                    <span>Multiple discounts apply sequentially, not additively</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calculator text-blue-500 mt-1\"></i>\n                    <span>20% + 10% discount ≠ 30% discount</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-shopping-cart text-green-500 mt-1\"></i>\n                    <span>Compare final prices, not just discount percentages</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-percent text-purple-500 mt-1\"></i>\n                    <span>Higher percentage doesn't always mean better deal</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-receipt text-orange-500 mt-1\"></i>\n                    <span>Check if discount applies before or after tax</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Shopping Strategies</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calendar text-blue-500 mt-1\"></i>\n                    <span>Time purchases around major sale events</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-search text-green-500 mt-1\"></i>\n                    <span>Compare prices across different retailers</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-mobile-alt text-purple-500 mt-1\"></i>\n                    <span>Use coupon apps and browser extensions</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-credit-card text-orange-500 mt-1\"></i>\n                    <span>Check for additional credit card discounts</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-truck text-red-500 mt-1\"></i>\n                    <span>Factor in shipping costs when comparing</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":23890},"client/src/pages/tools/heart-rate-zone-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface HeartRateZone {\n  name: string;\n  range: { min: number; max: number };\n  percentage: string;\n  description: string;\n  benefits: string;\n  color: string;\n}\n\ninterface HeartRateResult {\n  maxHeartRate: number;\n  restingHeartRate: number;\n  zones: HeartRateZone[];\n}\n\nexport default function HeartRateZoneCalculator() {\n  const [age, setAge] = useState(\"\");\n  const [restingHR, setRestingHR] = useState(\"\");\n  const [method, setMethod] = useState(\"karvonen\");\n  const [result, setResult] = useState<HeartRateResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Heart Rate Zone Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your heart rate training zones for optimal workout intensity. Free heart rate zone calculator with Karvonen and age-based methods.');\n    }\n  }, []);\n\n  const calculateHeartRateZones = () => {\n    if (!age) return;\n\n    const ageNum = parseInt(age);\n    const restingHRNum = restingHR ? parseInt(restingHR) : 60; // Default resting HR if not provided\n    \n    // Calculate Maximum Heart Rate\n    const maxHR = 220 - ageNum;\n\n    let zones: HeartRateZone[] = [];\n\n    if (method === \"karvonen\" && restingHR) {\n      // Karvonen Formula: Target HR = ((Max HR - Resting HR) × %Intensity) + Resting HR\n      const hrReserve = maxHR - restingHRNum;\n      \n      zones = [\n        {\n          name: \"Recovery Zone\",\n          range: {\n            min: Math.round(hrReserve * 0.50 + restingHRNum),\n            max: Math.round(hrReserve * 0.60 + restingHRNum)\n          },\n          percentage: \"50-60%\",\n          description: \"Very light activity\",\n          benefits: \"Active recovery, warm-up, cool-down\",\n          color: \"bg-blue-500\"\n        },\n        {\n          name: \"Base Endurance\",\n          range: {\n            min: Math.round(hrReserve * 0.60 + restingHRNum),\n            max: Math.round(hrReserve * 0.70 + restingHRNum)\n          },\n          percentage: \"60-70%\",\n          description: \"Light aerobic exercise\",\n          benefits: \"Fat burning, basic endurance building\",\n          color: \"bg-green-500\"\n        },\n        {\n          name: \"Aerobic Zone\",\n          range: {\n            min: Math.round(hrReserve * 0.70 + restingHRNum),\n            max: Math.round(hrReserve * 0.80 + restingHRNum)\n          },\n          percentage: \"70-80%\",\n          description: \"Moderate aerobic exercise\",\n          benefits: \"Cardiovascular fitness, endurance improvement\",\n          color: \"bg-yellow-500\"\n        },\n        {\n          name: \"Lactate Threshold\",\n          range: {\n            min: Math.round(hrReserve * 0.80 + restingHRNum),\n            max: Math.round(hrReserve * 0.90 + restingHRNum)\n          },\n          percentage: \"80-90%\",\n          description: \"Hard aerobic exercise\",\n          benefits: \"Lactate threshold improvement, race pace training\",\n          color: \"bg-orange-500\"\n        },\n        {\n          name: \"VO2 Max Zone\",\n          range: {\n            min: Math.round(hrReserve * 0.90 + restingHRNum),\n            max: Math.round(hrReserve * 1.00 + restingHRNum)\n          },\n          percentage: \"90-100%\",\n          description: \"Maximum effort\",\n          benefits: \"Maximum oxygen uptake, anaerobic capacity\",\n          color: \"bg-red-500\"\n        }\n      ];\n    } else {\n      // Age-based formula (simpler method)\n      zones = [\n        {\n          name: \"Recovery Zone\",\n          range: {\n            min: Math.round(maxHR * 0.50),\n            max: Math.round(maxHR * 0.60)\n          },\n          percentage: \"50-60%\",\n          description: \"Very light activity\",\n          benefits: \"Active recovery, warm-up, cool-down\",\n          color: \"bg-blue-500\"\n        },\n        {\n          name: \"Fat Burn Zone\",\n          range: {\n            min: Math.round(maxHR * 0.60),\n            max: Math.round(maxHR * 0.70)\n          },\n          percentage: \"60-70%\",\n          description: \"Light aerobic exercise\",\n          benefits: \"Fat burning, basic endurance building\",\n          color: \"bg-green-500\"\n        },\n        {\n          name: \"Cardio Zone\",\n          range: {\n            min: Math.round(maxHR * 0.70),\n            max: Math.round(maxHR * 0.80)\n          },\n          percentage: \"70-80%\",\n          description: \"Moderate aerobic exercise\",\n          benefits: \"Cardiovascular fitness improvement\",\n          color: \"bg-yellow-500\"\n        },\n        {\n          name: \"Anaerobic Zone\",\n          range: {\n            min: Math.round(maxHR * 0.80),\n            max: Math.round(maxHR * 0.90)\n          },\n          percentage: \"80-90%\",\n          description: \"Hard anaerobic exercise\",\n          benefits: \"Performance improvement, lactate tolerance\",\n          color: \"bg-orange-500\"\n        },\n        {\n          name: \"Red Line Zone\",\n          range: {\n            min: Math.round(maxHR * 0.90),\n            max: Math.round(maxHR * 1.00)\n          },\n          percentage: \"90-100%\",\n          description: \"Maximum effort\",\n          benefits: \"Maximum capacity, short burst training\",\n          color: \"bg-red-500\"\n        }\n      ];\n    }\n\n    setResult({\n      maxHeartRate: maxHR,\n      restingHeartRate: restingHRNum,\n      zones\n    });\n  };\n\n  const clearCalculation = () => {\n    setAge(\"\");\n    setRestingHR(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-red-100 to-red-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-heartbeat text-red-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"hr-zone-title\">\n              Heart Rate Zone Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"hr-zone-subtitle\">\n              Calculate your heart rate training zones for optimal workout intensity and performance\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-md text-primary\"></i>\n                  <span>Your Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"age\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Age (years)\n                  </Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    value={age}\n                    onChange={(e) => setAge(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"25\"\n                    min=\"1\"\n                    max=\"120\"\n                    data-testid=\"input-age\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"restingHR\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Resting Heart Rate (BPM) <span className=\"text-gray-500\">[Optional for better accuracy]</span>\n                  </Label>\n                  <Input\n                    id=\"restingHR\"\n                    type=\"number\"\n                    value={restingHR}\n                    onChange={(e) => setRestingHR(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"60\"\n                    min=\"30\"\n                    max=\"120\"\n                    data-testid=\"input-resting-hr\"\n                  />\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    Measure your resting HR first thing in the morning while still lying down\n                  </p>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700 mb-3 block\">\n                    Calculation Method\n                  </Label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"radio\"\n                        id=\"karvonen\"\n                        value=\"karvonen\"\n                        checked={method === \"karvonen\"}\n                        onChange={(e) => setMethod(e.target.value)}\n                        className=\"w-4 h-4\"\n                        data-testid=\"radio-karvonen\"\n                      />\n                      <Label htmlFor=\"karvonen\" className=\"text-sm\">\n                        Karvonen Formula (More Accurate - requires resting HR)\n                      </Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"radio\"\n                        id=\"age-based\"\n                        value=\"age-based\"\n                        checked={method === \"age-based\"}\n                        onChange={(e) => setMethod(e.target.value)}\n                        className=\"w-4 h-4\"\n                        data-testid=\"radio-age-based\"\n                      />\n                      <Label htmlFor=\"age-based\" className=\"text-sm\">\n                        Age-Based Formula (Simple method)\n                      </Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateHeartRateZones} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!age || (method === \"karvonen\" && !restingHR)}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Zones\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* How to Measure Resting HR */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">How to Measure Resting Heart Rate</span>\n                  </div>\n                  <ul className=\"text-blue-700 space-y-1 text-xs\">\n                    <li>• Measure first thing in the morning before getting up</li>\n                    <li>• Use your index and middle fingers on your wrist or neck</li>\n                    <li>• Count beats for 60 seconds (or 15 seconds × 4)</li>\n                    <li>• Take measurements for 3-5 days and use the average</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-accent\"></i>\n                  <span>Your Heart Rate Zones</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"hr-zone-results\">\n                    {/* Key Metrics */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-red-50 rounded-xl border border-red-200\">\n                        <div className=\"text-2xl font-bold text-red-600\" data-testid=\"max-hr\">\n                          {result.maxHeartRate} BPM\n                        </div>\n                        <div className=\"text-sm text-red-700\">Max Heart Rate</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                        <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"resting-hr\">\n                          {result.restingHeartRate} BPM\n                        </div>\n                        <div className=\"text-sm text-blue-700\">Resting Heart Rate</div>\n                      </div>\n                    </div>\n\n                    {/* Heart Rate Zones */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-semibold text-slate-800\">Training Zones:</h4>\n                      \n                      <div className=\"space-y-3\">\n                        {result.zones.map((zone, index) => (\n                          <div key={index} className=\"border rounded-xl p-4 hover:shadow-md transition-shadow\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <div className=\"flex items-center space-x-3\">\n                                <div className={`w-4 h-4 ${zone.color} rounded`}></div>\n                                <div>\n                                  <h5 className=\"font-medium text-slate-800\">{zone.name}</h5>\n                                  <p className=\"text-sm text-slate-600\">{zone.description}</p>\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className=\"font-bold text-slate-800\" data-testid={`zone-${index}-range`}>\n                                  {zone.range.min}-{zone.range.max} BPM\n                                </div>\n                                <div className=\"text-sm text-slate-600\">{zone.percentage} Max HR</div>\n                              </div>\n                            </div>\n                            <div className=\"text-sm text-slate-600 mt-2\">\n                              <strong>Benefits:</strong> {zone.benefits}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Training Recommendations */}\n                    <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                      <h4 className=\"font-semibold text-green-800 mb-3\">Training Recommendations</h4>\n                      <div className=\"space-y-2 text-sm text-green-700\">\n                        <div><strong>Beginners:</strong> Focus on zones 1-3 (50-80% max HR)</div>\n                        <div><strong>Intermediate:</strong> 80% time in zones 1-3, 20% in zones 4-5</div>\n                        <div><strong>Advanced:</strong> Use all zones based on training periodization</div>\n                        <div><strong>Fat Loss:</strong> Spend more time in zones 2-3 (60-80% max HR)</div>\n                      </div>\n                    </div>\n\n                    {/* Important Safety Note */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Safety Guidelines</p>\n                          <ul className=\"text-yellow-700 space-y-1 text-xs\">\n                            <li>• Always warm up before reaching higher heart rate zones</li>\n                            <li>• If you feel dizzy, chest pain, or excessive fatigue, stop immediately</li>\n                            <li>• Consider consulting a doctor before starting high-intensity training</li>\n                            <li>• Medications can affect heart rate - consult healthcare providers</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-heartbeat text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your age to calculate your heart rate training zones\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Understanding Heart Rate Zones</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Zone Training Benefits:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Optimizes workout intensity for specific goals</li>\n                      <li>• Prevents overtraining and undertraining</li>\n                      <li>• Improves cardiovascular efficiency</li>\n                      <li>• Helps track fitness improvements over time</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Monitoring Tools:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Heart rate monitors (chest strap most accurate)</li>\n                      <li>• Fitness watches and smartwatches</li>\n                      <li>• Gym equipment with built-in HR sensors</li>\n                      <li>• Smartphone apps with camera-based detection</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Factors Affecting Heart Rate</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-thermometer-half text-red-500 mt-1\"></i>\n                    <span>Temperature and humidity levels</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-pills text-blue-500 mt-1\"></i>\n                    <span>Medications (beta-blockers, stimulants)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-coffee text-orange-500 mt-1\"></i>\n                    <span>Caffeine and alcohol consumption</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-bed text-purple-500 mt-1\"></i>\n                    <span>Sleep quality and stress levels</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-mountain text-green-500 mt-1\"></i>\n                    <span>Altitude and fitness level</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Heart Rate Training Planned!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Time for a quick laugh before your next workout session!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":21645},"client/src/pages/tools/ideal-weight-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface IdealWeightResult {\n  robinson: number;\n  miller: number;\n  devine: number;\n  hamwi: number;\n  healthy_bmi_range: { min: number; max: number };\n  average: number;\n}\n\nexport default function IdealWeightCalculator() {\n  const [height, setHeight] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<IdealWeightResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Ideal Weight Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your ideal weight using multiple medical formulas. Free ideal weight calculator with Robinson, Miller, Devine, and Hamwi formulas.');\n    }\n  }, []);\n\n  const calculateIdealWeight = () => {\n    if (!height || !gender) return;\n\n    let heightCm = parseFloat(height);\n    \n    // Convert to cm if needed\n    if (unit === \"imperial\") {\n      heightCm = heightCm * 2.54; // inches to cm\n    }\n\n    const heightM = heightCm / 100;\n\n    // Robinson Formula (1983)\n    let robinson: number;\n    if (gender === \"male\") {\n      robinson = 52 + 1.9 * (heightCm - 152.4) / 2.54;\n    } else {\n      robinson = 49 + 1.7 * (heightCm - 152.4) / 2.54;\n    }\n\n    // Miller Formula (1983)\n    let miller: number;\n    if (gender === \"male\") {\n      miller = 56.2 + 1.41 * (heightCm - 152.4) / 2.54;\n    } else {\n      miller = 53.1 + 1.36 * (heightCm - 152.4) / 2.54;\n    }\n\n    // Devine Formula (1974)\n    let devine: number;\n    if (gender === \"male\") {\n      devine = 50 + 2.3 * (heightCm - 152.4) / 2.54;\n    } else {\n      devine = 45.5 + 2.3 * (heightCm - 152.4) / 2.54;\n    }\n\n    // Hamwi Formula (1964)\n    let hamwi: number;\n    if (gender === \"male\") {\n      hamwi = 48 + 2.7 * (heightCm - 152.4) / 2.54;\n    } else {\n      hamwi = 45.5 + 2.2 * (heightCm - 152.4) / 2.54;\n    }\n\n    // Healthy BMI Range (18.5 - 24.9)\n    const bmi_min_weight = 18.5 * heightM * heightM;\n    const bmi_max_weight = 24.9 * heightM * heightM;\n\n    // Average of all formulas\n    const average = (robinson + miller + devine + hamwi) / 4;\n\n    setResult({\n      robinson: Math.round(robinson * 100) / 100,\n      miller: Math.round(miller * 100) / 100,\n      devine: Math.round(devine * 100) / 100,\n      hamwi: Math.round(hamwi * 100) / 100,\n      healthy_bmi_range: {\n        min: Math.round(bmi_min_weight * 100) / 100,\n        max: Math.round(bmi_max_weight * 100) / 100\n      },\n      average: Math.round(average * 100) / 100\n    });\n  };\n\n  const clearCalculation = () => {\n    setHeight(\"\");\n    setGender(\"\");\n    setResult(null);\n  };\n\n  const convertWeight = (weightKg: number) => {\n    return unit === \"imperial\" ? Math.round(weightKg * 2.20462 * 100) / 100 : weightKg;\n  };\n\n  const weightUnit = unit === \"imperial\" ? \"lbs\" : \"kg\";\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-teal-100 to-teal-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-balance-scale text-teal-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"ideal-weight-title\">\n              Ideal Weight Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"ideal-weight-subtitle\">\n              Calculate your ideal weight using multiple medical formulas and healthy BMI ranges\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-md text-primary\"></i>\n                  <span>Your Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg, cm)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs, inches)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"gender\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Gender\n                  </Label>\n                  <Select value={gender} onValueChange={setGender} data-testid=\"select-gender\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select gender\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"male\">Male</SelectItem>\n                      <SelectItem value=\"female\">Female</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"height\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Height {unit === \"metric\" ? \"(cm)\" : \"(inches)\"}\n                  </Label>\n                  <Input\n                    id=\"height\"\n                    type=\"number\"\n                    value={height}\n                    onChange={(e) => setHeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"170\" : \"67\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-height\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateIdealWeight} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!height || !gender}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Ideal Weight\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Formula Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">About Ideal Weight</span>\n                  </div>\n                  <p className=\"text-blue-700\">\n                    Ideal weight formulas provide estimates based on height and gender. \n                    They don't account for muscle mass, bone density, or body composition.\n                    Consult healthcare professionals for personalized advice.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-accent\"></i>\n                  <span>Ideal Weight Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"ideal-weight-results\">\n                    {/* Average Result */}\n                    <div className=\"text-center bg-gradient-to-r from-teal-500 to-cyan-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"average-weight\">\n                        {convertWeight(result.average)} {weightUnit}\n                      </h2>\n                      <p className=\"text-teal-100\">Average Ideal Weight</p>\n                    </div>\n\n                    {/* Formula Results */}\n                    <Tabs defaultValue=\"formulas\" className=\"space-y-4\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"formulas\">Medical Formulas</TabsTrigger>\n                        <TabsTrigger value=\"bmi\">BMI Range</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"formulas\" className=\"space-y-4\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Robinson Formula</div>\n                              <div className=\"text-sm text-slate-600\">Most widely used (1983)</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-primary\" data-testid=\"robinson-weight\">\n                              {convertWeight(result.robinson)} {weightUnit}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Miller Formula</div>\n                              <div className=\"text-sm text-slate-600\">Adjusted for modern populations</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-green-600\" data-testid=\"miller-weight\">\n                              {convertWeight(result.miller)} {weightUnit}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Devine Formula</div>\n                              <div className=\"text-sm text-slate-600\">Classic medical standard</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-orange-600\" data-testid=\"devine-weight\">\n                              {convertWeight(result.devine)} {weightUnit}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Hamwi Formula</div>\n                              <div className=\"text-sm text-slate-600\">Conservative estimate</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-purple-600\" data-testid=\"hamwi-weight\">\n                              {convertWeight(result.hamwi)} {weightUnit}\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"bmi\" className=\"space-y-4\">\n                        <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                          <h4 className=\"font-semibold text-green-800 mb-3\">Healthy BMI Range (18.5-24.9)</h4>\n                          <div className=\"space-y-2\">\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-green-700\">Minimum Weight:</span>\n                              <span className=\"font-bold text-green-600\" data-testid=\"bmi-min-weight\">\n                                {convertWeight(result.healthy_bmi_range.min)} {weightUnit}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span className=\"text-green-700\">Maximum Weight:</span>\n                              <span className=\"font-bold text-green-600\" data-testid=\"bmi-max-weight\">\n                                {convertWeight(result.healthy_bmi_range.max)} {weightUnit}\n                              </span>\n                            </div>\n                          </div>\n                          <p className=\"text-xs text-green-600 mt-3\">\n                            This range represents weights that correspond to a healthy BMI for your height.\n                          </p>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Important Note */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Important Considerations</p>\n                          <ul className=\"text-yellow-700 space-y-1 text-xs\">\n                            <li>• These formulas don't account for muscle mass or body composition</li>\n                            <li>• Athletes and very muscular individuals may weigh more than \"ideal\"</li>\n                            <li>• Age, ethnicity, and health conditions affect ideal weight</li>\n                            <li>• Consult healthcare professionals for personalized guidance</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-balance-scale text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your height and gender to calculate ideal weight\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Understanding the Formulas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Robinson Formula (1983):</h5>\n                    <p>Most commonly used in medical practice. Based on large population studies.</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Miller Formula (1983):</h5>\n                    <p>Slightly modified version accounting for modern population changes.</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Devine Formula (1974):</h5>\n                    <p>Classic medical standard, often used for medication dosing calculations.</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Hamwi Formula (1964):</h5>\n                    <p>Conservative estimate, tends to suggest lower weights.</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Healthy Weight Tips</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-apple-alt text-green-500 mt-1\"></i>\n                    <span>Focus on balanced nutrition and whole foods</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-running text-blue-500 mt-1\"></i>\n                    <span>Include regular physical activity and exercise</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-bed text-purple-500 mt-1\"></i>\n                    <span>Maintain adequate sleep (7-9 hours per night)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-tint text-cyan-500 mt-1\"></i>\n                    <span>Stay hydrated with adequate water intake</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-heart text-red-500 mt-1\"></i>\n                    <span>Manage stress and prioritize mental health</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Need a Break?</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Take a moment to brighten your day with a random joke!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":19717},"client/src/pages/tools/loan-emi-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface EMIResult {\n  monthlyEMI: number;\n  totalAmount: number;\n  totalInterest: number;\n  loanBreakdown: {\n    month: number;\n    emi: number;\n    principal: number;\n    interest: number;\n    balance: number;\n  }[];\n}\n\nexport default function LoanEMICalculator() {\n  const [loanAmount, setLoanAmount] = useState(\"\");\n  const [interestRate, setInterestRate] = useState(\"\");\n  const [loanTenure, setLoanTenure] = useState(\"\");\n  const [tenureType, setTenureType] = useState(\"years\");\n  const [result, setResult] = useState<EMIResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Loan EMI Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate loan EMI, monthly payments, and total interest. Free loan calculator with detailed amortization schedule.');\n    }\n  }, []);\n\n  const calculateEMI = () => {\n    if (!loanAmount || !interestRate || !loanTenure) return;\n\n    const principal = parseFloat(loanAmount);\n    const rate = parseFloat(interestRate) / 100 / 12; // Monthly interest rate\n    let tenure = parseFloat(loanTenure);\n    \n    // Convert tenure to months\n    if (tenureType === \"years\") {\n      tenure = tenure * 12;\n    }\n\n    // EMI Formula: EMI = [P × r × (1 + r)^n] / [(1 + r)^n - 1]\n    const emi = (principal * rate * Math.pow(1 + rate, tenure)) / (Math.pow(1 + rate, tenure) - 1);\n    const totalAmount = emi * tenure;\n    const totalInterest = totalAmount - principal;\n\n    // Generate amortization schedule (show first 12 months or total tenure if less)\n    const scheduleLength = Math.min(tenure, 12);\n    const loanBreakdown = [];\n    let remainingBalance = principal;\n\n    for (let month = 1; month <= scheduleLength; month++) {\n      const interestPayment = remainingBalance * rate;\n      const principalPayment = emi - interestPayment;\n      remainingBalance -= principalPayment;\n\n      loanBreakdown.push({\n        month,\n        emi: Math.round(emi * 100) / 100,\n        principal: Math.round(principalPayment * 100) / 100,\n        interest: Math.round(interestPayment * 100) / 100,\n        balance: Math.round(Math.max(0, remainingBalance) * 100) / 100\n      });\n    }\n\n    setResult({\n      monthlyEMI: Math.round(emi * 100) / 100,\n      totalAmount: Math.round(totalAmount * 100) / 100,\n      totalInterest: Math.round(totalInterest * 100) / 100,\n      loanBreakdown\n    });\n  };\n\n  const clearCalculation = () => {\n    setLoanAmount(\"\");\n    setInterestRate(\"\");\n    setLoanTenure(\"\");\n    setTenureType(\"years\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-calculator text-green-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"emi-calc-title\">\n              Loan EMI Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"emi-calc-subtitle\">\n              Calculate your loan EMI, total interest, and monthly payment breakdown\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-file-invoice-dollar text-primary\"></i>\n                  <span>Loan Details</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"loanAmount\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Loan Amount ($)\n                  </Label>\n                  <Input\n                    id=\"loanAmount\"\n                    type=\"number\"\n                    value={loanAmount}\n                    onChange={(e) => setLoanAmount(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"100000\"\n                    min=\"0\"\n                    step=\"1000\"\n                    data-testid=\"input-loan-amount\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"interestRate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Annual Interest Rate (%)\n                  </Label>\n                  <Input\n                    id=\"interestRate\"\n                    type=\"number\"\n                    value={interestRate}\n                    onChange={(e) => setInterestRate(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"7.5\"\n                    min=\"0\"\n                    max=\"50\"\n                    step=\"0.01\"\n                    data-testid=\"input-interest-rate\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"loanTenure\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Loan Tenure\n                    </Label>\n                    <Input\n                      id=\"loanTenure\"\n                      type=\"number\"\n                      value={loanTenure}\n                      onChange={(e) => setLoanTenure(e.target.value)}\n                      className=\"w-full text-lg\"\n                      placeholder=\"15\"\n                      min=\"0\"\n                      step=\"1\"\n                      data-testid=\"input-loan-tenure\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"tenureType\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Tenure Type\n                    </Label>\n                    <Select value={tenureType} onValueChange={setTenureType} data-testid=\"select-tenure-type\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"years\">Years</SelectItem>\n                        <SelectItem value=\"months\">Months</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateEMI} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!loanAmount || !interestRate || !loanTenure}\n                    data-testid=\"button-calculate-emi\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate EMI\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-emi\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* EMI Formula Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">EMI Formula</span>\n                  </div>\n                  <div className=\"text-blue-700\">\n                    <p className=\"font-mono bg-white p-2 rounded text-xs\">\n                      EMI = [P × r × (1 + r)^n] / [(1 + r)^n - 1]\n                    </p>\n                    <div className=\"mt-2 text-xs\">\n                      <p><strong>P</strong> = Principal loan amount</p>\n                      <p><strong>r</strong> = Monthly interest rate (Annual rate ÷ 12)</p>\n                      <p><strong>n</strong> = Number of monthly installments</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Loan Types */}\n                <div className=\"bg-green-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-home text-green-600\"></i>\n                    <span className=\"font-medium text-green-800\">Common Loan Types</span>\n                  </div>\n                  <div className=\"text-green-700 space-y-1\">\n                    <p><strong>Home Loan:</strong> 6.5% - 8.5% (15-30 years)</p>\n                    <p><strong>Car Loan:</strong> 7% - 12% (3-7 years)</p>\n                    <p><strong>Personal Loan:</strong> 10% - 20% (1-5 years)</p>\n                    <p><strong>Education Loan:</strong> 8% - 12% (5-15 years)</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-pie text-accent\"></i>\n                  <span>EMI Calculation Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"emi-results\">\n                    {/* Main EMI Display */}\n                    <div className=\"text-center bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"monthly-emi\">\n                        ${result.monthlyEMI.toLocaleString()}\n                      </h2>\n                      <p className=\"text-green-100\">Monthly EMI</p>\n                    </div>\n\n                    {/* Summary Cards */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                        <div className=\"text-xl font-bold text-blue-600\" data-testid=\"total-amount\">\n                          ${result.totalAmount.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-blue-700\">Total Amount</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-red-50 rounded-xl border border-red-200\">\n                        <div className=\"text-xl font-bold text-red-600\" data-testid=\"total-interest\">\n                          ${result.totalInterest.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-red-700\">Total Interest</div>\n                      </div>\n                    </div>\n\n                    {/* Loan Summary */}\n                    <div className=\"bg-slate-50 rounded-xl p-4\">\n                      <h3 className=\"font-semibold text-slate-800 mb-3\">Loan Summary</h3>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Principal Amount:</span>\n                          <span className=\"font-medium\">${parseFloat(loanAmount).toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Interest Rate:</span>\n                          <span className=\"font-medium\">{interestRate}% per annum</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Loan Tenure:</span>\n                          <span className=\"font-medium\">{loanTenure} {tenureType}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Total Interest:</span>\n                          <span className=\"font-medium text-red-600\">${result.totalInterest.toLocaleString()}</span>\n                        </div>\n                        <div className=\"border-t pt-2\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"font-semibold\">Total Payable:</span>\n                            <span className=\"font-bold\">${result.totalAmount.toLocaleString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Amortization Schedule Preview */}\n                    <div className=\"bg-white border rounded-xl overflow-hidden\">\n                      <div className=\"bg-slate-50 px-4 py-3 border-b\">\n                        <h4 className=\"font-semibold text-slate-800\">\n                          Payment Schedule (First {result.loanBreakdown.length} months)\n                        </h4>\n                      </div>\n                      <div className=\"max-h-64 overflow-y-auto\">\n                        <table className=\"w-full text-xs\">\n                          <thead className=\"bg-slate-100 sticky top-0\">\n                            <tr>\n                              <th className=\"px-2 py-2 text-left\">Month</th>\n                              <th className=\"px-2 py-2 text-right\">EMI</th>\n                              <th className=\"px-2 py-2 text-right\">Principal</th>\n                              <th className=\"px-2 py-2 text-right\">Interest</th>\n                              <th className=\"px-2 py-2 text-right\">Balance</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {result.loanBreakdown.map((month) => (\n                              <tr key={month.month} className=\"border-t\">\n                                <td className=\"px-2 py-2\">{month.month}</td>\n                                <td className=\"px-2 py-2 text-right\">${month.emi.toLocaleString()}</td>\n                                <td className=\"px-2 py-2 text-right text-green-600\">${month.principal.toLocaleString()}</td>\n                                <td className=\"px-2 py-2 text-right text-red-600\">${month.interest.toLocaleString()}</td>\n                                <td className=\"px-2 py-2 text-right\">${month.balance.toLocaleString()}</td>\n                              </tr>\n                            ))}\n                          </tbody>\n                        </table>\n                      </div>\n                    </div>\n\n                    {/* Interest vs Principal Breakdown */}\n                    <div className=\"space-y-3\">\n                      <h4 className=\"font-semibold text-slate-800\">Payment Composition</h4>\n                      <div className=\"relative\">\n                        <div className=\"h-6 rounded-full overflow-hidden flex\">\n                          <div \n                            className=\"bg-green-400\" \n                            style={{width: `${(parseFloat(loanAmount) / result.totalAmount) * 100}%`}}\n                          ></div>\n                          <div \n                            className=\"bg-red-400\" \n                            style={{width: `${(result.totalInterest / result.totalAmount) * 100}%`}}\n                          ></div>\n                        </div>\n                        <div className=\"flex justify-between text-xs text-slate-600 mt-2\">\n                          <span className=\"flex items-center\">\n                            <div className=\"w-3 h-3 bg-green-400 rounded mr-1\"></div>\n                            Principal ({((parseFloat(loanAmount) / result.totalAmount) * 100).toFixed(1)}%)\n                          </span>\n                          <span className=\"flex items-center\">\n                            <div className=\"w-3 h-3 bg-red-400 rounded mr-1\"></div>\n                            Interest ({((result.totalInterest / result.totalAmount) * 100).toFixed(1)}%)\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-calculator text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Loan Details</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your loan information to calculate EMI\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">EMI Planning Tips</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-percentage text-green-500 mt-1\"></i>\n                    <span>Keep EMI under 40% of your monthly income</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calendar-alt text-blue-500 mt-1\"></i>\n                    <span>Shorter tenure = Higher EMI, Lower total interest</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-coins text-orange-500 mt-1\"></i>\n                    <span>Higher down payment reduces loan amount</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-chart-line text-purple-500 mt-1\"></i>\n                    <span>Consider prepayment to reduce interest burden</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-shield-alt text-red-500 mt-1\"></i>\n                    <span>Maintain emergency fund after EMI payments</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Factors Affecting Interest Rates</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-star text-yellow-500 mt-1\"></i>\n                    <span>Credit score (higher score = lower rate)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-briefcase text-blue-500 mt-1\"></i>\n                    <span>Employment stability and income</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-building text-green-500 mt-1\"></i>\n                    <span>Loan-to-value ratio for secured loans</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-clock text-purple-500 mt-1\"></i>\n                    <span>Loan tenure and type</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-university text-red-500 mt-1\"></i>\n                    <span>Lender policies and market conditions</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":20887},"client/src/pages/tools/macro-nutrient-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface MacroResult {\n  totalCalories: number;\n  protein: { grams: number; calories: number; percentage: number };\n  carbs: { grams: number; calories: number; percentage: number };\n  fats: { grams: number; calories: number; percentage: number };\n  fiber: number;\n  water: number;\n}\n\nexport default function MacroNutrientCalculator() {\n  const [age, setAge] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [gender, setGender] = useState(\"\");\n  const [activityLevel, setActivityLevel] = useState(\"\");\n  const [goal, setGoal] = useState(\"maintain\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<MacroResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Macro Nutrient Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your daily macronutrient needs (protein, carbs, fats) based on your goals and activity level. Free macro calculator.');\n    }\n  }, []);\n\n  const calculateMacros = () => {\n    if (!age || !weight || !height || !gender || !activityLevel) return;\n\n    let weightKg = parseFloat(weight);\n    let heightCm = parseFloat(height);\n\n    // Convert units if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592; // pounds to kg\n      heightCm = heightCm * 2.54; // inches to cm\n    }\n\n    // Calculate BMR using Mifflin-St Jeor equation\n    let bmr: number;\n    if (gender === \"male\") {\n      bmr = 10 * weightKg + 6.25 * heightCm - 5 * parseInt(age) + 5;\n    } else {\n      bmr = 10 * weightKg + 6.25 * heightCm - 5 * parseInt(age) - 161;\n    }\n\n    // Activity multipliers\n    const activityMultipliers = {\n      sedentary: 1.2,\n      light: 1.375,\n      moderate: 1.55,\n      active: 1.725,\n      very_active: 1.9\n    };\n\n    // Calculate TDEE\n    const tdee = bmr * activityMultipliers[activityLevel as keyof typeof activityMultipliers];\n\n    // Adjust calories based on goal\n    let targetCalories: number;\n    switch (goal) {\n      case \"lose\":\n        targetCalories = tdee - 500; // 500 calorie deficit for 1 lb/week loss\n        break;\n      case \"gain\":\n        targetCalories = tdee + 500; // 500 calorie surplus for weight gain\n        break;\n      default:\n        targetCalories = tdee; // maintenance\n    }\n\n    // Macro ratios based on goal\n    let proteinRatio: number, carbRatio: number, fatRatio: number;\n    \n    switch (goal) {\n      case \"lose\":\n        proteinRatio = 0.30; // Higher protein for muscle preservation\n        carbRatio = 0.35;\n        fatRatio = 0.35;\n        break;\n      case \"gain\":\n        proteinRatio = 0.25; // Moderate protein for muscle building\n        carbRatio = 0.45;\n        fatRatio = 0.30;\n        break;\n      default: // maintain\n        proteinRatio = 0.25;\n        carbRatio = 0.45;\n        fatRatio = 0.30;\n    }\n\n    // Calculate macros\n    const proteinCalories = targetCalories * proteinRatio;\n    const carbCalories = targetCalories * carbRatio;\n    const fatCalories = targetCalories * fatRatio;\n\n    const proteinGrams = proteinCalories / 4; // 4 calories per gram\n    const carbGrams = carbCalories / 4; // 4 calories per gram\n    const fatGrams = fatCalories / 9; // 9 calories per gram\n\n    // Additional recommendations\n    const fiberGrams = Math.max(25, weightKg * 0.4); // 25g minimum or 0.4g per kg\n    const waterLiters = weightKg * 0.035; // 35ml per kg\n\n    setResult({\n      totalCalories: Math.round(targetCalories),\n      protein: {\n        grams: Math.round(proteinGrams),\n        calories: Math.round(proteinCalories),\n        percentage: Math.round(proteinRatio * 100)\n      },\n      carbs: {\n        grams: Math.round(carbGrams),\n        calories: Math.round(carbCalories),\n        percentage: Math.round(carbRatio * 100)\n      },\n      fats: {\n        grams: Math.round(fatGrams),\n        calories: Math.round(fatCalories),\n        percentage: Math.round(fatRatio * 100)\n      },\n      fiber: Math.round(fiberGrams),\n      water: Math.round(waterLiters * 100) / 100\n    });\n  };\n\n  const clearCalculation = () => {\n    setAge(\"\");\n    setWeight(\"\");\n    setHeight(\"\");\n    setGender(\"\");\n    setActivityLevel(\"\");\n    setGoal(\"maintain\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-apple-alt text-green-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"macro-calc-title\">\n              Macro Nutrient Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"macro-calc-subtitle\">\n              Calculate your daily macronutrient needs (protein, carbs, fats) based on your goals\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-cog text-primary\"></i>\n                  <span>Your Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg, cm)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs, inches)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"age\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Age (years)\n                    </Label>\n                    <Input\n                      id=\"age\"\n                      type=\"number\"\n                      value={age}\n                      onChange={(e) => setAge(e.target.value)}\n                      className=\"w-full\"\n                      placeholder=\"25\"\n                      min=\"1\"\n                      max=\"120\"\n                      data-testid=\"input-age\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"gender\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Gender\n                    </Label>\n                    <Select value={gender} onValueChange={setGender} data-testid=\"select-gender\">\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                    </Label>\n                    <Input\n                      id=\"weight\"\n                      type=\"number\"\n                      value={weight}\n                      onChange={(e) => setWeight(e.target.value)}\n                      className=\"w-full\"\n                      placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-weight\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"height\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Height {unit === \"metric\" ? \"(cm)\" : \"(inches)\"}\n                    </Label>\n                    <Input\n                      id=\"height\"\n                      type=\"number\"\n                      value={height}\n                      onChange={(e) => setHeight(e.target.value)}\n                      className=\"w-full\"\n                      placeholder={unit === \"metric\" ? \"170\" : \"67\"}\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-height\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"activityLevel\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Activity Level\n                  </Label>\n                  <Select value={activityLevel} onValueChange={setActivityLevel} data-testid=\"select-activity\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select activity level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sedentary\">Sedentary (Little/no exercise)</SelectItem>\n                      <SelectItem value=\"light\">Light (1-3 days/week)</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate (3-5 days/week)</SelectItem>\n                      <SelectItem value=\"active\">Active (6-7 days/week)</SelectItem>\n                      <SelectItem value=\"very_active\">Very Active (2x/day, intense)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"goal\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Goal\n                  </Label>\n                  <Select value={goal} onValueChange={setGoal} data-testid=\"select-goal\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select your goal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"lose\">Weight Loss</SelectItem>\n                      <SelectItem value=\"maintain\">Maintain Weight</SelectItem>\n                      <SelectItem value=\"gain\">Weight Gain</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateMacros} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!age || !weight || !height || !gender || !activityLevel}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Macros\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Macro Info */}\n                <div className=\"bg-green-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-green-600\"></i>\n                    <span className=\"font-medium text-green-800\">Macronutrients</span>\n                  </div>\n                  <div className=\"text-green-700 space-y-1 text-xs\">\n                    <p><strong>Protein:</strong> 4 calories/gram - muscle building & repair</p>\n                    <p><strong>Carbs:</strong> 4 calories/gram - primary energy source</p>\n                    <p><strong>Fats:</strong> 9 calories/gram - hormone production & absorption</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-pie text-accent\"></i>\n                  <span>Your Daily Macros</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"macro-results\">\n                    {/* Total Calories */}\n                    <div className=\"text-center bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"total-calories\">\n                        {result.totalCalories} calories\n                      </h2>\n                      <p className=\"text-green-100\">Daily Target</p>\n                    </div>\n\n                    {/* Macro Breakdown */}\n                    <Tabs defaultValue=\"grams\" className=\"space-y-4\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"grams\">Grams</TabsTrigger>\n                        <TabsTrigger value=\"percentages\">Percentages</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"grams\" className=\"space-y-4\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                              <div>\n                                <div className=\"font-medium text-slate-800\">Protein</div>\n                                <div className=\"text-sm text-slate-600\">{result.protein.calories} calories</div>\n                              </div>\n                            </div>\n                            <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"protein-grams\">\n                              {result.protein.grams}g\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-4 bg-orange-50 rounded-xl border border-orange-200\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-4 h-4 bg-orange-500 rounded\"></div>\n                              <div>\n                                <div className=\"font-medium text-slate-800\">Carbohydrates</div>\n                                <div className=\"text-sm text-slate-600\">{result.carbs.calories} calories</div>\n                              </div>\n                            </div>\n                            <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"carbs-grams\">\n                              {result.carbs.grams}g\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-4 bg-purple-50 rounded-xl border border-purple-200\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className=\"w-4 h-4 bg-purple-500 rounded\"></div>\n                              <div>\n                                <div className=\"font-medium text-slate-800\">Fats</div>\n                                <div className=\"text-sm text-slate-600\">{result.fats.calories} calories</div>\n                              </div>\n                            </div>\n                            <div className=\"text-2xl font-bold text-purple-600\" data-testid=\"fats-grams\">\n                              {result.fats.grams}g\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"percentages\" className=\"space-y-4\">\n                        <div className=\"space-y-4\">\n                          {/* Visual Bar Chart */}\n                          <div className=\"space-y-3\">\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"font-medium\">Protein</span>\n                                <span>{result.protein.percentage}%</span>\n                              </div>\n                              <div className=\"h-4 rounded-full overflow-hidden bg-slate-200\">\n                                <div \n                                  className=\"h-full bg-blue-500 rounded-full transition-all duration-500\"\n                                  style={{width: `${result.protein.percentage}%`}}\n                                ></div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"font-medium\">Carbohydrates</span>\n                                <span>{result.carbs.percentage}%</span>\n                              </div>\n                              <div className=\"h-4 rounded-full overflow-hidden bg-slate-200\">\n                                <div \n                                  className=\"h-full bg-orange-500 rounded-full transition-all duration-500\"\n                                  style={{width: `${result.carbs.percentage}%`}}\n                                ></div>\n                              </div>\n                            </div>\n                            \n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between text-sm\">\n                                <span className=\"font-medium\">Fats</span>\n                                <span>{result.fats.percentage}%</span>\n                              </div>\n                              <div className=\"h-4 rounded-full overflow-hidden bg-slate-200\">\n                                <div \n                                  className=\"h-full bg-purple-500 rounded-full transition-all duration-500\"\n                                  style={{width: `${result.fats.percentage}%`}}\n                                ></div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Additional Recommendations */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-cyan-50 rounded-xl border border-cyan-200\">\n                        <div className=\"text-xl font-bold text-cyan-600\" data-testid=\"fiber-grams\">\n                          {result.fiber}g\n                        </div>\n                        <div className=\"text-sm text-cyan-700\">Daily Fiber</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                        <div className=\"text-xl font-bold text-blue-600\" data-testid=\"water-liters\">\n                          {result.water}L\n                        </div>\n                        <div className=\"text-sm text-blue-700\">Daily Water</div>\n                      </div>\n                    </div>\n\n                    {/* Meal Planning Tips */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4\">\n                      <h4 className=\"font-semibold text-yellow-800 mb-3\">Meal Planning Tips</h4>\n                      <div className=\"space-y-2 text-sm text-yellow-700\">\n                        <div className=\"flex justify-between\">\n                          <span>Protein per meal:</span>\n                          <span className=\"font-medium\">{Math.round(result.protein.grams / 3)}g (3 meals)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Carbs per meal:</span>\n                          <span className=\"font-medium\">{Math.round(result.carbs.grams / 3)}g (3 meals)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Fats per meal:</span>\n                          <span className=\"font-medium\">{Math.round(result.fats.grams / 3)}g (3 meals)</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-apple-alt text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your details to calculate your daily macronutrient needs\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Food Sources</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-blue-800 mb-2\">Protein Sources:</h5>\n                    <p>Chicken, fish, eggs, Greek yogurt, beans, lentils, tofu, quinoa</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-orange-800 mb-2\">Carbohydrate Sources:</h5>\n                    <p>Oats, brown rice, sweet potatoes, fruits, vegetables, whole grains</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-purple-800 mb-2\">Healthy Fat Sources:</h5>\n                    <p>Avocados, nuts, olive oil, salmon, chia seeds, coconut oil</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Macro Timing Tips</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-sun text-yellow-500 mt-1\"></i>\n                    <span>Start day with protein and healthy fats</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-dumbbell text-blue-500 mt-1\"></i>\n                    <span>Consume carbs around workouts for energy</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-bed text-purple-500 mt-1\"></i>\n                    <span>Lighter carbs in evening, focus on protein</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-clock text-green-500 mt-1\"></i>\n                    <span>Spread protein intake throughout the day</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-balance-scale text-orange-500 mt-1\"></i>\n                    <span>Balance macros in each meal when possible</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Nutrition Planning Done!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Take a break and enjoy a good laugh while you prep your meals!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26406},"client/src/pages/tools/percentage-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function PercentageCalculator() {\n  // Basic percentage calculation\n  const [value1, setValue1] = useState(\"\");\n  const [value2, setValue2] = useState(\"\");\n  const [percentResult, setPercentResult] = useState<number | null>(null);\n\n  // Percentage increase/decrease\n  const [originalValue, setOriginalValue] = useState(\"\");\n  const [newValue, setNewValue] = useState(\"\");\n  const [changeResult, setChangeResult] = useState<{percentage: number, change: number, type: string} | null>(null);\n\n  // Find value from percentage\n  const [wholeValue, setWholeValue] = useState(\"\");\n  const [percentage, setPercentage] = useState(\"\");\n  const [partResult, setPartResult] = useState<number | null>(null);\n\n  useEffect(() => {\n    document.title = \"Percentage Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Free percentage calculator. Calculate percentages, percentage increase/decrease, and find values from percentages.');\n    }\n  }, []);\n\n  const calculateBasicPercentage = () => {\n    if (!value1 || !value2) return;\n    const result = (parseFloat(value1) / parseFloat(value2)) * 100;\n    setPercentResult(Math.round(result * 100) / 100);\n  };\n\n  const calculatePercentageChange = () => {\n    if (!originalValue || !newValue) return;\n    const original = parseFloat(originalValue);\n    const newVal = parseFloat(newValue);\n    const change = newVal - original;\n    const percentChange = (change / original) * 100;\n    const type = change >= 0 ? \"increase\" : \"decrease\";\n    \n    setChangeResult({\n      percentage: Math.round(Math.abs(percentChange) * 100) / 100,\n      change: Math.round(Math.abs(change) * 100) / 100,\n      type\n    });\n  };\n\n  const calculatePartFromPercentage = () => {\n    if (!wholeValue || !percentage) return;\n    const result = (parseFloat(percentage) / 100) * parseFloat(wholeValue);\n    setPartResult(Math.round(result * 100) / 100);\n  };\n\n  const clearAll = () => {\n    setValue1(\"\");\n    setValue2(\"\");\n    setOriginalValue(\"\");\n    setNewValue(\"\");\n    setWholeValue(\"\");\n    setPercentage(\"\");\n    setPercentResult(null);\n    setChangeResult(null);\n    setPartResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-percentage text-purple-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"percentage-calc-title\">\n              Percentage Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"percentage-calc-subtitle\">\n              Calculate percentages, percentage changes, and find values from percentages\n            </p>\n          </div>\n\n          <Tabs defaultValue=\"basic\" className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-3\">\n              <TabsTrigger value=\"basic\">Basic Percentage</TabsTrigger>\n              <TabsTrigger value=\"change\">Percentage Change</TabsTrigger>\n              <TabsTrigger value=\"value\">Find Value</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"basic\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-calculator text-primary\"></i>\n                    <span>What percentage is X of Y?</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"value1\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Value (X)\n                      </Label>\n                      <Input\n                        id=\"value1\"\n                        type=\"number\"\n                        value={value1}\n                        onChange={(e) => setValue1(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"25\"\n                        data-testid=\"input-value1\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"value2\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Total (Y)\n                      </Label>\n                      <Input\n                        id=\"value2\"\n                        type=\"number\"\n                        value={value2}\n                        onChange={(e) => setValue2(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"100\"\n                        data-testid=\"input-value2\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculateBasicPercentage} \n                    className=\"w-full bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!value1 || !value2}\n                    data-testid=\"button-calculate-basic\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Percentage\n                  </Button>\n\n                  {percentResult !== null && (\n                    <div className=\"bg-gradient-to-r from-purple-500 to-pink-500 rounded-2xl p-6 text-white text-center\" data-testid=\"basic-result\">\n                      <h3 className=\"text-3xl font-bold mb-2\">{percentResult}%</h3>\n                      <p className=\"text-purple-100\">\n                        {value1} is {percentResult}% of {value2}\n                      </p>\n                      <div className=\"mt-4 text-sm text-purple-100\">\n                        Formula: ({value1} ÷ {value2}) × 100 = {percentResult}%\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"change\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-chart-line text-green-600\"></i>\n                    <span>Percentage Increase/Decrease</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"originalValue\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Original Value\n                      </Label>\n                      <Input\n                        id=\"originalValue\"\n                        type=\"number\"\n                        value={originalValue}\n                        onChange={(e) => setOriginalValue(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"100\"\n                        data-testid=\"input-original\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"newValue\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        New Value\n                      </Label>\n                      <Input\n                        id=\"newValue\"\n                        type=\"number\"\n                        value={newValue}\n                        onChange={(e) => setNewValue(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"120\"\n                        data-testid=\"input-new\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculatePercentageChange} \n                    className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                    disabled={!originalValue || !newValue}\n                    data-testid=\"button-calculate-change\"\n                  >\n                    <i className=\"fas fa-chart-line mr-2\"></i>\n                    Calculate Change\n                  </Button>\n\n                  {changeResult && (\n                    <div className={`rounded-2xl p-6 text-white text-center ${changeResult.type === 'increase' ? 'bg-gradient-to-r from-green-500 to-emerald-500' : 'bg-gradient-to-r from-red-500 to-pink-500'}`} data-testid=\"change-result\">\n                      <h3 className=\"text-3xl font-bold mb-2\">\n                        {changeResult.percentage}% {changeResult.type}\n                      </h3>\n                      <p className=\"mb-4\">\n                        {changeResult.type === 'increase' ? 'Increased' : 'Decreased'} by {changeResult.change}\n                      </p>\n                      <div className=\"text-sm opacity-90\">\n                        From {originalValue} to {newValue}\n                      </div>\n                      <div className=\"mt-4 text-sm opacity-75\">\n                        Formula: (({newValue} - {originalValue}) ÷ {originalValue}) × 100\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"value\">\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-search text-orange-600\"></i>\n                    <span>Find Value from Percentage</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"percentage\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Percentage (%)\n                      </Label>\n                      <Input\n                        id=\"percentage\"\n                        type=\"number\"\n                        value={percentage}\n                        onChange={(e) => setPercentage(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"25\"\n                        data-testid=\"input-percentage\"\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"wholeValue\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                        Whole Value\n                      </Label>\n                      <Input\n                        id=\"wholeValue\"\n                        type=\"number\"\n                        value={wholeValue}\n                        onChange={(e) => setWholeValue(e.target.value)}\n                        className=\"w-full text-lg\"\n                        placeholder=\"200\"\n                        data-testid=\"input-whole\"\n                      />\n                    </div>\n                  </div>\n\n                  <Button \n                    onClick={calculatePartFromPercentage} \n                    className=\"w-full bg-orange-600 hover:bg-orange-700 text-white\"\n                    disabled={!percentage || !wholeValue}\n                    data-testid=\"button-calculate-value\"\n                  >\n                    <i className=\"fas fa-search mr-2\"></i>\n                    Find Value\n                  </Button>\n\n                  {partResult !== null && (\n                    <div className=\"bg-gradient-to-r from-orange-500 to-amber-500 rounded-2xl p-6 text-white text-center\" data-testid=\"value-result\">\n                      <h3 className=\"text-3xl font-bold mb-2\">{partResult}</h3>\n                      <p className=\"text-orange-100\">\n                        {percentage}% of {wholeValue} is {partResult}\n                      </p>\n                      <div className=\"mt-4 text-sm text-orange-100\">\n                        Formula: ({percentage} ÷ 100) × {wholeValue} = {partResult}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"mt-8 text-center\">\n            <Button \n              onClick={clearAll} \n              variant=\"outline\"\n              className=\"px-8\"\n              data-testid=\"button-clear-all\"\n            >\n              <i className=\"fas fa-trash-alt mr-2\"></i>\n              Clear All\n            </Button>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Percentage Formulas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Basic Percentage:</h5>\n                    <p className=\"bg-slate-50 p-2 rounded font-mono text-xs\">\n                      (Part ÷ Whole) × 100 = Percentage\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Percentage Change:</h5>\n                    <p className=\"bg-slate-50 p-2 rounded font-mono text-xs\">\n                      ((New - Old) ÷ Old) × 100 = % Change\n                    </p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Find Value:</h5>\n                    <p className=\"bg-slate-50 p-2 rounded font-mono text-xs\">\n                      (Percentage ÷ 100) × Whole = Part\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Uses</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-shopping-cart text-green-500 mt-1\"></i>\n                    <span>Calculate discounts and sales</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-chart-line text-blue-500 mt-1\"></i>\n                    <span>Track progress and growth</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-percent text-purple-500 mt-1\"></i>\n                    <span>Calculate tips and gratuities</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-graduation-cap text-orange-500 mt-1\"></i>\n                    <span>Grade and score calculations</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-coins text-yellow-500 mt-1\"></i>\n                    <span>Interest and financial calculations</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":16321},"client/src/pages/tools/protein-intake-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface ProteinResult {\n  rda: number;\n  activeLifestyle: number;\n  athleticTraining: number;\n  muscleBuilding: number;\n  weightLoss: number;\n  recommended: number;\n  perKg: number;\n  mealDistribution: {\n    breakfast: number;\n    lunch: number;\n    dinner: number;\n    snacks: number;\n  };\n}\n\nexport default function ProteinIntakeCalculator() {\n  const [weight, setWeight] = useState(\"\");\n  const [activityLevel, setActivityLevel] = useState(\"\");\n  const [goal, setGoal] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [result, setResult] = useState<ProteinResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Protein Intake Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your daily protein intake needs based on weight, activity level, and fitness goals. Free protein calculator for optimal nutrition.');\n    }\n  }, []);\n\n  const calculateProteinIntake = () => {\n    if (!weight || !activityLevel || !goal || !age) return;\n\n    let weightKg = parseFloat(weight);\n    const ageNum = parseInt(age);\n\n    // Convert weight to kg if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592;\n    }\n\n    // RDA (Recommended Dietary Allowance) - minimum for health\n    let rda = weightKg * 0.8; // 0.8g per kg body weight\n\n    // Adjust RDA for older adults (higher protein needs)\n    if (ageNum >= 65) {\n      rda = weightKg * 1.0; // 1.0g per kg for older adults\n    }\n\n    // Activity-based recommendations\n    let activeLifestyle: number;\n    let athleticTraining: number;\n    let muscleBuilding: number;\n    let weightLoss: number;\n    let recommended: number;\n\n    switch (activityLevel) {\n      case \"sedentary\":\n        activeLifestyle = weightKg * 1.0;\n        athleticTraining = weightKg * 1.2;\n        muscleBuilding = weightKg * 1.4;\n        weightLoss = weightKg * 1.2;\n        break;\n      case \"light\":\n        activeLifestyle = weightKg * 1.2;\n        athleticTraining = weightKg * 1.4;\n        muscleBuilding = weightKg * 1.6;\n        weightLoss = weightKg * 1.4;\n        break;\n      case \"moderate\":\n        activeLifestyle = weightKg * 1.4;\n        athleticTraining = weightKg * 1.6;\n        muscleBuilding = weightKg * 1.8;\n        weightLoss = weightKg * 1.6;\n        break;\n      case \"active\":\n        activeLifestyle = weightKg * 1.6;\n        athleticTraining = weightKg * 1.8;\n        muscleBuilding = weightKg * 2.0;\n        weightLoss = weightKg * 1.8;\n        break;\n      case \"very_active\":\n        activeLifestyle = weightKg * 1.8;\n        athleticTraining = weightKg * 2.0;\n        muscleBuilding = weightKg * 2.2;\n        weightLoss = weightKg * 2.0;\n        break;\n      default:\n        activeLifestyle = weightKg * 1.2;\n        athleticTraining = weightKg * 1.6;\n        muscleBuilding = weightKg * 1.8;\n        weightLoss = weightKg * 1.4;\n    }\n\n    // Select recommended intake based on goal\n    switch (goal) {\n      case \"general_health\":\n        recommended = activeLifestyle;\n        break;\n      case \"weight_loss\":\n        recommended = weightLoss;\n        break;\n      case \"muscle_gain\":\n        recommended = muscleBuilding;\n        break;\n      case \"athletic_performance\":\n        recommended = athleticTraining;\n        break;\n      default:\n        recommended = activeLifestyle;\n    }\n\n    // Meal distribution (based on optimal protein synthesis)\n    const mealDistribution = {\n      breakfast: Math.round(recommended * 0.25),\n      lunch: Math.round(recommended * 0.30),\n      dinner: Math.round(recommended * 0.30),\n      snacks: Math.round(recommended * 0.15)\n    };\n\n    setResult({\n      rda: Math.round(rda),\n      activeLifestyle: Math.round(activeLifestyle),\n      athleticTraining: Math.round(athleticTraining),\n      muscleBuilding: Math.round(muscleBuilding),\n      weightLoss: Math.round(weightLoss),\n      recommended: Math.round(recommended),\n      perKg: Math.round((recommended / weightKg) * 100) / 100,\n      mealDistribution\n    });\n  };\n\n  const clearCalculation = () => {\n    setWeight(\"\");\n    setActivityLevel(\"\");\n    setGoal(\"\");\n    setAge(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-drumstick-bite text-blue-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"protein-calc-title\">\n              Protein Intake Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"protein-calc-subtitle\">\n              Calculate your daily protein needs based on weight, activity level, and fitness goals\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-cog text-primary\"></i>\n                  <span>Your Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                    </Label>\n                    <Input\n                      id=\"weight\"\n                      type=\"number\"\n                      value={weight}\n                      onChange={(e) => setWeight(e.target.value)}\n                      className=\"w-full\"\n                      placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-weight\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"age\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Age (years)\n                    </Label>\n                    <Input\n                      id=\"age\"\n                      type=\"number\"\n                      value={age}\n                      onChange={(e) => setAge(e.target.value)}\n                      className=\"w-full\"\n                      placeholder=\"25\"\n                      min=\"1\"\n                      max=\"120\"\n                      data-testid=\"input-age\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"activityLevel\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Activity Level\n                  </Label>\n                  <Select value={activityLevel} onValueChange={setActivityLevel} data-testid=\"select-activity\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select activity level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sedentary\">Sedentary (Little/no exercise)</SelectItem>\n                      <SelectItem value=\"light\">Light (1-3 days/week)</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate (3-5 days/week)</SelectItem>\n                      <SelectItem value=\"active\">Active (6-7 days/week)</SelectItem>\n                      <SelectItem value=\"very_active\">Very Active (2x/day, intense)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"goal\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Primary Goal\n                  </Label>\n                  <Select value={goal} onValueChange={setGoal} data-testid=\"select-goal\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select your goal\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"general_health\">General Health & Maintenance</SelectItem>\n                      <SelectItem value=\"weight_loss\">Weight Loss</SelectItem>\n                      <SelectItem value=\"muscle_gain\">Muscle Building</SelectItem>\n                      <SelectItem value=\"athletic_performance\">Athletic Performance</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateProteinIntake} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!weight || !activityLevel || !goal || !age}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Protein Needs\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Protein Benefits */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Why Protein Matters</span>\n                  </div>\n                  <ul className=\"text-blue-700 space-y-1 text-xs\">\n                    <li>• Builds and repairs muscle tissue</li>\n                    <li>• Supports immune system function</li>\n                    <li>• Helps maintain healthy weight</li>\n                    <li>• Provides sustained energy</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-accent\"></i>\n                  <span>Your Protein Needs</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"protein-results\">\n                    {/* Recommended Intake */}\n                    <div className=\"text-center bg-gradient-to-r from-blue-500 to-indigo-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"recommended-protein\">\n                        {result.recommended}g\n                      </h2>\n                      <p className=\"text-blue-100 mb-1\">Daily Protein Goal</p>\n                      <p className=\"text-sm text-blue-200\">{result.perKg}g per kg body weight</p>\n                    </div>\n\n                    {/* Different Scenarios */}\n                    <Tabs defaultValue=\"scenarios\" className=\"space-y-4\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"scenarios\">By Goal</TabsTrigger>\n                        <TabsTrigger value=\"meals\">Meal Distribution</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"scenarios\" className=\"space-y-4\">\n                        <div className=\"space-y-3\">\n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">RDA Minimum</div>\n                              <div className=\"text-sm text-slate-600\">Basic health requirements</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-slate-600\" data-testid=\"rda-protein\">\n                              {result.rda}g\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Active Lifestyle</div>\n                              <div className=\"text-sm text-slate-600\">Regular exercise routine</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-green-600\" data-testid=\"active-protein\">\n                              {result.activeLifestyle}g\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Weight Loss</div>\n                              <div className=\"text-sm text-slate-600\">Preserve muscle while losing fat</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-orange-600\" data-testid=\"weightloss-protein\">\n                              {result.weightLoss}g\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Muscle Building</div>\n                              <div className=\"text-sm text-slate-600\">Maximum muscle protein synthesis</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-purple-600\" data-testid=\"muscle-protein\">\n                              {result.muscleBuilding}g\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-slate-800\">Athletic Training</div>\n                              <div className=\"text-sm text-slate-600\">High performance athletes</div>\n                            </div>\n                            <div className=\"text-lg font-bold text-red-600\" data-testid=\"athletic-protein\">\n                              {result.athleticTraining}g\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"meals\" className=\"space-y-4\">\n                        <div className=\"space-y-4\">\n                          <h4 className=\"font-semibold text-slate-800\">Optimal Distribution:</h4>\n                          \n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"text-center p-4 bg-yellow-50 rounded-xl border border-yellow-200\">\n                              <div className=\"text-xl font-bold text-yellow-600\" data-testid=\"breakfast-protein\">\n                                {result.mealDistribution.breakfast}g\n                              </div>\n                              <div className=\"text-sm text-yellow-700\">Breakfast (25%)</div>\n                            </div>\n                            \n                            <div className=\"text-center p-4 bg-green-50 rounded-xl border border-green-200\">\n                              <div className=\"text-xl font-bold text-green-600\" data-testid=\"lunch-protein\">\n                                {result.mealDistribution.lunch}g\n                              </div>\n                              <div className=\"text-sm text-green-700\">Lunch (30%)</div>\n                            </div>\n                            \n                            <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                              <div className=\"text-xl font-bold text-blue-600\" data-testid=\"dinner-protein\">\n                                {result.mealDistribution.dinner}g\n                              </div>\n                              <div className=\"text-sm text-blue-700\">Dinner (30%)</div>\n                            </div>\n                            \n                            <div className=\"text-center p-4 bg-purple-50 rounded-xl border border-purple-200\">\n                              <div className=\"text-xl font-bold text-purple-600\" data-testid=\"snacks-protein\">\n                                {result.mealDistribution.snacks}g\n                              </div>\n                              <div className=\"text-sm text-purple-700\">Snacks (15%)</div>\n                            </div>\n                          </div>\n\n                          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-green-800 mb-3\">Protein Timing Tips</h4>\n                            <ul className=\"space-y-2 text-sm text-green-700\">\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-sun text-green-600 mt-1\"></i>\n                                <span>Start day with protein-rich breakfast</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-dumbbell text-green-600 mt-1\"></i>\n                                <span>Consume 20-30g protein within 2 hours post-workout</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-bed text-green-600 mt-1\"></i>\n                                <span>Include protein in evening meal for overnight recovery</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-clock text-green-600 mt-1\"></i>\n                                <span>Space protein intake evenly throughout the day</span>\n                              </li>\n                            </ul>\n                          </div>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Important Note */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Individual Needs May Vary</p>\n                          <p className=\"text-yellow-700\">\n                            These are general recommendations. Factors like genetics, health conditions, \n                            and specific training goals may affect your protein needs. Consult a \n                            nutritionist for personalized advice.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-drumstick-bite text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your details to calculate your daily protein needs\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">High-Quality Protein Sources</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Complete Proteins (all essential amino acids):</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li><strong>Animal:</strong> Chicken, fish, eggs, dairy, beef</li>\n                      <li><strong>Plant:</strong> Quinoa, soy, chia seeds, hemp seeds</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">High-Protein Foods (per serving):</h5>\n                    <div className=\"space-y-1 text-xs\">\n                      <div className=\"flex justify-between\">\n                        <span>Chicken breast (100g):</span>\n                        <span className=\"font-medium\">31g protein</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Greek yogurt (1 cup):</span>\n                        <span className=\"font-medium\">20g protein</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Eggs (2 large):</span>\n                        <span className=\"font-medium\">12g protein</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Lentils (1 cup cooked):</span>\n                        <span className=\"font-medium\">18g protein</span>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Protein Myths vs Facts</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-red-600 mb-1\">❌ Myth:</h5>\n                    <p className=\"mb-2\">More protein is always better</p>\n                    <h5 className=\"font-medium text-green-600 mb-1\">✅ Fact:</h5>\n                    <p>Excess protein doesn't provide additional benefits and may stress kidneys</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-red-600 mb-1\">❌ Myth:</h5>\n                    <p className=\"mb-2\">Plant proteins are incomplete</p>\n                    <h5 className=\"font-medium text-green-600 mb-1\">✅ Fact:</h5>\n                    <p>Many plant foods contain all essential amino acids</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-red-600 mb-1\">❌ Myth:</h5>\n                    <p className=\"mb-2\">You must eat protein immediately after workout</p>\n                    <h5 className=\"font-medium text-green-600 mb-1\">✅ Fact:</h5>\n                    <p>The \"anabolic window\" is 24+ hours, not 30 minutes</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Protein Goals Set!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Ready to fuel your body? Take a quick laugh break first!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26494},"client/src/pages/tools/random-joke-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface Joke {\n  id: number;\n  setup?: string;\n  delivery?: string;\n  joke?: string;\n  category: string;\n  type: string;\n}\n\nexport default function RandomJokeGenerator() {\n  const [joke, setJoke] = useState<Joke | null>(null);\n  const [category, setCategory] = useState(\"Any\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const categories = [\n    \"Any\", \"Programming\", \"Miscellaneous\", \"Dark\", \"Pun\", \"Spooky\", \"Christmas\"\n  ];\n\n  useEffect(() => {\n    document.title = \"Random Joke Generator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Generate random jokes to brighten your day! Free joke generator with different categories. Get a good laugh anytime.');\n    }\n\n    // Load a joke on page load\n    fetchRandomJoke();\n  }, []);\n\n  const fetchRandomJoke = async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const categoryParam = category === \"Any\" ? \"\" : `/${category}`;\n      const response = await fetch(`https://v2.jokeapi.dev/joke${categoryParam}?blacklistFlags=nsfw,religious,political,racist,sexist,explicit`);\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch joke');\n      }\n\n      const data = await response.json();\n      \n      if (data.error) {\n        throw new Error(data.message || 'Failed to fetch joke');\n      }\n\n      setJoke(data);\n    } catch (err) {\n      setError('Failed to fetch joke. Please try again.');\n      console.error('Error fetching joke:', err);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const shareJoke = () => {\n    if (!joke) return;\n\n    const jokeText = joke.type === \"twopart\" \n      ? `${joke.setup}\\n\\n${joke.delivery}` \n      : joke.joke || '';\n\n    if (navigator.share) {\n      navigator.share({\n        title: 'Check out this joke!',\n        text: jokeText,\n      });\n    } else {\n      navigator.clipboard.writeText(jokeText);\n      alert('Joke copied to clipboard!');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-3xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-yellow-100 to-yellow-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-laugh text-yellow-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"joke-generator-title\">\n              Random Joke Generator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"joke-generator-subtitle\">\n              Need a good laugh? Generate random jokes to brighten your day! 😄\n            </p>\n          </div>\n\n          <Card className=\"bg-white shadow-sm mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-smile text-primary\"></i>\n                <span>Joke Settings</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <label htmlFor=\"category\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                  Joke Category\n                </label>\n                <Select value={category} onValueChange={setCategory} data-testid=\"select-category\">\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a category\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {categories.map((cat) => (\n                      <SelectItem key={cat} value={cat}>\n                        {cat}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <Button \n                  onClick={fetchRandomJoke} \n                  className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                  disabled={isLoading}\n                  data-testid=\"button-get-joke\"\n                >\n                  {isLoading ? (\n                    <>\n                      <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                      Loading...\n                    </>\n                  ) : (\n                    <>\n                      <i className=\"fas fa-dice mr-2\"></i>\n                      Get New Joke\n                    </>\n                  )}\n                </Button>\n                \n                {joke && (\n                  <Button \n                    onClick={shareJoke} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-share-joke\"\n                  >\n                    <i className=\"fas fa-share-alt\"></i>\n                  </Button>\n                )}\n              </div>\n\n              {/* Safe content notice */}\n              <div className=\"bg-green-50 border border-green-200 rounded-xl p-4 text-sm\">\n                <div className=\"flex items-center space-x-2 mb-1\">\n                  <i className=\"fas fa-shield-alt text-green-600\"></i>\n                  <span className=\"font-medium text-green-800\">Family-Friendly Content</span>\n                </div>\n                <p className=\"text-green-700\">\n                  All jokes are filtered to ensure they're appropriate for all audiences. \n                  No offensive, explicit, or inappropriate content.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Joke Display */}\n          <Card className=\"bg-white shadow-sm\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-quote-left text-accent\"></i>\n                <span>Your Joke</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {error ? (\n                <div className=\"text-center py-12\" data-testid=\"error-message\">\n                  <div className=\"w-16 h-16 bg-red-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-exclamation-triangle text-red-500 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-red-600 mb-2\">Oops!</h3>\n                  <p className=\"text-red-500 mb-4\">{error}</p>\n                  <Button \n                    onClick={fetchRandomJoke}\n                    variant=\"outline\"\n                    data-testid=\"button-retry\"\n                  >\n                    Try Again\n                  </Button>\n                </div>\n              ) : joke ? (\n                <div className=\"space-y-6\" data-testid=\"joke-content\">\n                  {joke.type === \"twopart\" ? (\n                    // Two-part joke (setup + delivery)\n                    <div className=\"space-y-4\">\n                      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-6 border border-blue-200\">\n                        <div className=\"flex items-start space-x-3\">\n                          <i className=\"fas fa-comment text-blue-600 mt-1\"></i>\n                          <p className=\"text-lg text-slate-800 font-medium\" data-testid=\"joke-setup\">\n                            {joke.setup}\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 rounded-xl p-6 border border-yellow-200\">\n                        <div className=\"flex items-start space-x-3\">\n                          <i className=\"fas fa-laugh text-yellow-600 mt-1\"></i>\n                          <p className=\"text-lg text-slate-800 font-medium\" data-testid=\"joke-delivery\">\n                            {joke.delivery}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    // Single joke\n                    <div className=\"bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl p-6 border border-purple-200\">\n                      <div className=\"flex items-start space-x-3\">\n                        <i className=\"fas fa-grin text-purple-600 mt-1 text-xl\"></i>\n                        <p className=\"text-lg text-slate-800 font-medium\" data-testid=\"joke-single\">\n                          {joke.joke}\n                        </p>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Joke metadata */}\n                  <div className=\"flex items-center justify-between text-sm text-slate-500 pt-4 border-t\">\n                    <div className=\"flex items-center space-x-4\">\n                      <span className=\"flex items-center space-x-1\">\n                        <i className=\"fas fa-tag\"></i>\n                        <span data-testid=\"joke-category\">{joke.category}</span>\n                      </span>\n                      <span className=\"flex items-center space-x-1\">\n                        <i className=\"fas fa-list\"></i>\n                        <span>{joke.type === \"twopart\" ? \"Two-part\" : \"Single\"}</span>\n                      </span>\n                    </div>\n                    <span className=\"flex items-center space-x-1\">\n                      <i className=\"fas fa-hashtag\"></i>\n                      <span>ID: {joke.id}</span>\n                    </span>\n                  </div>\n\n                  {/* Rating */}\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-slate-600 mb-3\">Did this joke make you smile?</p>\n                    <div className=\"flex justify-center space-x-2\">\n                      <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                        <i className=\"fas fa-thumbs-up mr-1\"></i>\n                        Yes!\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                        <i className=\"fas fa-meh mr-1\"></i>\n                        Meh\n                      </Button>\n                      <Button variant=\"outline\" size=\"sm\" className=\"text-xs\">\n                        <i className=\"fas fa-thumbs-down mr-1\"></i>\n                        Not really\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ) : isLoading ? (\n                <div className=\"text-center py-12\" data-testid=\"loading-message\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-spinner fa-spin text-blue-500 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Loading Joke...</h3>\n                  <p className=\"text-slate-500\">\n                    Searching for the perfect joke to make you laugh!\n                  </p>\n                </div>\n              ) : (\n                <div className=\"text-center py-12\" data-testid=\"no-joke\">\n                  <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-smile text-slate-400 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Ready for a Laugh?</h3>\n                  <p className=\"text-slate-500\">\n                    Click \"Get New Joke\" to start the fun!\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Fun Facts */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Why Laughter is Good for You</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-heart text-red-500 mt-1\"></i>\n                    <span>Reduces stress and releases endorphins</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-shield-alt text-blue-500 mt-1\"></i>\n                    <span>Boosts immune system function</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-users text-green-500 mt-1\"></i>\n                    <span>Improves social connections</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-brain text-purple-500 mt-1\"></i>\n                    <span>Enhances mental well-being</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-dumbbell text-orange-500 mt-1\"></i>\n                    <span>Provides light physical exercise</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Joke Categories Explained</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-slate-600\">\n                  <div>\n                    <span className=\"font-medium text-slate-800\">Programming:</span>\n                    <p>Jokes about coding, software, and tech</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-slate-800\">Pun:</span>\n                    <p>Wordplay and clever language jokes</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-slate-800\">Miscellaneous:</span>\n                    <p>General humor and everyday jokes</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-slate-800\">Spooky:</span>\n                    <p>Halloween and scary-themed humor</p>\n                  </div>\n                  <div>\n                    <span className=\"font-medium text-slate-800\">Christmas:</span>\n                    <p>Holiday and festive jokes</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Back to Tools */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-8\">\n                <h3 className=\"text-2xl font-bold mb-4\">Need More Tools?</h3>\n                <p className=\"mb-6 text-yellow-100\">\n                  Check out our collection of useful calculators and converters!\n                </p>\n                <a \n                  href=\"/\" \n                  className=\"bg-white text-orange-600 px-6 py-3 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-back-to-tools\"\n                >\n                  <i className=\"fas fa-calculator mr-2\"></i>\n                  Back to Tools\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":16153},"client/src/pages/tools/simple-interest-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface SimpleInterestResult {\n  interest: number;\n  totalAmount: number;\n  monthlyInterest: number;\n  yearlyBreakdown: { year: number; interest: number; total: number }[];\n}\n\nexport default function SimpleInterestCalculator() {\n  const [principal, setPrincipal] = useState(\"\");\n  const [rate, setRate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [timeUnit, setTimeUnit] = useState(\"years\");\n  const [result, setResult] = useState<SimpleInterestResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Simple Interest Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate simple interest on loans and investments. Free simple interest calculator with detailed breakdown and yearly projections.');\n    }\n  }, []);\n\n  const calculateSimpleInterest = () => {\n    if (!principal || !rate || !time) return;\n\n    const P = parseFloat(principal);\n    const R = parseFloat(rate);\n    let T = parseFloat(time);\n\n    // Convert time to years if needed\n    if (timeUnit === \"months\") {\n      T = T / 12;\n    } else if (timeUnit === \"days\") {\n      T = T / 365;\n    }\n\n    // Simple Interest Formula: SI = (P × R × T) / 100\n    const interest = (P * R * T) / 100;\n    const totalAmount = P + interest;\n    const monthlyInterest = interest / (T * 12);\n\n    // Yearly breakdown\n    const yearlyBreakdown: { year: number; interest: number; total: number }[] = [];\n    const yearsToShow = Math.min(Math.ceil(T), 10); // Show max 10 years\n    \n    for (let year = 1; year <= yearsToShow; year++) {\n      const yearlyInterest = (P * R * year) / 100;\n      const yearlyTotal = P + yearlyInterest;\n      yearlyBreakdown.push({\n        year,\n        interest: Math.round(yearlyInterest * 100) / 100,\n        total: Math.round(yearlyTotal * 100) / 100\n      });\n    }\n\n    setResult({\n      interest: Math.round(interest * 100) / 100,\n      totalAmount: Math.round(totalAmount * 100) / 100,\n      monthlyInterest: Math.round(monthlyInterest * 100) / 100,\n      yearlyBreakdown\n    });\n  };\n\n  const clearCalculation = () => {\n    setPrincipal(\"\");\n    setRate(\"\");\n    setTime(\"\");\n    setTimeUnit(\"years\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-percent text-blue-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"simple-interest-title\">\n              Simple Interest Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"simple-interest-subtitle\">\n              Calculate simple interest on loans, deposits, and investments\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calculator text-primary\"></i>\n                  <span>Loan/Investment Details</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"principal\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Principal Amount ($)\n                  </Label>\n                  <Input\n                    id=\"principal\"\n                    type=\"number\"\n                    value={principal}\n                    onChange={(e) => setPrincipal(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"10000\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    data-testid=\"input-principal\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"rate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Annual Interest Rate (%)\n                  </Label>\n                  <Input\n                    id=\"rate\"\n                    type=\"number\"\n                    value={rate}\n                    onChange={(e) => setRate(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"5\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.01\"\n                    data-testid=\"input-rate\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"time\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Time Period\n                    </Label>\n                    <Input\n                      id=\"time\"\n                      type=\"number\"\n                      value={time}\n                      onChange={(e) => setTime(e.target.value)}\n                      className=\"w-full text-lg\"\n                      placeholder=\"2\"\n                      min=\"0\"\n                      step=\"0.1\"\n                      data-testid=\"input-time\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"timeUnit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Time Unit\n                    </Label>\n                    <Select value={timeUnit} onValueChange={setTimeUnit} data-testid=\"select-time-unit\">\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"years\">Years</SelectItem>\n                        <SelectItem value=\"months\">Months</SelectItem>\n                        <SelectItem value=\"days\">Days</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateSimpleInterest} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!principal || !rate || !time}\n                    data-testid=\"button-calculate-interest\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Interest\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-interest\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Formula Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Simple Interest Formula</span>\n                  </div>\n                  <div className=\"text-blue-700\">\n                    <p className=\"font-mono bg-white p-2 rounded text-center\">\n                      SI = (P × R × T) ÷ 100\n                    </p>\n                    <div className=\"mt-2 text-xs\">\n                      <p><strong>SI</strong> = Simple Interest</p>\n                      <p><strong>P</strong> = Principal Amount</p>\n                      <p><strong>R</strong> = Annual Interest Rate (%)</p>\n                      <p><strong>T</strong> = Time Period (years)</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-accent\"></i>\n                  <span>Interest Calculation</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"interest-results\">\n                    {/* Main Results */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-green-50 rounded-xl border border-green-200\">\n                        <div className=\"text-2xl font-bold text-green-600\" data-testid=\"interest-amount\">\n                          ${result.interest.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-green-700\">Interest Earned</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                        <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"total-amount\">\n                          ${result.totalAmount.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-blue-700\">Total Amount</div>\n                      </div>\n                    </div>\n\n                    {/* Summary */}\n                    <div className=\"bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl p-6 text-white\">\n                      <h3 className=\"text-xl font-bold mb-4 text-center\">Investment Summary</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between\">\n                          <span>Principal:</span>\n                          <span>${parseFloat(principal).toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Interest Rate:</span>\n                          <span>{rate}% per year</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Time Period:</span>\n                          <span>{time} {timeUnit}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Interest Earned:</span>\n                          <span>${result.interest.toLocaleString()}</span>\n                        </div>\n                        <div className=\"border-t border-purple-300 pt-2\">\n                          <div className=\"flex justify-between font-bold text-lg\">\n                            <span>Final Amount:</span>\n                            <span>${result.totalAmount.toLocaleString()}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Monthly Interest */}\n                    <div className=\"bg-orange-50 border border-orange-200 rounded-xl p-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <h4 className=\"font-semibold text-orange-800\">Monthly Interest</h4>\n                          <p className=\"text-sm text-orange-700\">Average per month</p>\n                        </div>\n                        <div className=\"text-xl font-bold text-orange-600\" data-testid=\"monthly-interest\">\n                          ${result.monthlyInterest.toLocaleString()}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Yearly Breakdown */}\n                    {result.yearlyBreakdown.length > 1 && (\n                      <div className=\"bg-slate-50 rounded-xl p-4\">\n                        <h4 className=\"font-semibold text-slate-800 mb-3\">Yearly Breakdown</h4>\n                        <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n                          {result.yearlyBreakdown.map((year) => (\n                            <div key={year.year} className=\"flex justify-between items-center py-1 text-sm\">\n                              <span className=\"font-medium\">Year {year.year}:</span>\n                              <div className=\"text-right\">\n                                <div className=\"text-green-600\">Interest: ${year.interest.toLocaleString()}</div>\n                                <div className=\"text-slate-600\">Total: ${year.total.toLocaleString()}</div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-percent text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Investment Details</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in the principal, rate, and time to calculate simple interest\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Simple vs Compound Interest</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Simple Interest:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Interest calculated only on principal</li>\n                      <li>• Linear growth over time</li>\n                      <li>• Easier to calculate</li>\n                      <li>• Common in short-term loans</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Compound Interest:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• Interest calculated on principal + accrued interest</li>\n                      <li>• Exponential growth over time</li>\n                      <li>• More complex calculations</li>\n                      <li>• Common in savings accounts</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Applications</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-handshake text-blue-500 mt-1\"></i>\n                    <span>Personal loans and credit</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-car text-green-500 mt-1\"></i>\n                    <span>Auto loans (some lenders)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-graduation-cap text-purple-500 mt-1\"></i>\n                    <span>Student loans (certain types)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-piggy-bank text-orange-500 mt-1\"></i>\n                    <span>Fixed deposits (some banks)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-chart-line text-red-500 mt-1\"></i>\n                    <span>Government bonds</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17194},"client/src/pages/tools/sleep-cycle-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface SleepTime {\n  time: string;\n  cycles: number;\n  quality: string;\n  description: string;\n}\n\ninterface SleepResult {\n  targetBedtime: string;\n  wakeUpTimes: SleepTime[];\n  bedtimes: SleepTime[];\n  idealSleepDuration: number;\n  cyclesCompleted: number;\n}\n\nexport default function SleepCycleCalculator() {\n  const [calculationType, setCalculationType] = useState(\"wake_up\");\n  const [wakeUpTime, setWakeUpTime] = useState(\"\");\n  const [bedTime, setBedTime] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [result, setResult] = useState<SleepResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Sleep Cycle Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate optimal sleep and wake times based on 90-minute sleep cycles. Improve sleep quality with our free sleep calculator.');\n    }\n  }, []);\n\n  const calculateSleepCycles = () => {\n    if (calculationType === \"wake_up\" && !wakeUpTime) return;\n    if (calculationType === \"bed_time\" && !bedTime) return;\n    if (!age) return;\n\n    const ageNum = parseInt(age);\n    const cycleLength = 90; // minutes\n    const fallAsleepTime = 15; // average time to fall asleep\n\n    // Recommended sleep duration by age\n    let recommendedHours: number;\n    if (ageNum < 1) recommendedHours = 14;\n    else if (ageNum <= 2) recommendedHours = 12;\n    else if (ageNum <= 5) recommendedHours = 11;\n    else if (ageNum <= 13) recommendedHours = 10;\n    else if (ageNum <= 17) recommendedHours = 9;\n    else if (ageNum <= 64) recommendedHours = 8;\n    else recommendedHours = 7;\n\n    const recommendedMinutes = recommendedHours * 60;\n\n    let targetTime: Date;\n    let calculatedTimes: SleepTime[] = [];\n\n    if (calculationType === \"wake_up\") {\n      // Calculate bedtimes for given wake up time\n      const [hours, minutes] = wakeUpTime.split(':').map(Number);\n      targetTime = new Date();\n      targetTime.setHours(hours, minutes, 0, 0);\n\n      // Calculate optimal bedtimes (working backwards)\n      const cycleCounts = [4, 5, 6]; // Most common optimal cycle counts\n      \n      cycleCounts.forEach(cycles => {\n        const totalSleepTime = cycles * cycleLength;\n        const timeToGoToBed = totalSleepTime + fallAsleepTime;\n        \n        const bedtime = new Date(targetTime.getTime() - timeToGoToBed * 60000);\n        \n        // Handle previous day\n        if (bedtime.getDate() !== targetTime.getDate()) {\n          bedtime.setDate(bedtime.getDate() + 1);\n        }\n\n        const quality = cycles === 5 ? \"Optimal\" : cycles === 6 ? \"Good\" : \"Minimum\";\n        const description = getQualityDescription(cycles);\n\n        calculatedTimes.push({\n          time: bedtime.toLocaleTimeString('en-US', { \n            hour: '2-digit', \n            minute: '2-digit',\n            hour12: false \n          }),\n          cycles,\n          quality,\n          description\n        });\n      });\n\n      setResult({\n        targetBedtime: \"\",\n        wakeUpTimes: [],\n        bedtimes: calculatedTimes,\n        idealSleepDuration: recommendedHours,\n        cyclesCompleted: 5\n      });\n\n    } else {\n      // Calculate wake up times for given bedtime\n      const [hours, minutes] = bedTime.split(':').map(Number);\n      targetTime = new Date();\n      targetTime.setHours(hours, minutes, 0, 0);\n      \n      // Add fall asleep time\n      const sleepStartTime = new Date(targetTime.getTime() + fallAsleepTime * 60000);\n\n      const cycleCounts = [4, 5, 6]; // Most common optimal cycle counts\n\n      cycleCounts.forEach(cycles => {\n        const totalSleepTime = cycles * cycleLength;\n        const wakeTime = new Date(sleepStartTime.getTime() + totalSleepTime * 60000);\n        \n        // Handle next day\n        if (wakeTime.getDate() !== targetTime.getDate()) {\n          wakeTime.setDate(wakeTime.getDate() + 1);\n        }\n\n        const quality = cycles === 5 ? \"Optimal\" : cycles === 6 ? \"Good\" : \"Minimum\";\n        const description = getQualityDescription(cycles);\n\n        calculatedTimes.push({\n          time: wakeTime.toLocaleTimeString('en-US', { \n            hour: '2-digit', \n            minute: '2-digit',\n            hour12: false \n          }),\n          cycles,\n          quality,\n          description\n        });\n      });\n\n      setResult({\n        targetBedtime: targetTime.toLocaleTimeString('en-US', { \n          hour: '2-digit', \n          minute: '2-digit',\n          hour12: false \n        }),\n        wakeUpTimes: calculatedTimes,\n        bedtimes: [],\n        idealSleepDuration: recommendedHours,\n        cyclesCompleted: 5\n      });\n    }\n  };\n\n  const getQualityDescription = (cycles: number): string => {\n    switch (cycles) {\n      case 4: return \"Short but complete cycles - minimum rest\";\n      case 5: return \"Ideal balance of rest and alertness\";\n      case 6: return \"Longer rest - good for recovery days\";\n      default: return \"Complete sleep cycles\";\n    }\n  };\n\n  const clearCalculation = () => {\n    setWakeUpTime(\"\");\n    setBedTime(\"\");\n    setAge(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-indigo-100 to-indigo-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-bed text-indigo-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"sleep-calc-title\">\n              Sleep Cycle Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"sleep-calc-subtitle\">\n              Calculate optimal sleep and wake times based on 90-minute sleep cycles for better rest\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-primary\"></i>\n                  <span>Sleep Schedule</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"calculationType\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    What would you like to calculate?\n                  </Label>\n                  <Select value={calculationType} onValueChange={setCalculationType} data-testid=\"select-calc-type\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select calculation type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"wake_up\">I know when I want to wake up</SelectItem>\n                      <SelectItem value=\"bed_time\">I know when I'm going to bed</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"age\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Age (years)\n                  </Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    value={age}\n                    onChange={(e) => setAge(e.target.value)}\n                    className=\"w-full\"\n                    placeholder=\"25\"\n                    min=\"1\"\n                    max=\"120\"\n                    data-testid=\"input-age\"\n                  />\n                  <p className=\"text-xs text-slate-500 mt-1\">\n                    Used to calculate recommended sleep duration\n                  </p>\n                </div>\n\n                {calculationType === \"wake_up\" ? (\n                  <div>\n                    <Label htmlFor=\"wakeUpTime\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Desired Wake Up Time\n                    </Label>\n                    <Input\n                      id=\"wakeUpTime\"\n                      type=\"time\"\n                      value={wakeUpTime}\n                      onChange={(e) => setWakeUpTime(e.target.value)}\n                      className=\"w-full text-lg\"\n                      data-testid=\"input-wake-time\"\n                    />\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      We'll calculate when you should go to bed\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <Label htmlFor=\"bedTime\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Planned Bedtime\n                    </Label>\n                    <Input\n                      id=\"bedTime\"\n                      type=\"time\"\n                      value={bedTime}\n                      onChange={(e) => setBedTime(e.target.value)}\n                      className=\"w-full text-lg\"\n                      data-testid=\"input-bed-time\"\n                    />\n                    <p className=\"text-xs text-slate-500 mt-1\">\n                      We'll calculate optimal wake up times\n                    </p>\n                  </div>\n                )}\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateSleepCycles} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!age || (calculationType === \"wake_up\" ? !wakeUpTime : !bedTime)}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Sleep Times\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Sleep Cycle Info */}\n                <div className=\"bg-indigo-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-indigo-600\"></i>\n                    <span className=\"font-medium text-indigo-800\">About Sleep Cycles</span>\n                  </div>\n                  <div className=\"text-indigo-700 space-y-1 text-xs\">\n                    <p>• Each sleep cycle lasts about 90 minutes</p>\n                    <p>• Waking up at the end of a cycle feels more refreshing</p>\n                    <p>• Most adults need 4-6 complete cycles per night</p>\n                    <p>• It takes about 15 minutes to fall asleep</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-accent\"></i>\n                  <span>Optimal Sleep Times</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"sleep-results\">\n                    {/* Recommended Sleep Duration */}\n                    <div className=\"text-center bg-gradient-to-r from-indigo-500 to-purple-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"ideal-sleep-duration\">\n                        {result.idealSleepDuration} hours\n                      </h2>\n                      <p className=\"text-indigo-100\">Recommended for your age</p>\n                    </div>\n\n                    {/* Optimal Times */}\n                    <Tabs defaultValue=\"times\" className=\"space-y-4\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"times\">\n                          {calculationType === \"wake_up\" ? \"Bedtimes\" : \"Wake Times\"}\n                        </TabsTrigger>\n                        <TabsTrigger value=\"tips\">Sleep Tips</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"times\" className=\"space-y-4\">\n                        <div className=\"space-y-3\">\n                          <h4 className=\"font-semibold text-slate-800\">\n                            {calculationType === \"wake_up\" \n                              ? `To wake up at ${wakeUpTime}, go to bed at:` \n                              : `Going to bed at ${result.targetBedtime}, wake up at:`\n                            }\n                          </h4>\n                          \n                          {(calculationType === \"wake_up\" ? result.bedtimes : result.wakeUpTimes).map((timeSlot, index) => (\n                            <div key={index} className=\"flex justify-between items-center p-4 bg-slate-50 rounded-xl border hover:shadow-md transition-shadow\">\n                              <div>\n                                <div className=\"font-bold text-lg text-slate-800\" data-testid={`time-${index}`}>\n                                  {timeSlot.time}\n                                </div>\n                                <div className=\"text-sm text-slate-600\">\n                                  {timeSlot.cycles} cycles • {timeSlot.quality}\n                                </div>\n                                <div className=\"text-xs text-slate-500\">\n                                  {timeSlot.description}\n                                </div>\n                              </div>\n                              <div className=\"text-right\">\n                                <div className={`px-3 py-1 rounded-full text-xs font-medium ${\n                                  timeSlot.quality === \"Optimal\" \n                                    ? \"bg-green-100 text-green-800\" \n                                    : timeSlot.quality === \"Good\"\n                                    ? \"bg-blue-100 text-blue-800\"\n                                    : \"bg-yellow-100 text-yellow-800\"\n                                }`}>\n                                  {timeSlot.quality}\n                                </div>\n                                <div className=\"text-xs text-slate-500 mt-1\">\n                                  {(timeSlot.cycles * 1.5).toFixed(1)}h sleep\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n                        </div>\n\n                        <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                          <h4 className=\"font-semibold text-green-800 mb-2\">💡 Best Choice</h4>\n                          <p className=\"text-sm text-green-700\">\n                            The <strong>5-cycle option</strong> is typically optimal for most adults, \n                            providing 7.5 hours of sleep plus time to fall asleep.\n                          </p>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"tips\" className=\"space-y-4\">\n                        <div className=\"space-y-4\">\n                          <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-blue-800 mb-3\">Better Sleep Hygiene</h4>\n                            <ul className=\"space-y-2 text-sm text-blue-700\">\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-mobile-alt text-blue-600 mt-1\"></i>\n                                <span>No screens 1 hour before bedtime</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-thermometer-half text-blue-600 mt-1\"></i>\n                                <span>Keep room cool (60-67°F / 15-19°C)</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-eye-slash text-blue-600 mt-1\"></i>\n                                <span>Dark, quiet environment</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-coffee text-blue-600 mt-1\"></i>\n                                <span>No caffeine 6+ hours before bed</span>\n                              </li>\n                              <li className=\"flex items-start space-x-2\">\n                                <i className=\"fas fa-clock text-blue-600 mt-1\"></i>\n                                <span>Consistent sleep schedule, even on weekends</span>\n                              </li>\n                            </ul>\n                          </div>\n\n                          <div className=\"bg-purple-50 border border-purple-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-purple-800 mb-3\">Pre-Sleep Routine</h4>\n                            <div className=\"space-y-2 text-sm text-purple-700\">\n                              <div className=\"flex justify-between\">\n                                <span>2 hours before:</span>\n                                <span className=\"font-medium\">Last large meal</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>1 hour before:</span>\n                                <span className=\"font-medium\">No screens, dim lights</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>30 min before:</span>\n                                <span className=\"font-medium\">Relaxing activity (reading, bath)</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>15 min before:</span>\n                                <span className=\"font-medium\">Deep breathing, meditation</span>\n                              </div>\n                            </div>\n                          </div>\n\n                          <div className=\"bg-orange-50 border border-orange-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-orange-800 mb-3\">If You Can't Fall Asleep</h4>\n                            <ul className=\"space-y-1 text-sm text-orange-700\">\n                              <li>• Don't check the time - increases anxiety</li>\n                              <li>• Try the 4-7-8 breathing technique</li>\n                              <li>• Progressive muscle relaxation</li>\n                              <li>• If awake 20+ minutes, get up and do quiet activity</li>\n                              <li>• Return to bed when sleepy</li>\n                            </ul>\n                          </div>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Sleep Quality Note */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Individual Variation</p>\n                          <p className=\"text-yellow-700\">\n                            Sleep cycles can vary between 70-120 minutes per person. These calculations \n                            use the average 90-minute cycle. Pay attention to how you feel and adjust \n                            timing as needed for your personal sleep patterns.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-bed text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Sleep Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your age and desired time to calculate optimal sleep schedule\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Sleep Stages Explained</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">NREM Stage 1 (5%):</h5>\n                    <p>Light sleep, easy to wake, transition from wake to sleep</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">NREM Stage 2 (45%):</h5>\n                    <p>Deeper sleep, heart rate and breathing slow, body temperature drops</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">NREM Stage 3 (25%):</h5>\n                    <p>Deep sleep, physical restoration, growth hormone release</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">REM Sleep (25%):</h5>\n                    <p>Dreams, memory consolidation, brain restoration and learning</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Sleep Needs by Age</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-slate-600\">\n                  <div className=\"flex justify-between\">\n                    <span>Newborn (0-3 months):</span>\n                    <span className=\"font-medium\">14-17 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Infant (4-11 months):</span>\n                    <span className=\"font-medium\">12-15 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Toddler (1-2 years):</span>\n                    <span className=\"font-medium\">11-14 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Preschool (3-5 years):</span>\n                    <span className=\"font-medium\">10-13 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>School age (6-13 years):</span>\n                    <span className=\"font-medium\">9-11 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Teen (14-17 years):</span>\n                    <span className=\"font-medium\">8-10 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Young adult (18-25):</span>\n                    <span className=\"font-medium\">7-9 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Adult (26-64 years):</span>\n                    <span className=\"font-medium\">7-9 hours</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Older adult (65+ years):</span>\n                    <span className=\"font-medium\">7-8 hours</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Sweet Dreams!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Sleep schedule optimized! Need a quick laugh before bedtime?\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26366},"client/src/pages/tools/step-calorie-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface StepCalorieResult {\n  steps: number;\n  calories: number;\n  distance: number;\n  duration: number;\n  caloriesPerStep: number;\n  weeklyGoal: number;\n  monthlyGoal: number;\n}\n\nexport default function StepCalorieConverter() {\n  const [inputType, setInputType] = useState(\"steps\");\n  const [steps, setSteps] = useState(\"\");\n  const [calories, setCalories] = useState(\"\");\n  const [weight, setWeight] = useState(\"\");\n  const [height, setHeight] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [pace, setPace] = useState(\"moderate\");\n  const [result, setResult] = useState<StepCalorieResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Step to Calorie Converter - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert steps to calories burned or calories to steps needed. Free step counter and calorie converter with distance calculations.');\n    }\n  }, []);\n\n  const calculateStepsCalories = () => {\n    if (!weight || !height) return;\n\n    let weightKg = parseFloat(weight);\n    let heightCm = parseFloat(height);\n\n    // Convert units if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592; // pounds to kg\n      heightCm = heightCm * 2.54; // inches to cm\n    }\n\n    // Calculate stride length based on height\n    const strideLength = heightCm * 0.43; // cm, approximate formula\n\n    // Pace multipliers for calories burned\n    const paceMultipliers = {\n      slow: 0.04,      // 2 mph\n      moderate: 0.045, // 3 mph\n      brisk: 0.05,     // 3.5 mph\n      fast: 0.055      // 4+ mph\n    };\n\n    // Base calories per step calculation\n    // Formula: weight(kg) × pace multiplier\n    const caloriesPerStep = weightKg * paceMultipliers[pace as keyof typeof paceMultipliers];\n\n    let calculatedSteps: number;\n    let calculatedCalories: number;\n\n    if (inputType === \"steps\") {\n      calculatedSteps = parseFloat(steps);\n      calculatedCalories = calculatedSteps * caloriesPerStep;\n    } else {\n      calculatedCalories = parseFloat(calories);\n      calculatedSteps = calculatedCalories / caloriesPerStep;\n    }\n\n    // Calculate distance\n    const distanceMeters = calculatedSteps * (strideLength / 100); // Convert cm to meters\n    const distanceKm = distanceMeters / 1000;\n\n    // Calculate duration (assuming average pace)\n    const paceMinutesPerKm = {\n      slow: 20,      // 3 km/h\n      moderate: 16,  // 3.75 km/h\n      brisk: 13,     // 4.6 km/h\n      fast: 11       // 5.5 km/h\n    };\n\n    const duration = distanceKm * paceMinutesPerKm[pace as keyof typeof paceMinutesPerKm];\n\n    // Weekly and monthly goals\n    const weeklyGoal = calculatedCalories * 7;\n    const monthlyGoal = calculatedCalories * 30;\n\n    setResult({\n      steps: Math.round(calculatedSteps),\n      calories: Math.round(calculatedCalories * 100) / 100,\n      distance: Math.round(distanceKm * 100) / 100,\n      duration: Math.round(duration),\n      caloriesPerStep: Math.round(caloriesPerStep * 10000) / 10000,\n      weeklyGoal: Math.round(weeklyGoal),\n      monthlyGoal: Math.round(monthlyGoal)\n    });\n  };\n\n  const clearCalculation = () => {\n    setSteps(\"\");\n    setCalories(\"\");\n    setWeight(\"\");\n    setHeight(\"\");\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-walking text-green-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"step-converter-title\">\n              Step to Calorie Converter\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"step-converter-subtitle\">\n              Convert steps to calories burned or find how many steps you need for a calorie goal\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user-cog text-primary\"></i>\n                  <span>Conversion Settings</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"inputType\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    What would you like to calculate?\n                  </Label>\n                  <Select value={inputType} onValueChange={setInputType} data-testid=\"select-input-type\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select conversion type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"steps\">Steps → Calories (I have steps, want calories)</SelectItem>\n                      <SelectItem value=\"calories\">Calories → Steps (I have calorie goal, want steps)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg, cm)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs, inches)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                    </Label>\n                    <Input\n                      id=\"weight\"\n                      type=\"number\"\n                      value={weight}\n                      onChange={(e) => setWeight(e.target.value)}\n                      className=\"w-full\"\n                      placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-weight\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"height\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Height {unit === \"metric\" ? \"(cm)\" : \"(inches)\"}\n                    </Label>\n                    <Input\n                      id=\"height\"\n                      type=\"number\"\n                      value={height}\n                      onChange={(e) => setHeight(e.target.value)}\n                      className=\"w-full\"\n                      placeholder={unit === \"metric\" ? \"170\" : \"67\"}\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-height\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"pace\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Walking Pace\n                  </Label>\n                  <Select value={pace} onValueChange={setPace} data-testid=\"select-pace\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select walking pace\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"slow\">Slow (2 mph / 3.2 km/h)</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate (3 mph / 4.8 km/h)</SelectItem>\n                      <SelectItem value=\"brisk\">Brisk (3.5 mph / 5.6 km/h)</SelectItem>\n                      <SelectItem value=\"fast\">Fast (4+ mph / 6.4+ km/h)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {inputType === \"steps\" ? (\n                  <div>\n                    <Label htmlFor=\"steps\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Number of Steps\n                    </Label>\n                    <Input\n                      id=\"steps\"\n                      type=\"number\"\n                      value={steps}\n                      onChange={(e) => setSteps(e.target.value)}\n                      className=\"w-full text-lg\"\n                      placeholder=\"10000\"\n                      min=\"1\"\n                      data-testid=\"input-steps\"\n                    />\n                  </div>\n                ) : (\n                  <div>\n                    <Label htmlFor=\"calories\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Target Calories to Burn\n                    </Label>\n                    <Input\n                      id=\"calories\"\n                      type=\"number\"\n                      value={calories}\n                      onChange={(e) => setCalories(e.target.value)}\n                      className=\"w-full text-lg\"\n                      placeholder=\"300\"\n                      min=\"1\"\n                      step=\"0.1\"\n                      data-testid=\"input-calories\"\n                    />\n                  </div>\n                )}\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateStepsCalories} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!weight || !height || (inputType === \"steps\" ? !steps : !calories)}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Quick Tips */}\n                <div className=\"bg-green-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-lightbulb text-green-600\"></i>\n                    <span className=\"font-medium text-green-800\">Daily Step Goals</span>\n                  </div>\n                  <div className=\"text-green-700 space-y-1 text-xs\">\n                    <p><strong>Sedentary:</strong> 5,000 steps/day</p>\n                    <p><strong>Somewhat Active:</strong> 7,500 steps/day</p>\n                    <p><strong>Active:</strong> 10,000 steps/day</p>\n                    <p><strong>Highly Active:</strong> 12,500+ steps/day</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-accent\"></i>\n                  <span>Conversion Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"step-calorie-results\">\n                    {/* Main Results */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl p-6 text-white\">\n                        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"result-steps\">\n                          {result.steps.toLocaleString()}\n                        </h2>\n                        <p className=\"text-green-100\">Steps</p>\n                      </div>\n                      \n                      <div className=\"text-center bg-gradient-to-r from-orange-500 to-red-500 rounded-2xl p-6 text-white\">\n                        <h2 className=\"text-2xl font-bold mb-2\" data-testid=\"result-calories\">\n                          {result.calories}\n                        </h2>\n                        <p className=\"text-orange-100\">Calories</p>\n                      </div>\n                    </div>\n\n                    {/* Additional Metrics */}\n                    <Tabs defaultValue=\"details\" className=\"space-y-4\">\n                      <TabsList className=\"grid w-full grid-cols-2\">\n                        <TabsTrigger value=\"details\">Activity Details</TabsTrigger>\n                        <TabsTrigger value=\"goals\">Goals & Projections</TabsTrigger>\n                      </TabsList>\n\n                      <TabsContent value=\"details\" className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                            <div className=\"text-xl font-bold text-blue-600\" data-testid=\"result-distance\">\n                              {result.distance} km\n                            </div>\n                            <div className=\"text-sm text-blue-700\">Distance Walked</div>\n                          </div>\n                          \n                          <div className=\"text-center p-4 bg-purple-50 rounded-xl border border-purple-200\">\n                            <div className=\"text-xl font-bold text-purple-600\" data-testid=\"result-duration\">\n                              {result.duration} min\n                            </div>\n                            <div className=\"text-sm text-purple-700\">Estimated Duration</div>\n                          </div>\n                        </div>\n\n                        <div className=\"bg-slate-50 rounded-xl p-4\">\n                          <h4 className=\"font-semibold text-slate-800 mb-3\">Activity Breakdown:</h4>\n                          <div className=\"space-y-2 text-sm text-slate-600\">\n                            <div className=\"flex justify-between\">\n                              <span>Calories per step:</span>\n                              <span className=\"font-medium\" data-testid=\"calories-per-step\">\n                                {result.caloriesPerStep}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Steps per minute:</span>\n                              <span className=\"font-medium\">\n                                {Math.round(result.steps / result.duration)}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between\">\n                              <span>Calories per minute:</span>\n                              <span className=\"font-medium\">\n                                {Math.round((result.calories / result.duration) * 100) / 100}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n\n                      <TabsContent value=\"goals\" className=\"space-y-4\">\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-2 gap-4\">\n                            <div className=\"text-center p-4 bg-indigo-50 rounded-xl border border-indigo-200\">\n                              <div className=\"text-xl font-bold text-indigo-600\" data-testid=\"weekly-goal\">\n                                {result.weeklyGoal}\n                              </div>\n                              <div className=\"text-sm text-indigo-700\">Weekly Calories</div>\n                            </div>\n                            \n                            <div className=\"text-center p-4 bg-pink-50 rounded-xl border border-pink-200\">\n                              <div className=\"text-xl font-bold text-pink-600\" data-testid=\"monthly-goal\">\n                                {result.monthlyGoal}\n                              </div>\n                              <div className=\"text-sm text-pink-700\">Monthly Calories</div>\n                            </div>\n                          </div>\n\n                          {/* Weight Loss Potential */}\n                          <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-green-800 mb-3\">Weight Loss Potential</h4>\n                            <div className=\"space-y-2 text-sm text-green-700\">\n                              <div className=\"flex justify-between\">\n                                <span>Weekly (at this daily rate):</span>\n                                <span className=\"font-medium\">\n                                  {Math.round((result.weeklyGoal / 7700) * 100) / 100} kg\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Monthly (at this daily rate):</span>\n                                <span className=\"font-medium\">\n                                  {Math.round((result.monthlyGoal / 7700) * 100) / 100} kg\n                                </span>\n                              </div>\n                              <p className=\"text-xs text-green-600 mt-2\">\n                                *Based on 7,700 calories = 1 kg fat. Results may vary based on diet and metabolism.\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Fitness Goals */}\n                          <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4\">\n                            <h4 className=\"font-semibold text-blue-800 mb-3\">Fitness Milestones</h4>\n                            <div className=\"space-y-2 text-sm text-blue-700\">\n                              <div className=\"flex justify-between\">\n                                <span>Steps to burn 100 calories:</span>\n                                <span className=\"font-medium\">\n                                  {Math.round(100 / result.caloriesPerStep).toLocaleString()}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Steps to walk 5km:</span>\n                                <span className=\"font-medium\">\n                                  {Math.round((5 / result.distance) * result.steps).toLocaleString()}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span>Steps for 30-min workout:</span>\n                                <span className=\"font-medium\">\n                                  {Math.round((30 / result.duration) * result.steps).toLocaleString()}\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </TabsContent>\n                    </Tabs>\n\n                    {/* Health Benefits */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-heart text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Health Benefits of Walking</p>\n                          <ul className=\"text-yellow-700 space-y-1 text-xs\">\n                            <li>• Improves cardiovascular health and reduces disease risk</li>\n                            <li>• Strengthens bones and muscles, improves balance</li>\n                            <li>• Boosts mood and mental health, reduces stress</li>\n                            <li>• Helps with weight management and metabolism</li>\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-walking text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your details to convert between steps and calories\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Step Counting Tips</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-mobile-alt text-blue-500 mt-1\"></i>\n                    <span>Use smartphone apps or fitness trackers for accurate counting</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-clock text-green-500 mt-1\"></i>\n                    <span>Take regular walking breaks throughout the day</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-stairs text-orange-500 mt-1\"></i>\n                    <span>Take stairs instead of elevators when possible</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-parking text-purple-500 mt-1\"></i>\n                    <span>Park farther away to add extra steps</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-users text-red-500 mt-1\"></i>\n                    <span>Walk with friends or family for motivation</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Walking for Different Goals</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Weight Loss:</h5>\n                    <p>Aim for 10,000+ steps daily with brisk pace (3.5+ mph)</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">General Health:</h5>\n                    <p>7,500-10,000 steps daily at moderate pace</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Maintenance:</h5>\n                    <p>5,000-7,500 steps daily with regular activity</p>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Athletic Training:</h5>\n                    <p>12,500+ steps with varied intensity and pace</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Steps Calculated!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Time for a walking break? Or maybe a quick laugh first!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":26066},"client/src/pages/tools/tip-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TipResult {\n  tipAmount: number;\n  totalAmount: number;\n  perPersonAmount: number;\n  tipPerPerson: number;\n}\n\nexport default function TipCalculator() {\n  const [billAmount, setBillAmount] = useState(\"\");\n  const [tipPercentage, setTipPercentage] = useState(\"18\");\n  const [customTip, setCustomTip] = useState(\"\");\n  const [numberOfPeople, setNumberOfPeople] = useState(\"1\");\n  const [result, setResult] = useState<TipResult | null>(null);\n\n  const commonTipPercentages = [10, 15, 18, 20, 25];\n\n  useEffect(() => {\n    document.title = \"Tip Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Free tip calculator. Calculate tip amounts, split bills, and find total per person. Perfect for restaurants and services.');\n    }\n  }, []);\n\n  const calculateTip = () => {\n    if (!billAmount) return;\n\n    const bill = parseFloat(billAmount);\n    const people = parseInt(numberOfPeople) || 1;\n    const tipPercent = customTip ? parseFloat(customTip) : parseFloat(tipPercentage);\n\n    const tipAmount = (bill * tipPercent) / 100;\n    const totalAmount = bill + tipAmount;\n    const perPersonAmount = totalAmount / people;\n    const tipPerPerson = tipAmount / people;\n\n    setResult({\n      tipAmount: Math.round(tipAmount * 100) / 100,\n      totalAmount: Math.round(totalAmount * 100) / 100,\n      perPersonAmount: Math.round(perPersonAmount * 100) / 100,\n      tipPerPerson: Math.round(tipPerPerson * 100) / 100\n    });\n  };\n\n  const clearCalculation = () => {\n    setBillAmount(\"\");\n    setTipPercentage(\"18\");\n    setCustomTip(\"\");\n    setNumberOfPeople(\"1\");\n    setResult(null);\n  };\n\n  const handleTipPercentageClick = (percentage: number) => {\n    setTipPercentage(percentage.toString());\n    setCustomTip(\"\");\n  };\n\n  useEffect(() => {\n    if (billAmount) {\n      calculateTip();\n    }\n  }, [billAmount, tipPercentage, customTip, numberOfPeople]);\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-green-100 to-green-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-money-bill-wave text-green-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"tip-calc-title\">\n              Tip Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"tip-calc-subtitle\">\n              Calculate tips and split bills easily for restaurants and services\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-receipt text-primary\"></i>\n                  <span>Bill Details</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"billAmount\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Bill Amount ($)\n                  </Label>\n                  <Input\n                    id=\"billAmount\"\n                    type=\"number\"\n                    value={billAmount}\n                    onChange={(e) => setBillAmount(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"50.00\"\n                    min=\"0\"\n                    step=\"0.01\"\n                    data-testid=\"input-bill-amount\"\n                  />\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700 mb-3 block\">\n                    Tip Percentage\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-2 mb-3\">\n                    {commonTipPercentages.map((percentage) => (\n                      <Button\n                        key={percentage}\n                        variant={tipPercentage === percentage.toString() && !customTip ? \"default\" : \"outline\"}\n                        className=\"text-sm\"\n                        onClick={() => handleTipPercentageClick(percentage)}\n                        data-testid={`button-tip-${percentage}`}\n                      >\n                        {percentage}%\n                      </Button>\n                    ))}\n                  </div>\n                  <Input\n                    type=\"number\"\n                    value={customTip}\n                    onChange={(e) => setCustomTip(e.target.value)}\n                    className=\"w-full\"\n                    placeholder=\"Custom tip %\"\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"0.1\"\n                    data-testid=\"input-custom-tip\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"numberOfPeople\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Number of People\n                  </Label>\n                  <Input\n                    id=\"numberOfPeople\"\n                    type=\"number\"\n                    value={numberOfPeople}\n                    onChange={(e) => setNumberOfPeople(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"1\"\n                    min=\"1\"\n                    data-testid=\"input-people-count\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateTip} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!billAmount}\n                    data-testid=\"button-calculate-tip\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Tip\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-tip\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Tip Guide */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Tipping Guide</span>\n                  </div>\n                  <div className=\"text-blue-700 space-y-1\">\n                    <p><strong>Restaurants:</strong> 15-20% (18% is standard)</p>\n                    <p><strong>Bars:</strong> $1-2 per drink or 15-20%</p>\n                    <p><strong>Delivery:</strong> 10-15% + delivery fee</p>\n                    <p><strong>Taxi/Rideshare:</strong> 10-15%</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-pie text-accent\"></i>\n                  <span>Tip Breakdown</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result && billAmount ? (\n                  <div className=\"space-y-6\" data-testid=\"tip-results\">\n                    {/* Summary Cards */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-green-50 rounded-xl border border-green-200\">\n                        <div className=\"text-2xl font-bold text-green-600\" data-testid=\"tip-amount\">\n                          ${result.tipAmount}\n                        </div>\n                        <div className=\"text-sm text-green-700\">Tip Amount</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                        <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"total-amount\">\n                          ${result.totalAmount}\n                        </div>\n                        <div className=\"text-sm text-blue-700\">Total Amount</div>\n                      </div>\n                    </div>\n\n                    {/* Detailed Breakdown */}\n                    <div className=\"bg-gradient-to-r from-green-500 to-emerald-500 rounded-2xl p-6 text-white\">\n                      <h3 className=\"text-xl font-bold mb-4 text-center\">Bill Summary</h3>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between\">\n                          <span>Bill Amount:</span>\n                          <span>${billAmount}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Tip ({customTip || tipPercentage}%):</span>\n                          <span>${result.tipAmount}</span>\n                        </div>\n                        <div className=\"border-t border-green-300 pt-2\">\n                          <div className=\"flex justify-between font-bold text-lg\">\n                            <span>Total:</span>\n                            <span>${result.totalAmount}</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Per Person Breakdown */}\n                    {parseInt(numberOfPeople) > 1 && (\n                      <div className=\"bg-purple-50 border border-purple-200 rounded-xl p-4\">\n                        <h4 className=\"font-semibold text-purple-800 mb-3 text-center\">\n                          Split Between {numberOfPeople} People\n                        </h4>\n                        <div className=\"grid grid-cols-2 gap-4 text-center\">\n                          <div>\n                            <div className=\"text-xl font-bold text-purple-600\" data-testid=\"tip-per-person\">\n                              ${result.tipPerPerson}\n                            </div>\n                            <div className=\"text-sm text-purple-700\">Tip per person</div>\n                          </div>\n                          <div>\n                            <div className=\"text-xl font-bold text-purple-600\" data-testid=\"total-per-person\">\n                              ${result.perPersonAmount}\n                            </div>\n                            <div className=\"text-sm text-purple-700\">Total per person</div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {/* Quick Tip Options */}\n                    <div className=\"bg-slate-50 rounded-xl p-4\">\n                      <h4 className=\"font-semibold text-slate-800 mb-3\">Quick Tip Comparison</h4>\n                      <div className=\"space-y-2 text-sm\">\n                        {[15, 18, 20, 25].map((percent) => {\n                          const tip = (parseFloat(billAmount) * percent) / 100;\n                          const total = parseFloat(billAmount) + tip;\n                          return (\n                            <div key={percent} className=\"flex justify-between\">\n                              <span>{percent}% tip:</span>\n                              <span>${tip.toFixed(2)} (Total: ${total.toFixed(2)})</span>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-money-bill-wave text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Bill Amount</h3>\n                    <p className=\"text-slate-500\">\n                      Enter your bill amount to calculate the tip\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Tipping Etiquette</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-utensils text-green-500 mt-1\"></i>\n                    <span><strong>Good service:</strong> 18-20% at restaurants</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-star text-yellow-500 mt-1\"></i>\n                    <span><strong>Excellent service:</strong> 20-25% or more</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-frown text-red-500 mt-1\"></i>\n                    <span><strong>Poor service:</strong> 10-15% (consider talking to manager)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-users text-blue-500 mt-1\"></i>\n                    <span><strong>Large groups:</strong> 18-20% (often auto-added)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-credit-card text-purple-500 mt-1\"></i>\n                    <span><strong>Credit cards:</strong> Calculate on pre-tax amount</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">International Tipping</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm text-slate-600\">\n                  <div className=\"flex justify-between\">\n                    <span><strong>United States:</strong></span>\n                    <span>15-20%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span><strong>Canada:</strong></span>\n                    <span>15-20%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span><strong>United Kingdom:</strong></span>\n                    <span>10-15%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span><strong>Australia:</strong></span>\n                    <span>10% (optional)</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span><strong>Germany:</strong></span>\n                    <span>5-10%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span><strong>Japan:</strong></span>\n                    <span>Not customary</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":16418},"client/src/pages/tools/water-intake-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface WaterIntakeResult {\n  baseline: number;\n  withActivity: number;\n  withClimate: number;\n  final: number;\n  cups: number;\n  bottles: number;\n}\n\nexport default function WaterIntakeCalculator() {\n  const [weight, setWeight] = useState(\"\");\n  const [unit, setUnit] = useState(\"metric\");\n  const [activityLevel, setActivityLevel] = useState(\"sedentary\");\n  const [climate, setClimate] = useState(\"temperate\");\n  const [isPregnant, setIsPregnant] = useState(false);\n  const [isBreastfeeding, setIsBreastfeeding] = useState(false);\n  const [result, setResult] = useState<WaterIntakeResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Water Intake Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your daily water intake needs based on weight, activity level, and environmental factors. Free hydration calculator.');\n    }\n  }, []);\n\n  const calculateWaterIntake = () => {\n    if (!weight) return;\n\n    let weightKg = parseFloat(weight);\n    \n    // Convert to kg if needed\n    if (unit === \"imperial\") {\n      weightKg = weightKg * 0.453592; // pounds to kg\n    }\n\n    // Base calculation: 35ml per kg body weight\n    let waterIntakeMl = weightKg * 35;\n\n    // Activity level adjustments\n    const activityMultipliers = {\n      sedentary: 1.0,        // Little to no exercise\n      light: 1.2,            // Light exercise 1-3 days/week\n      moderate: 1.4,         // Moderate exercise 3-5 days/week\n      active: 1.6,           // Heavy exercise 6-7 days/week\n      very_active: 1.8       // Very heavy exercise, physical job\n    };\n\n    // Climate adjustments\n    const climateAdjustments = {\n      cold: -200,            // Cold climate\n      temperate: 0,          // Temperate climate\n      hot: 400,              // Hot climate\n      very_hot: 800          // Very hot/humid climate\n    };\n\n    const baseline = waterIntakeMl;\n    const withActivity = waterIntakeMl * activityMultipliers[activityLevel as keyof typeof activityMultipliers];\n    const withClimate = withActivity + climateAdjustments[climate as keyof typeof climateAdjustments];\n\n    let finalIntake = withClimate;\n\n    // Special conditions\n    if (isPregnant) {\n      finalIntake += 300; // Additional 300ml for pregnancy\n    }\n    if (isBreastfeeding) {\n      finalIntake += 600; // Additional 600ml for breastfeeding\n    }\n\n    // Convert to other units\n    const cups = finalIntake / 240; // 1 cup = 240ml\n    const bottles = finalIntake / 500; // 1 standard bottle = 500ml\n\n    setResult({\n      baseline: Math.round(baseline),\n      withActivity: Math.round(withActivity),\n      withClimate: Math.round(withClimate),\n      final: Math.round(finalIntake),\n      cups: Math.round(cups * 10) / 10,\n      bottles: Math.round(bottles * 10) / 10\n    });\n  };\n\n  const clearCalculation = () => {\n    setWeight(\"\");\n    setActivityLevel(\"sedentary\");\n    setClimate(\"temperate\");\n    setIsPregnant(false);\n    setIsBreastfeeding(false);\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-tint text-blue-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"water-intake-title\">\n              Water Intake Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"water-intake-subtitle\">\n              Calculate your daily water intake needs based on weight, activity, and environmental factors\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-user text-primary\"></i>\n                  <span>Your Information</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"unit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Unit System\n                  </Label>\n                  <Select value={unit} onValueChange={setUnit} data-testid=\"select-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit system\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"metric\">Metric (kg)</SelectItem>\n                      <SelectItem value=\"imperial\">Imperial (lbs)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"weight\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Weight {unit === \"metric\" ? \"(kg)\" : \"(lbs)\"}\n                  </Label>\n                  <Input\n                    id=\"weight\"\n                    type=\"number\"\n                    value={weight}\n                    onChange={(e) => setWeight(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder={unit === \"metric\" ? \"70\" : \"154\"}\n                    min=\"1\"\n                    step=\"0.1\"\n                    data-testid=\"input-weight\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"activityLevel\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Activity Level\n                  </Label>\n                  <Select value={activityLevel} onValueChange={setActivityLevel} data-testid=\"select-activity\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select activity level\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"sedentary\">Sedentary (Little/no exercise)</SelectItem>\n                      <SelectItem value=\"light\">Light (1-3 days/week)</SelectItem>\n                      <SelectItem value=\"moderate\">Moderate (3-5 days/week)</SelectItem>\n                      <SelectItem value=\"active\">Active (6-7 days/week)</SelectItem>\n                      <SelectItem value=\"very_active\">Very Active (2x/day, intense)</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"climate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Climate/Environment\n                  </Label>\n                  <Select value={climate} onValueChange={setClimate} data-testid=\"select-climate\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select climate\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"cold\">Cold climate</SelectItem>\n                      <SelectItem value=\"temperate\">Temperate climate</SelectItem>\n                      <SelectItem value=\"hot\">Hot climate</SelectItem>\n                      <SelectItem value=\"very_hot\">Very hot/humid climate</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Label className=\"text-sm font-medium text-slate-700\">Special Conditions</Label>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"pregnant\"\n                        checked={isPregnant}\n                        onCheckedChange={(checked) => setIsPregnant(checked === true)}\n                        data-testid=\"checkbox-pregnant\"\n                      />\n                      <Label htmlFor=\"pregnant\" className=\"text-sm\">Pregnant</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"breastfeeding\"\n                        checked={isBreastfeeding}\n                        onCheckedChange={(checked) => setIsBreastfeeding(checked === true)}\n                        data-testid=\"checkbox-breastfeeding\"\n                      />\n                      <Label htmlFor=\"breastfeeding\" className=\"text-sm\">Breastfeeding</Label>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateWaterIntake} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!weight}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Water Intake\n                  </Button>\n                  \n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Hydration Tips */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-lightbulb text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Hydration Tips</span>\n                  </div>\n                  <ul className=\"text-blue-700 space-y-1 text-xs\">\n                    <li>• Start your day with a glass of water</li>\n                    <li>• Drink water before, during, and after exercise</li>\n                    <li>• Monitor urine color - pale yellow is ideal</li>\n                    <li>• Increase intake in hot weather or high altitudes</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-line text-accent\"></i>\n                  <span>Daily Water Intake</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"water-intake-results\">\n                    {/* Main Result */}\n                    <div className=\"text-center bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl p-6 text-white\">\n                      <h2 className=\"text-3xl font-bold mb-2\" data-testid=\"total-water-intake\">\n                        {result.final} ml\n                      </h2>\n                      <p className=\"text-blue-100 mb-2\">Daily Water Intake</p>\n                      <div className=\"text-sm text-blue-100\">\n                        That's {result.cups} cups or {result.bottles} bottles\n                      </div>\n                    </div>\n\n                    {/* Breakdown */}\n                    <div className=\"space-y-4\">\n                      <h4 className=\"font-semibold text-slate-800\">Calculation Breakdown:</h4>\n                      \n                      <div className=\"space-y-3\">\n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">Base Requirement</div>\n                            <div className=\"text-sm text-slate-600\">35ml per kg body weight</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-slate-600\" data-testid=\"baseline-intake\">\n                            {result.baseline} ml\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">With Activity</div>\n                            <div className=\"text-sm text-slate-600\">Adjusted for {activityLevel} lifestyle</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-green-600\" data-testid=\"activity-adjusted\">\n                            {result.withActivity} ml\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex justify-between items-center p-3 bg-slate-50 rounded-xl\">\n                          <div>\n                            <div className=\"font-medium text-slate-800\">With Climate</div>\n                            <div className=\"text-sm text-slate-600\">Adjusted for {climate} conditions</div>\n                          </div>\n                          <div className=\"text-lg font-bold text-orange-600\" data-testid=\"climate-adjusted\">\n                            {result.withClimate} ml\n                          </div>\n                        </div>\n\n                        {(isPregnant || isBreastfeeding) && (\n                          <div className=\"flex justify-between items-center p-3 bg-pink-50 border border-pink-200 rounded-xl\">\n                            <div>\n                              <div className=\"font-medium text-pink-800\">Special Conditions</div>\n                              <div className=\"text-sm text-pink-700\">\n                                {isPregnant && \"Pregnancy: +300ml\"}\n                                {isPregnant && isBreastfeeding && \", \"}\n                                {isBreastfeeding && \"Breastfeeding: +600ml\"}\n                              </div>\n                            </div>\n                            <div className=\"text-lg font-bold text-pink-600\">\n                              +{(isPregnant ? 300 : 0) + (isBreastfeeding ? 600 : 0)} ml\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n\n                    {/* Alternative Measurements */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"text-center p-4 bg-cyan-50 rounded-xl border border-cyan-200\">\n                        <div className=\"text-2xl font-bold text-cyan-600\" data-testid=\"cups-count\">\n                          {result.cups}\n                        </div>\n                        <div className=\"text-sm text-cyan-700\">Cups (240ml each)</div>\n                      </div>\n                      \n                      <div className=\"text-center p-4 bg-blue-50 rounded-xl border border-blue-200\">\n                        <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"bottles-count\">\n                          {result.bottles}\n                        </div>\n                        <div className=\"text-sm text-blue-700\">Bottles (500ml each)</div>\n                      </div>\n                    </div>\n\n                    {/* Hydration Schedule */}\n                    <div className=\"bg-green-50 border border-green-200 rounded-xl p-4\">\n                      <h4 className=\"font-semibold text-green-800 mb-3\">Suggested Daily Schedule</h4>\n                      <div className=\"space-y-2 text-sm text-green-700\">\n                        <div className=\"flex justify-between\">\n                          <span>Wake up:</span>\n                          <span className=\"font-medium\">1-2 cups (240-480ml)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Before meals:</span>\n                          <span className=\"font-medium\">1 cup each (3x240ml)</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>During exercise:</span>\n                          <span className=\"font-medium\">150-250ml every 15-20 min</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Throughout day:</span>\n                          <span className=\"font-medium\">Sip regularly</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Before bed:</span>\n                          <span className=\"font-medium\">1 cup (240ml)</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Important Note */}\n                    <div className=\"bg-yellow-50 border border-yellow-200 rounded-xl p-4 text-sm\">\n                      <div className=\"flex items-start space-x-2\">\n                        <i className=\"fas fa-exclamation-triangle text-yellow-600 mt-1\"></i>\n                        <div>\n                          <p className=\"text-yellow-800 font-medium mb-1\">Important Note</p>\n                          <p className=\"text-yellow-700\">\n                            These are general recommendations. Individual needs may vary based on health conditions, \n                            medications, and other factors. Consult your healthcare provider for personalized advice.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-tint text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Information</h3>\n                    <p className=\"text-slate-500\">\n                      Fill in your weight and activity details to calculate water intake\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Signs of Proper Hydration</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Light yellow or clear urine</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Minimal thirst throughout the day</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Good energy levels and mental clarity</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Moist lips and mouth</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-500 mt-1\"></i>\n                    <span>Elastic skin (quick rebound when pinched)</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Dehydration Warning Signs</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-exclamation-triangle text-red-500 mt-1\"></i>\n                    <span>Dark yellow or amber colored urine</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-exclamation-triangle text-red-500 mt-1\"></i>\n                    <span>Persistent thirst or dry mouth</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-exclamation-triangle text-red-500 mt-1\"></i>\n                    <span>Headache or dizziness</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-exclamation-triangle text-red-500 mt-1\"></i>\n                    <span>Fatigue or decreased concentration</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-exclamation-triangle text-red-500 mt-1\"></i>\n                    <span>Constipation or decreased urination</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Fun Tool Link */}\n          <div className=\"mt-12 text-center\">\n            <Card className=\"bg-gradient-to-r from-yellow-500 to-orange-500 text-white\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-3\">Stay Hydrated & Happy!</h3>\n                <p className=\"mb-4 text-yellow-100\">\n                  Need a laugh while you sip your water? Check out our joke generator!\n                </p>\n                <a \n                  href=\"/tools/random-joke-generator\" \n                  className=\"bg-white text-orange-600 px-4 py-2 rounded-xl font-semibold hover:bg-orange-50 transition-colors duration-200 inline-block\"\n                  data-testid=\"button-fun-tool\"\n                >\n                  <i className=\"fas fa-laugh mr-2\"></i>\n                  Get a Random Joke\n                </a>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":23395},"client/src/pages/tools/age-in-days-calculator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface AgeInDaysResult {\n  totalDays: number;\n  totalWeeks: number;\n  totalMonths: number;\n  totalHours: number;\n  totalMinutes: number;\n  totalSeconds: number;\n  nextBirthdayDays: number;\n  age: {\n    years: number;\n    months: number;\n    days: number;\n  };\n}\n\nexport default function AgeInDaysCalculator() {\n  const [birthDate, setBirthDate] = useState(\"\");\n  const [targetDate, setTargetDate] = useState(\"\");\n  const [result, setResult] = useState<AgeInDaysResult | null>(null);\n\n  useEffect(() => {\n    document.title = \"Age in Days Calculator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Calculate your exact age in days, weeks, months, hours, minutes, and seconds. Find out how many days you have lived.');\n    }\n\n    // Set today as default target date\n    const today = new Date().toISOString().split('T')[0];\n    setTargetDate(today);\n  }, []);\n\n  const calculateAgeInDays = () => {\n    if (!birthDate || !targetDate) return;\n\n    const birth = new Date(birthDate);\n    const target = new Date(targetDate);\n\n    if (birth > target) {\n      alert(\"Birth date cannot be after the target date!\");\n      return;\n    }\n\n    // Calculate total time difference in milliseconds\n    const timeDiff = target.getTime() - birth.getTime();\n    \n    // Convert to different units\n    const totalDays = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n    const totalWeeks = Math.floor(totalDays / 7);\n    const totalHours = Math.floor(timeDiff / (1000 * 60 * 60));\n    const totalMinutes = Math.floor(timeDiff / (1000 * 60));\n    const totalSeconds = Math.floor(timeDiff / 1000);\n\n    // Calculate age in years, months, days\n    let years = target.getFullYear() - birth.getFullYear();\n    let months = target.getMonth() - birth.getMonth();\n    let days = target.getDate() - birth.getDate();\n\n    if (days < 0) {\n      months--;\n      const lastMonth = new Date(target.getFullYear(), target.getMonth(), 0);\n      days += lastMonth.getDate();\n    }\n\n    if (months < 0) {\n      years--;\n      months += 12;\n    }\n\n    // Calculate approximate total months\n    const totalMonths = years * 12 + months;\n\n    // Calculate days until next birthday\n    const nextBirthday = new Date(target.getFullYear(), birth.getMonth(), birth.getDate());\n    if (nextBirthday <= target) {\n      nextBirthday.setFullYear(target.getFullYear() + 1);\n    }\n    const nextBirthdayDays = Math.ceil((nextBirthday.getTime() - target.getTime()) / (1000 * 60 * 60 * 24));\n\n    setResult({\n      totalDays,\n      totalWeeks,\n      totalMonths,\n      totalHours,\n      totalMinutes,\n      totalSeconds,\n      nextBirthdayDays,\n      age: { years, months, days }\n    });\n  };\n\n  const clearCalculation = () => {\n    setBirthDate(\"\");\n    setTargetDate(new Date().toISOString().split('T')[0]);\n    setResult(null);\n  };\n\n  const useToday = () => {\n    setTargetDate(new Date().toISOString().split('T')[0]);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-calendar-day text-purple-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"age-days-title\">\n              Age in Days Calculator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"age-days-subtitle\">\n              Calculate your exact age in days, weeks, months, hours, minutes, and seconds. Find out how many days you have lived.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-edit text-primary\"></i>\n                  <span>Date Input</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"birthDate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Birth Date\n                  </Label>\n                  <Input\n                    id=\"birthDate\"\n                    type=\"date\"\n                    value={birthDate}\n                    onChange={(e) => setBirthDate(e.target.value)}\n                    className=\"w-full\"\n                    max={new Date().toISOString().split('T')[0]}\n                    data-testid=\"input-birth-date\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"targetDate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Calculate Age As Of\n                  </Label>\n                  <Input\n                    id=\"targetDate\"\n                    type=\"date\"\n                    value={targetDate}\n                    onChange={(e) => setTargetDate(e.target.value)}\n                    className=\"w-full\"\n                    data-testid=\"input-target-date\"\n                  />\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={calculateAgeInDays} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!birthDate || !targetDate}\n                    data-testid=\"button-calculate\"\n                  >\n                    <i className=\"fas fa-calculator mr-2\"></i>\n                    Calculate Age in Days\n                  </Button>\n                  \n                  <Button \n                    onClick={useToday} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-today\"\n                  >\n                    <i className=\"fas fa-calendar-alt\"></i>\n                  </Button>\n\n                  <Button \n                    onClick={clearCalculation} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Quick Facts</span>\n                  </div>\n                  <ul className=\"text-blue-700 space-y-1\">\n                    <li>• Average human lifespan: ~29,000 days</li>\n                    <li>• One year = 365.25 days (accounting for leap years)</li>\n                    <li>• Most people live between 25,000-30,000 days</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-chart-bar text-accent\"></i>\n                  <span>Age Breakdown</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"age-results\">\n                    {/* Primary Age Display */}\n                    <div className=\"text-center bg-gradient-to-br from-purple-500 to-pink-500 rounded-2xl p-6 text-white\">\n                      <div className=\"text-sm text-purple-100 mb-2\">Your Age in Days</div>\n                      <div className=\"text-4xl font-bold mb-2\" data-testid=\"total-days\">\n                        {result.totalDays.toLocaleString()}\n                      </div>\n                      <div className=\"text-purple-100\">days old</div>\n                    </div>\n\n                    {/* Age Breakdown */}\n                    <div className=\"grid grid-cols-1 gap-4\">\n                      <div className=\"bg-slate-50 rounded-xl p-4\">\n                        <div className=\"text-sm text-slate-600 mb-1\">Exact Age</div>\n                        <div className=\"text-lg font-semibold text-slate-800\" data-testid=\"exact-age\">\n                          {result.age.years} years, {result.age.months} months, {result.age.days} days\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"bg-blue-50 rounded-xl p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"total-weeks\">\n                            {result.totalWeeks.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-blue-700\">weeks</div>\n                        </div>\n\n                        <div className=\"bg-green-50 rounded-xl p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-green-600\" data-testid=\"total-months\">\n                            {result.totalMonths}\n                          </div>\n                          <div className=\"text-sm text-green-700\">months</div>\n                        </div>\n\n                        <div className=\"bg-orange-50 rounded-xl p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-orange-600\" data-testid=\"total-hours\">\n                            {result.totalHours.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-orange-700\">hours</div>\n                        </div>\n\n                        <div className=\"bg-red-50 rounded-xl p-4 text-center\">\n                          <div className=\"text-2xl font-bold text-red-600\" data-testid=\"total-minutes\">\n                            {result.totalMinutes.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-red-700\">minutes</div>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-indigo-50 rounded-xl p-4 text-center\">\n                        <div className=\"text-3xl font-bold text-indigo-600\" data-testid=\"total-seconds\">\n                          {result.totalSeconds.toLocaleString()}\n                        </div>\n                        <div className=\"text-sm text-indigo-700\">seconds lived</div>\n                      </div>\n\n                      {/* Next Birthday */}\n                      <div className=\"bg-gradient-to-r from-pink-50 to-rose-50 rounded-xl p-4 text-center\">\n                        <div className=\"text-sm text-rose-600 mb-1\">Days Until Next Birthday</div>\n                        <div className=\"text-2xl font-bold text-rose-600\" data-testid=\"next-birthday\">\n                          {result.nextBirthdayDays}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-calendar-day text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Your Birth Date</h3>\n                    <p className=\"text-slate-500\">\n                      Select your birth date to calculate how many days you've lived\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Interesting Age Facts</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-heart text-red-500 mt-1\"></i>\n                    <span>Your heart beats about 100,000 times per day</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-eye text-blue-500 mt-1\"></i>\n                    <span>You blink approximately 15,000-20,000 times daily</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-lungs text-green-500 mt-1\"></i>\n                    <span>You take around 20,000 breaths every day</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-bed text-purple-500 mt-1\"></i>\n                    <span>About 1/3 of your life is spent sleeping</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-brain text-orange-500 mt-1\"></i>\n                    <span>Your brain processes 70,000 thoughts per day</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Age Milestones</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-baby text-pink-500 mt-1\"></i>\n                    <span>1,000 days ≈ 2.7 years old</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-child text-blue-500 mt-1\"></i>\n                    <span>5,000 days ≈ 13.7 years old</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-user-graduate text-green-500 mt-1\"></i>\n                    <span>10,000 days ≈ 27.4 years old</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-briefcase text-orange-500 mt-1\"></i>\n                    <span>15,000 days ≈ 41.1 years old</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-user text-purple-500 mt-1\"></i>\n                    <span>20,000 days ≈ 54.8 years old</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15672},"client/src/pages/tools/area-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ConversionResult {\n  value: number;\n  unit: string;\n  label: string;\n}\n\nconst areaUnits = [\n  { value: \"sqm\", label: \"Square meters (m²)\", factor: 1 },\n  { value: \"sqkm\", label: \"Square kilometers (km²)\", factor: 1e-6 },\n  { value: \"sqcm\", label: \"Square centimeters (cm²)\", factor: 10000 },\n  { value: \"sqmm\", label: \"Square millimeters (mm²)\", factor: 1000000 },\n  { value: \"sqft\", label: \"Square feet (ft²)\", factor: 10.764 },\n  { value: \"sqin\", label: \"Square inches (in²)\", factor: 1550 },\n  { value: \"sqyd\", label: \"Square yards (yd²)\", factor: 1.196 },\n  { value: \"sqmi\", label: \"Square miles (mi²)\", factor: 3.861e-7 },\n  { value: \"hectare\", label: \"Hectares (ha)\", factor: 0.0001 },\n  { value: \"acre\", label: \"Acres (ac)\", factor: 0.000247 }\n];\n\nexport default function AreaConverter() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"sqm\");\n  const [results, setResults] = useState<ConversionResult[]>([]);\n\n  useEffect(() => {\n    document.title = \"Area Converter - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between different units of area including square meters, acres, hectares, and more.');\n    }\n  }, []);\n\n  const convertArea = () => {\n    if (!inputValue || isNaN(parseFloat(inputValue))) return;\n\n    const value = parseFloat(inputValue);\n    const fromUnitData = areaUnits.find(unit => unit.value === fromUnit);\n    if (!fromUnitData) return;\n\n    // Convert to base unit (square meters) first\n    const baseValue = value / fromUnitData.factor;\n\n    // Convert to all other units\n    const conversions = areaUnits\n      .filter(unit => unit.value !== fromUnit)\n      .map(unit => ({\n        value: parseFloat((baseValue * unit.factor).toFixed(10)),\n        unit: unit.value,\n        label: unit.label\n      }));\n\n    setResults(conversions);\n  };\n\n  const clearConversion = () => {\n    setInputValue(\"\");\n    setResults([]);\n  };\n\n  const swapToUnit = (unit: string) => {\n    const result = results.find(r => r.unit === unit);\n    if (result) {\n      setInputValue(result.value.toString());\n      setFromUnit(unit);\n      setResults([]);\n    }\n  };\n\n  const getAreaCategory = (areaSqm: number): { category: string; color: string } => {\n    if (areaSqm < 1) return { category: \"Very Small\", color: \"text-green-600\" };\n    if (areaSqm < 100) return { category: \"Room Size\", color: \"text-blue-600\" };\n    if (areaSqm < 1000) return { category: \"House Size\", color: \"text-purple-600\" };\n    if (areaSqm < 10000) return { category: \"Building Size\", color: \"text-orange-600\" };\n    if (areaSqm < 1000000) return { category: \"Large Property\", color: \"text-red-600\" };\n    return { category: \"Massive Area\", color: \"text-gray-800\" };\n  };\n\n  const getCurrentAreaInSqm = (): number => {\n    if (!inputValue || isNaN(parseFloat(inputValue))) return 0;\n    const value = parseFloat(inputValue);\n    const fromUnitData = areaUnits.find(unit => unit.value === fromUnit);\n    return fromUnitData ? value / fromUnitData.factor : 0;\n  };\n\n  const areaCategory = getAreaCategory(getCurrentAreaInSqm());\n\n  const formatNumber = (num: number): string => {\n    if (num === 0) return \"0\";\n    if (num < 0.000001) return num.toExponential(3);\n    if (num < 0.01) return num.toFixed(6);\n    if (num < 1) return num.toFixed(4);\n    if (num < 1000) return num.toFixed(2);\n    return num.toLocaleString();\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-orange-100 to-orange-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-expand-arrows-alt text-orange-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"area-converter-title\">\n              Area Converter\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"area-converter-subtitle\">\n              Convert between different units of area including square meters, acres, hectares, and more\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-edit text-primary\"></i>\n                  <span>Area Input</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"inputValue\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Area Value\n                  </Label>\n                  <Input\n                    id=\"inputValue\"\n                    type=\"number\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"Enter area value\"\n                    step=\"any\"\n                    data-testid=\"input-area\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fromUnit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    From Unit\n                  </Label>\n                  <Select value={fromUnit} onValueChange={setFromUnit} data-testid=\"select-from-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {areaUnits.map((unit) => (\n                        <SelectItem key={unit.value} value={unit.value}>\n                          {unit.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={convertArea} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!inputValue || isNaN(parseFloat(inputValue))}\n                    data-testid=\"button-convert\"\n                  >\n                    <i className=\"fas fa-exchange-alt mr-2\"></i>\n                    Convert Area\n                  </Button>\n                  \n                  <Button \n                    onClick={clearConversion} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Area Category */}\n                {inputValue && !isNaN(parseFloat(inputValue)) && (\n                  <div className=\"bg-slate-50 rounded-xl p-4\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <i className=\"fas fa-tag text-slate-600\"></i>\n                      <span className=\"font-medium text-slate-800\">Area Category</span>\n                    </div>\n                    <p className={`font-semibold ${areaCategory.color}`}>\n                      {areaCategory.category}\n                    </p>\n                  </div>\n                )}\n\n                {/* Common Examples */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <i className=\"fas fa-lightbulb text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Quick Examples</span>\n                  </div>\n                  <div className=\"space-y-2 text-blue-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Average room:</span>\n                      <span>20 m² (215 ft²)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Football field:</span>\n                      <span>7,140 m² (1.76 acres)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Average house:</span>\n                      <span>200 m² (2,153 ft²)</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-list text-accent\"></i>\n                  <span>Conversion Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {results.length > 0 ? (\n                  <div className=\"space-y-4\" data-testid=\"conversion-results\">\n                    {results.map((result, index) => (\n                      <div \n                        key={result.unit} \n                        className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors cursor-pointer group\"\n                        onClick={() => swapToUnit(result.unit)}\n                        data-testid={`result-${result.unit}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"font-mono text-xl font-bold text-slate-800\">\n                            {formatNumber(result.value)}\n                          </div>\n                          <div className=\"text-sm text-slate-600\">\n                            {result.label}\n                          </div>\n                        </div>\n                        <div className=\"opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <i className=\"fas fa-exchange-alt text-primary\"></i>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-expand-arrows-alt text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter an Area Value</h3>\n                    <p className=\"text-slate-500\">\n                      Enter an area value above to see conversions to all units\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Area Conversion Formulas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Common Conversions:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• 1 m² = 10.764 ft² = 1.196 yd²</li>\n                      <li>• 1 hectare = 10,000 m² = 2.471 acres</li>\n                      <li>• 1 acre = 4,047 m² = 43,560 ft²</li>\n                      <li>• 1 km² = 100 hectares = 247.1 acres</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Formula:</h5>\n                    <p className=\"bg-slate-50 p-2 rounded font-mono text-xs\">\n                      Area = Length × Width (for rectangles)\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Area References</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-home text-blue-500 mt-1\"></i>\n                    <span>Average bedroom: 12 m² (130 ft²)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-building text-green-500 mt-1\"></i>\n                    <span>Tennis court: 261 m² (0.06 acres)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-tree text-orange-500 mt-1\"></i>\n                    <span>City block: 2 hectares (5 acres)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-map text-purple-500 mt-1\"></i>\n                    <span>Central Park NYC: 341 hectares (843 acres)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-globe text-red-500 mt-1\"></i>\n                    <span>Monaco: 2.02 km² (0.78 mi²)</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":14350},"client/src/pages/tools/base64-encoder-decoder.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Base64EncoderDecoder() {\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"encode\");\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Base64 Encoder/Decoder - ToolHub | Free Online Base64 Tool\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Encode text to Base64 or decode Base64 strings with instant conversion and validation. Free Base64 encoder/decoder tool.');\n    }\n  }, []);\n\n  const encodeBase64 = () => {\n    try {\n      const encoded = btoa(unescape(encodeURIComponent(inputText)));\n      setOutputText(encoded);\n    } catch (error) {\n      setOutputText(\"Error: Invalid input for encoding\");\n    }\n  };\n\n  const decodeBase64 = () => {\n    try {\n      const decoded = decodeURIComponent(escape(atob(inputText)));\n      setOutputText(decoded);\n    } catch (error) {\n      setOutputText(\"Error: Invalid Base64 string\");\n    }\n  };\n\n  const processText = () => {\n    if (!inputText.trim()) {\n      setOutputText(\"\");\n      return;\n    }\n\n    if (activeTab === \"encode\") {\n      encodeBase64();\n    } else {\n      decodeBase64();\n    }\n  };\n\n  const clearText = () => {\n    setInputText(\"\");\n    setOutputText(\"\");\n  };\n\n  const copyOutput = () => {\n    navigator.clipboard.writeText(outputText);\n  };\n\n  const swapInputOutput = () => {\n    setInputText(outputText);\n    setOutputText(inputText);\n  };\n\n  useEffect(() => {\n    processText();\n  }, [inputText, activeTab]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-code text-primary mr-2\"></i>\n              Base64 Encoder/Decoder\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Encode text to Base64 or decode Base64 strings with instant conversion and validation.\n            </p>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-2\">\n                  <TabsTrigger value=\"encode\" data-testid=\"tab-encode\">Encode to Base64</TabsTrigger>\n                  <TabsTrigger value=\"decode\" data-testid=\"tab-decode\">Decode from Base64</TabsTrigger>\n                </TabsList>\n              </Tabs>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">\n                    {activeTab === \"encode\" ? \"Plain Text Input\" : \"Base64 Input\"}\n                  </h3>\n                  <Textarea\n                    placeholder={\n                      activeTab === \"encode\" \n                        ? \"Enter plain text to encode...\" \n                        : \"Enter Base64 string to decode...\"\n                    }\n                    value={inputText}\n                    onChange={(e) => setInputText(e.target.value)}\n                    className=\"w-full h-48 resize-y\"\n                    data-testid=\"textarea-input\"\n                  />\n                </div>\n\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3\">\n                    {activeTab === \"encode\" ? \"Base64 Output\" : \"Plain Text Output\"}\n                  </h3>\n                  <Textarea\n                    placeholder=\"Result will appear here...\"\n                    value={outputText}\n                    readOnly\n                    className=\"w-full h-48 resize-y bg-slate-50\"\n                    data-testid=\"textarea-output\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"flex flex-wrap gap-3 mt-6\">\n                <Button onClick={processText} disabled={!inputText} data-testid=\"button-process\">\n                  <i className={`fas ${activeTab === \"encode\" ? \"fa-lock\" : \"fa-unlock\"} mr-2`}></i>\n                  {activeTab === \"encode\" ? \"Encode\" : \"Decode\"}\n                </Button>\n                <Button onClick={clearText} variant=\"secondary\" data-testid=\"button-clear\">\n                  <i className=\"fas fa-trash mr-2\"></i>Clear\n                </Button>\n                <Button \n                  onClick={copyOutput} \n                  variant=\"outline\"\n                  disabled={!outputText || outputText.startsWith(\"Error:\")}\n                  data-testid=\"button-copy\"\n                >\n                  <i className=\"fas fa-copy mr-2\"></i>Copy Output\n                </Button>\n                <Button \n                  onClick={swapInputOutput} \n                  variant=\"outline\"\n                  disabled={!outputText || outputText.startsWith(\"Error:\")}\n                  data-testid=\"button-swap\"\n                >\n                  <i className=\"fas fa-exchange-alt mr-2\"></i>Swap\n                </Button>\n              </div>\n\n              <div className=\"mt-8 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <h4 className=\"font-semibold text-blue-800 mb-2\">What is Base64?</h4>\n                <p className=\"text-sm text-blue-700\">\n                  Base64 is a binary-to-text encoding scheme that represents binary data in an ASCII string format. \n                  It's commonly used for encoding data in email, URLs, and web applications where binary data needs \n                  to be transmitted over text-based protocols.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":6511},"client/src/pages/tools/character-counter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface CharacterStats {\n  total: number;\n  noSpaces: number;\n  letters: number;\n  numbers: number;\n  special: number;\n  words: number;\n  sentences: number;\n}\n\nexport default function CharacterCounter() {\n  const [text, setText] = useState(\"\");\n  const [stats, setStats] = useState<CharacterStats>({\n    total: 0,\n    noSpaces: 0,\n    letters: 0,\n    numbers: 0,\n    special: 0,\n    words: 0,\n    sentences: 0\n  });\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Character Counter - ToolHub | Free Online Character Counter Tool\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Count characters in your text with and without spaces, including detailed character analysis. Free character counter tool.');\n    }\n  }, []);\n\n  const analyzeText = (inputText: string) => {\n    if (!inputText) {\n      setStats({\n        total: 0,\n        noSpaces: 0,\n        letters: 0,\n        numbers: 0,\n        special: 0,\n        words: 0,\n        sentences: 0\n      });\n      return;\n    }\n\n    const total = inputText.length;\n    const noSpaces = inputText.replace(/\\s/g, '').length;\n    const letters = (inputText.match(/[a-zA-Z]/g) || []).length;\n    const numbers = (inputText.match(/[0-9]/g) || []).length;\n    const special = total - letters - numbers - (total - noSpaces);\n    const words = inputText.trim().split(/\\s+/).filter(word => word.length > 0).length;\n    const sentences = inputText.split(/[.!?]+/).filter(s => s.trim().length > 0).length;\n\n    setStats({\n      total,\n      noSpaces,\n      letters,\n      numbers,\n      special,\n      words,\n      sentences\n    });\n  };\n\n  const clearText = () => {\n    setText(\"\");\n  };\n\n  const copyText = () => {\n    navigator.clipboard.writeText(text);\n  };\n\n  useEffect(() => {\n    analyzeText(text);\n  }, [text]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-font text-primary mr-2\"></i>\n              Character Counter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Count characters in your text with and without spaces, including detailed character analysis and statistics.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-3\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Enter Your Text</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-6\">\n                    <Textarea\n                      placeholder=\"Type or paste your text here...\"\n                      value={text}\n                      onChange={(e) => setText(e.target.value)}\n                      className=\"w-full h-64 resize-y\"\n                      data-testid=\"textarea-text-input\"\n                    />\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button onClick={clearText} variant=\"secondary\" data-testid=\"button-clear\">\n                      <i className=\"fas fa-trash mr-2\"></i>Clear Text\n                    </Button>\n                    <Button \n                      onClick={copyText}\n                      variant=\"outline\"\n                      disabled={!text}\n                      data-testid=\"button-copy\"\n                    >\n                      <i className=\"fas fa-copy mr-2\"></i>Copy Text\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Character Analysis</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Total Characters</span>\n                      <span className=\"text-2xl font-bold text-primary\" data-testid=\"stat-total\">{stats.total}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Without Spaces</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-no-spaces\">{stats.noSpaces}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Letters</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-letters\">{stats.letters}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Numbers</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-numbers\">{stats.numbers}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Special Characters</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-special\">{stats.special}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Words</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-words\">{stats.words}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Sentences</span>\n                      <span className=\"text-lg font-semibold text-accent\" data-testid=\"stat-sentences\">{stats.sentences}</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":6822},"client/src/pages/tools/countdown-timer.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TimeRemaining {\n  days: number;\n  hours: number;\n  minutes: number;\n  seconds: number;\n  total: number;\n}\n\nexport default function CountdownTimer() {\n  const [targetDate, setTargetDate] = useState(\"\");\n  const [targetTime, setTargetTime] = useState(\"\");\n  const [eventName, setEventName] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState<TimeRemaining | null>(null);\n  const [isActive, setIsActive] = useState(false);\n  const [isFinished, setIsFinished] = useState(false);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  useEffect(() => {\n    document.title = \"Countdown Timer Generator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Create custom countdown timers for events, deadlines, or special occasions with real-time updates.');\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isActive && !isFinished) {\n      intervalRef.current = setInterval(() => {\n        updateCountdown();\n      }, 1000);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isActive, isFinished, targetDate, targetTime]);\n\n  const updateCountdown = () => {\n    if (!targetDate || !targetTime) return;\n\n    const target = new Date(`${targetDate}T${targetTime}`).getTime();\n    const now = new Date().getTime();\n    const difference = target - now;\n\n    if (difference <= 0) {\n      setIsFinished(true);\n      setIsActive(false);\n      setTimeRemaining({\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0,\n        total: 0\n      });\n      \n      // Show notification if available\n      if (\"Notification\" in window && Notification.permission === \"granted\") {\n        new Notification(\"Countdown Finished!\", {\n          body: eventName ? `${eventName} time has arrived!` : \"Your countdown has finished!\",\n          icon: \"/favicon.ico\"\n        });\n      }\n      return;\n    }\n\n    const days = Math.floor(difference / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((difference % (1000 * 60)) / 1000);\n\n    setTimeRemaining({\n      days,\n      hours,\n      minutes,\n      seconds,\n      total: difference\n    });\n  };\n\n  const startCountdown = () => {\n    if (!targetDate || !targetTime) return;\n\n    const target = new Date(`${targetDate}T${targetTime}`);\n    const now = new Date();\n\n    if (target <= now) {\n      alert(\"Please select a future date and time!\");\n      return;\n    }\n\n    setIsActive(true);\n    setIsFinished(false);\n    updateCountdown();\n\n    // Request notification permission\n    if (\"Notification\" in window && Notification.permission === \"default\") {\n      Notification.requestPermission();\n    }\n  };\n\n  const stopCountdown = () => {\n    setIsActive(false);\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  const resetCountdown = () => {\n    setIsActive(false);\n    setIsFinished(false);\n    setTimeRemaining(null);\n    setTargetDate(\"\");\n    setTargetTime(\"\");\n    setEventName(\"\");\n    if (intervalRef.current) {\n      clearInterval(intervalRef.current);\n    }\n  };\n\n  const setQuickTimer = (hours: number) => {\n    const now = new Date();\n    now.setHours(now.getHours() + hours);\n    setTargetDate(now.toISOString().split('T')[0]);\n    setTargetTime(now.toTimeString().slice(0, 5));\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-red-100 to-red-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-hourglass-half text-red-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"countdown-title\">\n              Countdown Timer Generator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"countdown-subtitle\">\n              Create custom countdown timers for events, deadlines, or special occasions with real-time updates\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Setup Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-calendar-plus text-primary\"></i>\n                  <span>Set Target Date & Time</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"eventName\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Event Name (Optional)\n                  </Label>\n                  <Input\n                    id=\"eventName\"\n                    type=\"text\"\n                    value={eventName}\n                    onChange={(e) => setEventName(e.target.value)}\n                    className=\"w-full\"\n                    placeholder=\"New Year's Day, Project Deadline, etc.\"\n                    data-testid=\"input-event-name\"\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"targetDate\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Target Date\n                    </Label>\n                    <Input\n                      id=\"targetDate\"\n                      type=\"date\"\n                      value={targetDate}\n                      onChange={(e) => setTargetDate(e.target.value)}\n                      className=\"w-full\"\n                      min={new Date().toISOString().split('T')[0]}\n                      data-testid=\"input-target-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"targetTime\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Target Time\n                    </Label>\n                    <Input\n                      id=\"targetTime\"\n                      type=\"time\"\n                      value={targetTime}\n                      onChange={(e) => setTargetTime(e.target.value)}\n                      className=\"w-full\"\n                      data-testid=\"input-target-time\"\n                    />\n                  </div>\n                </div>\n\n                {/* Quick Timer Buttons */}\n                <div>\n                  <Label className=\"text-sm font-medium text-slate-700 mb-3 block\">\n                    Quick Timers\n                  </Label>\n                  <div className=\"grid grid-cols-4 gap-2\">\n                    <Button\n                      onClick={() => setQuickTimer(1)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                      data-testid=\"quick-1h\"\n                    >\n                      1h\n                    </Button>\n                    <Button\n                      onClick={() => setQuickTimer(6)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                      data-testid=\"quick-6h\"\n                    >\n                      6h\n                    </Button>\n                    <Button\n                      onClick={() => setQuickTimer(24)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                      data-testid=\"quick-1d\"\n                    >\n                      1 day\n                    </Button>\n                    <Button\n                      onClick={() => setQuickTimer(168)}\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"text-xs\"\n                      data-testid=\"quick-1w\"\n                    >\n                      1 week\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  {!isActive ? (\n                    <Button \n                      onClick={startCountdown} \n                      className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                      disabled={!targetDate || !targetTime}\n                      data-testid=\"button-start\"\n                    >\n                      <i className=\"fas fa-play mr-2\"></i>\n                      Start Countdown\n                    </Button>\n                  ) : (\n                    <Button \n                      onClick={stopCountdown} \n                      className=\"flex-1 bg-red-500 hover:bg-red-600 text-white\"\n                      data-testid=\"button-stop\"\n                    >\n                      <i className=\"fas fa-stop mr-2\"></i>\n                      Stop\n                    </Button>\n                  )}\n                  \n                  <Button \n                    onClick={resetCountdown} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-reset\"\n                  >\n                    <i className=\"fas fa-redo\"></i>\n                  </Button>\n                </div>\n\n                {/* Timer Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Timer Features</span>\n                  </div>\n                  <ul className=\"text-blue-700 space-y-1\">\n                    <li>• Real-time countdown updates</li>\n                    <li>• Browser notifications when finished</li>\n                    <li>• Works even when tab is not active</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Timer Display Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-stopwatch text-accent\"></i>\n                  <span>Countdown Display</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {timeRemaining ? (\n                  <div className=\"space-y-6\" data-testid=\"countdown-display\">\n                    {/* Event Name */}\n                    {eventName && (\n                      <div className=\"text-center\">\n                        <h3 className=\"text-xl font-semibold text-slate-800 mb-2\">{eventName}</h3>\n                      </div>\n                    )}\n\n                    {/* Countdown Display */}\n                    {!isFinished ? (\n                      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                        <div className=\"text-center p-4 bg-gradient-to-br from-red-500 to-pink-500 rounded-xl text-white\">\n                          <div className=\"text-3xl font-bold\" data-testid=\"days-display\">\n                            {timeRemaining.days}\n                          </div>\n                          <div className=\"text-sm text-red-100\">Days</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-gradient-to-br from-orange-500 to-red-500 rounded-xl text-white\">\n                          <div className=\"text-3xl font-bold\" data-testid=\"hours-display\">\n                            {timeRemaining.hours}\n                          </div>\n                          <div className=\"text-sm text-orange-100\">Hours</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-xl text-white\">\n                          <div className=\"text-3xl font-bold\" data-testid=\"minutes-display\">\n                            {timeRemaining.minutes}\n                          </div>\n                          <div className=\"text-sm text-yellow-100\">Minutes</div>\n                        </div>\n                        \n                        <div className=\"text-center p-4 bg-gradient-to-br from-green-500 to-yellow-500 rounded-xl text-white\">\n                          <div className=\"text-3xl font-bold\" data-testid=\"seconds-display\">\n                            {timeRemaining.seconds}\n                          </div>\n                          <div className=\"text-sm text-green-100\">Seconds</div>\n                        </div>\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8\" data-testid=\"finished-display\">\n                        <div className=\"w-20 h-20 bg-gradient-to-br from-green-100 to-green-200 rounded-full flex items-center justify-center mx-auto mb-4\">\n                          <i className=\"fas fa-check text-green-600 text-3xl\"></i>\n                        </div>\n                        <h3 className=\"text-2xl font-bold text-green-600 mb-2\">Time's Up!</h3>\n                        <p className=\"text-slate-600\">\n                          {eventName ? `${eventName} has arrived!` : \"Your countdown has finished!\"}\n                        </p>\n                      </div>\n                    )}\n\n                    {/* Target Date Display */}\n                    <div className=\"bg-slate-50 rounded-xl p-4 text-center\">\n                      <div className=\"text-sm text-slate-600 mb-1\">Target Date & Time</div>\n                      <div className=\"font-medium text-slate-800\">\n                        {new Date(`${targetDate}T${targetTime}`).toLocaleString()}\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-timer\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-hourglass text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Set Your Target</h3>\n                    <p className=\"text-slate-500\">\n                      Choose a date and time to start your countdown\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Perfect For</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-birthday-cake text-pink-500 mt-1\"></i>\n                    <span>Birthday parties and celebrations</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calendar-check text-blue-500 mt-1\"></i>\n                    <span>Project deadlines and milestones</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-heart text-red-500 mt-1\"></i>\n                    <span>Anniversaries and special occasions</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-rocket text-purple-500 mt-1\"></i>\n                    <span>Product launches and events</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-graduation-cap text-green-500 mt-1\"></i>\n                    <span>Exam dates and important deadlines</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Tips & Features</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-bell text-yellow-500 mt-1\"></i>\n                    <span>Enable notifications for completion alerts</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-sync text-blue-500 mt-1\"></i>\n                    <span>Timer continues running in background</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-mobile-alt text-green-500 mt-1\"></i>\n                    <span>Works on desktop and mobile devices</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-share text-purple-500 mt-1\"></i>\n                    <span>Bookmark the page to save your timer</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-clock text-orange-500 mt-1\"></i>\n                    <span>Use quick timers for common durations</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":18605},"client/src/pages/tools/currency-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nconst majorCurrencies = {\n  USD: { name: \"US Dollar\", symbol: \"$\" },\n  EUR: { name: \"Euro\", symbol: \"€\" },\n  GBP: { name: \"British Pound\", symbol: \"£\" },\n  JPY: { name: \"Japanese Yen\", symbol: \"¥\" },\n  AUD: { name: \"Australian Dollar\", symbol: \"A$\" },\n  CAD: { name: \"Canadian Dollar\", symbol: \"C$\" },\n  CHF: { name: \"Swiss Franc\", symbol: \"CHF\" },\n  CNY: { name: \"Chinese Yuan\", symbol: \"¥\" },\n  INR: { name: \"Indian Rupee\", symbol: \"₹\" },\n  KRW: { name: \"South Korean Won\", symbol: \"₩\" }\n};\n\nexport default function CurrencyConverter() {\n  const [fromAmount, setFromAmount] = useState(\"\");\n  const [toAmount, setToAmount] = useState(\"\");\n  const [fromCurrency, setFromCurrency] = useState(\"USD\");\n  const [toCurrency, setToCurrency] = useState(\"EUR\");\n  const [exchangeRate, setExchangeRate] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Currency Converter - ToolHub | Free Online Currency Converter\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between different currencies with real-time exchange rates. Supports 170+ currencies worldwide. Free currency converter.');\n    }\n  }, []);\n\n  // Mock exchange rates for demo (in a real app, you'd fetch from an API)\n  const mockExchangeRates: Record<string, Record<string, number>> = {\n    USD: { EUR: 0.85, GBP: 0.73, JPY: 110.0, AUD: 1.35, CAD: 1.25, CHF: 0.92, CNY: 6.45, INR: 74.5, KRW: 1180.0 },\n    EUR: { USD: 1.18, GBP: 0.86, JPY: 129.5, AUD: 1.59, CAD: 1.47, CHF: 1.08, CNY: 7.6, INR: 87.8, KRW: 1391.0 },\n    GBP: { USD: 1.37, EUR: 1.16, JPY: 150.8, AUD: 1.85, CAD: 1.71, CHF: 1.26, CNY: 8.84, INR: 102.1, KRW: 1617.0 }\n  };\n\n  const getExchangeRate = (from: string, to: string): number => {\n    if (from === to) return 1;\n    \n    // Use mock data for demo\n    if (mockExchangeRates[from] && mockExchangeRates[from][to]) {\n      return mockExchangeRates[from][to];\n    }\n    \n    // Reverse calculation if direct rate not available\n    if (mockExchangeRates[to] && mockExchangeRates[to][from]) {\n      return 1 / mockExchangeRates[to][from];\n    }\n    \n    // Fallback to USD conversion\n    if (from !== 'USD' && to !== 'USD') {\n      const toUSD = mockExchangeRates[from]?.USD || 1;\n      const fromUSD = mockExchangeRates['USD']?.[to] || 1;\n      return toUSD * fromUSD;\n    }\n    \n    return 1; // Fallback\n  };\n\n  const convertCurrency = () => {\n    const amount = parseFloat(fromAmount);\n    \n    if (isNaN(amount) || fromAmount === '') {\n      setToAmount('');\n      setExchangeRate(0);\n      return;\n    }\n\n    setLoading(true);\n    \n    // Simulate API delay\n    setTimeout(() => {\n      const rate = getExchangeRate(fromCurrency, toCurrency);\n      const convertedAmount = amount * rate;\n      \n      setExchangeRate(rate);\n      setToAmount(convertedAmount.toFixed(2));\n      setLoading(false);\n    }, 500);\n  };\n\n  const swapCurrencies = () => {\n    setFromCurrency(toCurrency);\n    setToCurrency(fromCurrency);\n    setFromAmount(toAmount);\n    setToAmount(fromAmount);\n  };\n\n  const resetForm = () => {\n    setFromAmount('');\n    setToAmount('');\n    setExchangeRate(0);\n  };\n\n  useEffect(() => {\n    if (fromAmount) {\n      convertCurrency();\n    }\n  }, [fromAmount, fromCurrency, toCurrency]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-exchange-alt text-primary mr-2\"></i>\n              Currency Converter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Convert between different currencies with real-time exchange rates. Supports major currencies worldwide.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Convert Currency</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">From</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter amount\"\n                          value={fromAmount}\n                          onChange={(e) => setFromAmount(e.target.value)}\n                          data-testid=\"input-from-amount\"\n                        />\n                        <Select value={fromCurrency} onValueChange={setFromCurrency}>\n                          <SelectTrigger data-testid=\"select-from-currency\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(majorCurrencies).map(([code, currency]) => (\n                              <SelectItem key={code} value={code}>\n                                {code} - {currency.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">To</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Converted amount\"\n                          value={loading ? \"Converting...\" : toAmount}\n                          readOnly\n                          className=\"bg-slate-50\"\n                          data-testid=\"input-to-amount\"\n                        />\n                        <Select value={toCurrency} onValueChange={setToCurrency}>\n                          <SelectTrigger data-testid=\"select-to-currency\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(majorCurrencies).map(([code, currency]) => (\n                              <SelectItem key={code} value={code}>\n                                {code} - {currency.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3 mb-6\">\n                    <Button onClick={convertCurrency} className=\"flex-1\" disabled={loading} data-testid=\"button-convert\">\n                      <i className=\"fas fa-sync-alt mr-2\"></i>Convert\n                    </Button>\n                    <Button onClick={resetForm} variant=\"secondary\" className=\"flex-1\" data-testid=\"button-reset\">\n                      <i className=\"fas fa-undo mr-2\"></i>Reset\n                    </Button>\n                    <Button onClick={swapCurrencies} variant=\"outline\" data-testid=\"button-swap\">\n                      <i className=\"fas fa-exchange-alt mr-2\"></i>Swap\n                    </Button>\n                  </div>\n\n                  {exchangeRate > 0 && (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\" data-testid=\"exchange-rate\">\n                      <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Exchange Rate</h3>\n                      <p className=\"text-blue-700 text-sm\">\n                        1 {fromCurrency} = {exchangeRate.toFixed(4)} {toCurrency}\n                      </p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Popular Currencies</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 text-sm\">\n                    {Object.entries(majorCurrencies).slice(0, 6).map(([code, currency]) => (\n                      <div key={code} className=\"flex justify-between items-center\">\n                        <span className=\"text-slate-600\">{code}</span>\n                        <span className=\"font-medium\">{currency.name}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle>Note</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-slate-600\">\n                    Exchange rates are for demonstration purposes. For real trading, please use official financial data sources.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":9990},"client/src/pages/tools/length-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nconst lengthUnits = {\n  meter: { name: \"Meter (m)\", factor: 1 },\n  kilometer: { name: \"Kilometer (km)\", factor: 1000 },\n  centimeter: { name: \"Centimeter (cm)\", factor: 0.01 },\n  millimeter: { name: \"Millimeter (mm)\", factor: 0.001 },\n  inch: { name: \"Inch (in)\", factor: 0.0254 },\n  foot: { name: \"Foot (ft)\", factor: 0.3048 },\n  yard: { name: \"Yard (yd)\", factor: 0.9144 },\n  mile: { name: \"Mile (mi)\", factor: 1609.344 },\n  nauticalMile: { name: \"Nautical Mile\", factor: 1852 }\n};\n\nexport default function LengthConverter() {\n  const [fromValue, setFromValue] = useState(\"\");\n  const [toValue, setToValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"meter\");\n  const [toUnit, setToUnit] = useState(\"foot\");\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Length Converter - ToolHub | Free Online Length Unit Converter\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between length units instantly. Convert meters, feet, inches, kilometers, miles, yards, centimeters and more. Free, fast, and accurate length converter.');\n    }\n  }, []);\n\n  const convertLength = () => {\n    const value = parseFloat(fromValue);\n    \n    if (isNaN(value) || fromValue === '') {\n      setToValue('');\n      return;\n    }\n\n    // Convert to meters first, then to target unit\n    const meters = value * lengthUnits[fromUnit as keyof typeof lengthUnits].factor;\n    const convertedValue = meters / lengthUnits[toUnit as keyof typeof lengthUnits].factor;\n    \n    setToValue(convertedValue.toFixed(6).replace(/\\.?0+$/, ''));\n  };\n\n  const resetForm = () => {\n    setFromValue('');\n    setToValue('');\n  };\n\n  const swapUnits = () => {\n    setFromUnit(toUnit);\n    setToUnit(fromUnit);\n    setFromValue(toValue);\n    setToValue(fromValue);\n  };\n\n  useEffect(() => {\n    if (fromValue) {\n      convertLength();\n    }\n  }, [fromValue, fromUnit, toUnit]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-ruler text-primary mr-2\"></i>\n              Length Converter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Convert between different length units instantly. Our free length converter supports meters, feet, inches, kilometers, miles, and more.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Convert Length Units</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">From</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter value\"\n                          value={fromValue}\n                          onChange={(e) => setFromValue(e.target.value)}\n                          data-testid=\"input-from-value\"\n                        />\n                        <Select value={fromUnit} onValueChange={setFromUnit}>\n                          <SelectTrigger data-testid=\"select-from-unit\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(lengthUnits).map(([key, unit]) => (\n                              <SelectItem key={key} value={key}>{unit.name}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">To</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Result\"\n                          value={toValue}\n                          readOnly\n                          className=\"bg-slate-50\"\n                          data-testid=\"input-to-value\"\n                        />\n                        <Select value={toUnit} onValueChange={setToUnit}>\n                          <SelectTrigger data-testid=\"select-to-unit\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(lengthUnits).map(([key, unit]) => (\n                              <SelectItem key={key} value={key}>{unit.name}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button onClick={convertLength} className=\"flex-1\" data-testid=\"button-convert\">\n                      <i className=\"fas fa-sync-alt mr-2\"></i>Convert\n                    </Button>\n                    <Button onClick={resetForm} variant=\"secondary\" className=\"flex-1\" data-testid=\"button-reset\">\n                      <i className=\"fas fa-undo mr-2\"></i>Reset\n                    </Button>\n                    <Button onClick={swapUnits} variant=\"outline\" data-testid=\"button-swap\">\n                      <i className=\"fas fa-exchange-alt mr-2\"></i>Swap\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Common Conversions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 meter</span>\n                      <span className=\"font-medium\">3.28 feet</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 kilometer</span>\n                      <span className=\"font-medium\">0.62 miles</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 inch</span>\n                      <span className=\"font-medium\">2.54 cm</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 foot</span>\n                      <span className=\"font-medium\">12 inches</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 yard</span>\n                      <span className=\"font-medium\">3 feet</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":8181},"client/src/pages/tools/lorem-ipsum-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nconst loremWords = [\n  \"lorem\", \"ipsum\", \"dolor\", \"sit\", \"amet\", \"consectetur\", \"adipiscing\", \"elit\",\n  \"sed\", \"do\", \"eiusmod\", \"tempor\", \"incididunt\", \"ut\", \"labore\", \"et\", \"dolore\",\n  \"magna\", \"aliqua\", \"enim\", \"ad\", \"minim\", \"veniam\", \"quis\", \"nostrud\",\n  \"exercitation\", \"ullamco\", \"laboris\", \"nisi\", \"aliquip\", \"ex\", \"ea\", \"commodo\",\n  \"consequat\", \"duis\", \"aute\", \"irure\", \"in\", \"reprehenderit\", \"voluptate\",\n  \"velit\", \"esse\", \"cillum\", \"fugiat\", \"nulla\", \"pariatur\", \"excepteur\", \"sint\",\n  \"occaecat\", \"cupidatat\", \"non\", \"proident\", \"sunt\", \"culpa\", \"qui\", \"officia\",\n  \"deserunt\", \"mollit\", \"anim\", \"id\", \"est\", \"laborum\"\n];\n\nexport default function LoremIpsumGenerator() {\n  const [type, setType] = useState(\"paragraphs\");\n  const [count, setCount] = useState(\"3\");\n  const [startWithLorem, setStartWithLorem] = useState(true);\n  const [generatedText, setGeneratedText] = useState(\"\");\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Lorem Ipsum Generator - ToolHub | Free Lorem Ipsum Text Generator\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Generate Lorem Ipsum placeholder text for designs and mockups with customizable options. Free Lorem Ipsum generator.');\n    }\n  }, []);\n\n  const getRandomWord = () => {\n    return loremWords[Math.floor(Math.random() * loremWords.length)];\n  };\n\n  const generateSentence = (wordCount = Math.floor(Math.random() * 15) + 5) => {\n    let sentence = [];\n    for (let i = 0; i < wordCount; i++) {\n      sentence.push(getRandomWord());\n    }\n    return sentence.join(\" \") + \".\";\n  };\n\n  const generateParagraph = (sentenceCount = Math.floor(Math.random() * 5) + 3) => {\n    let paragraph = [];\n    for (let i = 0; i < sentenceCount; i++) {\n      let sentence = generateSentence();\n      if (i === 0 && startWithLorem && !generatedText) {\n        sentence = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n      } else {\n        sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n      }\n      paragraph.push(sentence);\n    }\n    return paragraph.join(\" \");\n  };\n\n  const generateWords = (wordCount: number) => {\n    let words = [];\n    for (let i = 0; i < wordCount; i++) {\n      if (i === 0 && startWithLorem) {\n        words.push(\"Lorem\", \"ipsum\");\n        i += 1;\n      } else {\n        words.push(getRandomWord());\n      }\n    }\n    return words.join(\" \");\n  };\n\n  const generateText = () => {\n    const numCount = parseInt(count);\n    let result = \"\";\n\n    switch (type) {\n      case \"words\":\n        result = generateWords(numCount);\n        break;\n      case \"sentences\":\n        let sentences = [];\n        for (let i = 0; i < numCount; i++) {\n          let sentence = generateSentence();\n          if (i === 0 && startWithLorem) {\n            sentence = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\";\n          } else {\n            sentence = sentence.charAt(0).toUpperCase() + sentence.slice(1);\n          }\n          sentences.push(sentence);\n        }\n        result = sentences.join(\" \");\n        break;\n      case \"paragraphs\":\n        let paragraphs = [];\n        for (let i = 0; i < numCount; i++) {\n          paragraphs.push(generateParagraph());\n        }\n        result = paragraphs.join(\"\\n\\n\");\n        break;\n    }\n\n    setGeneratedText(result);\n  };\n\n  const copyText = () => {\n    navigator.clipboard.writeText(generatedText);\n  };\n\n  const clearText = () => {\n    setGeneratedText(\"\");\n  };\n\n  useEffect(() => {\n    generateText();\n  }, [type, count, startWithLorem]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-paragraph text-primary mr-2\"></i>\n              Lorem Ipsum Generator\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Generate Lorem Ipsum placeholder text for designs and mockups with customizable options.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-1\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Generator Settings</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"type\">Generate</Label>\n                      <Select value={type} onValueChange={setType}>\n                        <SelectTrigger data-testid=\"select-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"words\">Words</SelectItem>\n                          <SelectItem value=\"sentences\">Sentences</SelectItem>\n                          <SelectItem value=\"paragraphs\">Paragraphs</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    <div>\n                      <Label htmlFor=\"count\">\n                        Number of {type}\n                      </Label>\n                      <Input\n                        id=\"count\"\n                        type=\"number\"\n                        min=\"1\"\n                        max=\"100\"\n                        value={count}\n                        onChange={(e) => setCount(e.target.value)}\n                        data-testid=\"input-count\"\n                      />\n                    </div>\n\n                    <div className=\"flex items-center space-x-2\">\n                      <input\n                        type=\"checkbox\"\n                        id=\"start-lorem\"\n                        checked={startWithLorem}\n                        onChange={(e) => setStartWithLorem(e.target.checked)}\n                        className=\"rounded\"\n                        data-testid=\"checkbox-start-lorem\"\n                      />\n                      <Label htmlFor=\"start-lorem\">Start with \"Lorem ipsum\"</Label>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <Button onClick={generateText} className=\"w-full\" data-testid=\"button-generate\">\n                        <i className=\"fas fa-refresh mr-2\"></i>Generate Text\n                      </Button>\n                      <Button onClick={clearText} variant=\"secondary\" className=\"w-full\" data-testid=\"button-clear\">\n                        <i className=\"fas fa-trash mr-2\"></i>Clear\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Generated Lorem Ipsum Text</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <Textarea\n                      placeholder=\"Generated text will appear here...\"\n                      value={generatedText}\n                      readOnly\n                      className=\"w-full h-80 resize-y bg-slate-50\"\n                      data-testid=\"textarea-output\"\n                    />\n                    \n                    <div className=\"flex gap-3\">\n                      <Button \n                        onClick={copyText}\n                        disabled={!generatedText}\n                        data-testid=\"button-copy\"\n                      >\n                        <i className=\"fas fa-copy mr-2\"></i>Copy Text\n                      </Button>\n                      <span className=\"text-sm text-slate-600 flex items-center\">\n                        {generatedText.split(' ').length} words, {generatedText.length} characters\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":8993},"client/src/pages/tools/palindrome-checker.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function PalindromeChecker() {\n  const [inputText, setInputText] = useState(\"\");\n  const [result, setResult] = useState<{\n    isPalindrome: boolean;\n    cleanedText: string;\n    reversedText: string;\n  } | null>(null);\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Palindrome Checker - ToolHub | Free Online Palindrome Checker Tool\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Check if words, phrases, or sentences are palindromes with detailed analysis and examples. Free palindrome checker tool.');\n    }\n  }, []);\n\n  const checkPalindrome = () => {\n    if (!inputText.trim()) {\n      setResult(null);\n      return;\n    }\n\n    // Clean the text: remove spaces, punctuation, and convert to lowercase\n    const cleanedText = inputText.toLowerCase().replace(/[^a-z0-9]/g, '');\n    const reversedText = cleanedText.split('').reverse().join('');\n    const isPalindrome = cleanedText === reversedText;\n\n    setResult({\n      isPalindrome,\n      cleanedText,\n      reversedText\n    });\n  };\n\n  const clearText = () => {\n    setInputText(\"\");\n    setResult(null);\n  };\n\n  const examplePalindromes = [\n    \"racecar\",\n    \"A man a plan a canal Panama\",\n    \"race a car\",\n    \"Was it a car or a cat I saw?\",\n    \"Madam\",\n    \"No 'x' in Nixon\",\n    \"Mr. Owl ate my metal worm\"\n  ];\n\n  const tryExample = (example: string) => {\n    setInputText(example);\n    setTimeout(() => {\n      checkPalindrome();\n    }, 100);\n  };\n\n  useEffect(() => {\n    if (inputText) {\n      checkPalindrome();\n    } else {\n      setResult(null);\n    }\n  }, [inputText]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-exchange-alt text-primary mr-2\"></i>\n              Palindrome Checker\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Check if words, phrases, or sentences are palindromes with detailed analysis and examples.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Palindrome Checker</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label htmlFor=\"palindrome-input\">Enter text to check</Label>\n                      <Input\n                        id=\"palindrome-input\"\n                        type=\"text\"\n                        placeholder=\"Enter a word, phrase, or sentence...\"\n                        value={inputText}\n                        onChange={(e) => setInputText(e.target.value)}\n                        className=\"mt-2\"\n                        data-testid=\"input-text\"\n                      />\n                    </div>\n\n                    <div className=\"flex gap-3\">\n                      <Button onClick={checkPalindrome} disabled={!inputText} data-testid=\"button-check\">\n                        <i className=\"fas fa-search mr-2\"></i>Check Palindrome\n                      </Button>\n                      <Button onClick={clearText} variant=\"secondary\" data-testid=\"button-clear\">\n                        <i className=\"fas fa-trash mr-2\"></i>Clear\n                      </Button>\n                    </div>\n\n                    {result && (\n                      <div className=\"space-y-4\">\n                        <div className={`p-4 rounded-lg border-2 ${\n                          result.isPalindrome \n                            ? 'bg-green-50 border-green-200' \n                            : 'bg-red-50 border-red-200'\n                        }`}>\n                          <div className=\"flex items-center mb-2\">\n                            <i className={`fas ${\n                              result.isPalindrome ? 'fa-check-circle text-green-600' : 'fa-times-circle text-red-600'\n                            } mr-2`}></i>\n                            <span className={`font-semibold ${\n                              result.isPalindrome ? 'text-green-800' : 'text-red-800'\n                            }`} data-testid=\"result-status\">\n                              {result.isPalindrome ? \"Yes, it's a palindrome!\" : \"No, it's not a palindrome.\"}\n                            </span>\n                          </div>\n                          <div className=\"text-sm space-y-1\">\n                            <p className=\"text-slate-600\">\n                              <strong>Cleaned text:</strong> <span data-testid=\"cleaned-text\">{result.cleanedText}</span>\n                            </p>\n                            <p className=\"text-slate-600\">\n                              <strong>Reversed text:</strong> <span data-testid=\"reversed-text\">{result.reversedText}</span>\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Example Palindromes</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    {examplePalindromes.map((example, index) => (\n                      <button\n                        key={index}\n                        onClick={() => tryExample(example)}\n                        className=\"w-full text-left p-2 text-sm bg-slate-100 hover:bg-slate-200 rounded-lg transition-colors duration-200\"\n                        data-testid={`example-${index}`}\n                      >\n                        \"{example}\"\n                      </button>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"mt-6\">\n                <CardHeader>\n                  <CardTitle>What is a Palindrome?</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-slate-600\">\n                    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward. \n                    Spaces, punctuation, and capitalization are typically ignored when checking for palindromes.\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":7451},"client/src/pages/tools/qr-code-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function QRCodeGenerator() {\n  const [text, setText] = useState(\"\");\n  const [qrType, setQrType] = useState(\"text\");\n  const [qrCodeUrl, setQrCodeUrl] = useState(\"\");\n  const [size, setSize] = useState(\"200\");\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"QR Code Generator - ToolHub | Free Online QR Code Generator\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Generate QR codes for text, URLs, contact info, WiFi credentials, and more with download options. Free QR code generator.');\n    }\n  }, []);\n\n  const generateQRCode = () => {\n    if (!text.trim()) {\n      setQrCodeUrl(\"\");\n      return;\n    }\n\n    let qrText = text;\n    \n    // Format based on QR type\n    switch(qrType) {\n      case 'url':\n        if (!text.startsWith('http://') && !text.startsWith('https://')) {\n          qrText = 'https://' + text;\n        }\n        break;\n      case 'email':\n        qrText = `mailto:${text}`;\n        break;\n      case 'phone':\n        qrText = `tel:${text}`;\n        break;\n      case 'sms':\n        qrText = `sms:${text}`;\n        break;\n    }\n\n    // Use QR Server API for generating QR codes\n    const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(qrText)}`;\n    setQrCodeUrl(qrApiUrl);\n  };\n\n  const downloadQRCode = () => {\n    if (!qrCodeUrl) return;\n    \n    const link = document.createElement('a');\n    link.href = qrCodeUrl;\n    link.download = 'qrcode.png';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const clearForm = () => {\n    setText(\"\");\n    setQrCodeUrl(\"\");\n  };\n\n  useEffect(() => {\n    if (text) {\n      generateQRCode();\n    } else {\n      setQrCodeUrl(\"\");\n    }\n  }, [text, qrType, size]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-qrcode text-primary mr-2\"></i>\n              QR Code Generator\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Generate QR codes for text, URLs, contact info, WiFi credentials, and more with download options.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>QR Code Settings</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div>\n                    <Label htmlFor=\"qr-type\">QR Code Type</Label>\n                    <Select value={qrType} onValueChange={setQrType}>\n                      <SelectTrigger data-testid=\"select-qr-type\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"text\">Plain Text</SelectItem>\n                        <SelectItem value=\"url\">Website URL</SelectItem>\n                        <SelectItem value=\"email\">Email Address</SelectItem>\n                        <SelectItem value=\"phone\">Phone Number</SelectItem>\n                        <SelectItem value=\"sms\">SMS</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"qr-size\">QR Code Size</Label>\n                    <Select value={size} onValueChange={setSize}>\n                      <SelectTrigger data-testid=\"select-size\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"150\">150x150</SelectItem>\n                        <SelectItem value=\"200\">200x200</SelectItem>\n                        <SelectItem value=\"300\">300x300</SelectItem>\n                        <SelectItem value=\"400\">400x400</SelectItem>\n                        <SelectItem value=\"500\">500x500</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"qr-content\">Content</Label>\n                    {qrType === 'text' ? (\n                      <Textarea\n                        id=\"qr-content\"\n                        placeholder=\"Enter your text here...\"\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        className=\"mt-2\"\n                        data-testid=\"textarea-content\"\n                      />\n                    ) : (\n                      <Input\n                        id=\"qr-content\"\n                        type=\"text\"\n                        placeholder={\n                          qrType === 'url' ? 'https://example.com' :\n                          qrType === 'email' ? 'user@example.com' :\n                          qrType === 'phone' ? '+1234567890' :\n                          'Message text'\n                        }\n                        value={text}\n                        onChange={(e) => setText(e.target.value)}\n                        className=\"mt-2\"\n                        data-testid=\"input-content\"\n                      />\n                    )}\n                  </div>\n\n                  <div className=\"flex gap-3\">\n                    <Button onClick={generateQRCode} disabled={!text} data-testid=\"button-generate\">\n                      <i className=\"fas fa-qrcode mr-2\"></i>Generate QR Code\n                    </Button>\n                    <Button onClick={clearForm} variant=\"secondary\" data-testid=\"button-clear\">\n                      <i className=\"fas fa-trash mr-2\"></i>Clear\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Generated QR Code</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center space-y-6\">\n                  {qrCodeUrl ? (\n                    <>\n                      <div className=\"flex justify-center\">\n                        <img \n                          src={qrCodeUrl} \n                          alt=\"Generated QR Code\"\n                          className=\"border border-slate-200 rounded-lg shadow-sm\"\n                          data-testid=\"qr-code-image\"\n                        />\n                      </div>\n                      <div className=\"space-y-3\">\n                        <Button onClick={downloadQRCode} className=\"w-full\" data-testid=\"button-download\">\n                          <i className=\"fas fa-download mr-2\"></i>Download QR Code\n                        </Button>\n                        <p className=\"text-sm text-slate-600\">\n                          Right-click and \"Save image as...\" to save the QR code\n                        </p>\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"flex items-center justify-center h-64 bg-slate-100 rounded-lg border-2 border-dashed border-slate-300\">\n                      <div className=\"text-center\">\n                        <i className=\"fas fa-qrcode text-4xl text-slate-400 mb-4\"></i>\n                        <p className=\"text-slate-500\">Enter content to generate QR code</p>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":8583},"client/src/pages/tools/random-password-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Slider } from \"@/components/ui/slider\";\n\nexport default function RandomPasswordGenerator() {\n  const [password, setPassword] = useState(\"\");\n  const [length, setLength] = useState([12]);\n  const [includeUppercase, setIncludeUppercase] = useState(true);\n  const [includeLowercase, setIncludeLowercase] = useState(true);\n  const [includeNumbers, setIncludeNumbers] = useState(true);\n  const [includeSymbols, setIncludeSymbols] = useState(true);\n  const [excludeSimilar, setExcludeSimilar] = useState(false);\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Random Password Generator - ToolHub | Free Secure Password Generator\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Generate strong, secure passwords with customizable options for length and character types. Free password generator with security indicators.');\n    }\n  }, []);\n\n  const generatePassword = () => {\n    let charset = \"\";\n    \n    if (includeUppercase) charset += \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    if (includeLowercase) charset += \"abcdefghijklmnopqrstuvwxyz\";\n    if (includeNumbers) charset += \"0123456789\";\n    if (includeSymbols) charset += \"!@#$%^&*()_+-=[]{}|;:,.<>?\";\n    \n    if (excludeSimilar) {\n      charset = charset.replace(/[il1Lo0O]/g, '');\n    }\n    \n    if (charset === \"\") {\n      alert(\"Please select at least one character type!\");\n      return;\n    }\n    \n    let generatedPassword = \"\";\n    for (let i = 0; i < length[0]; i++) {\n      generatedPassword += charset.charAt(Math.floor(Math.random() * charset.length));\n    }\n    \n    setPassword(generatedPassword);\n  };\n\n  const copyPassword = () => {\n    navigator.clipboard.writeText(password);\n  };\n\n  const getPasswordStrength = () => {\n    if (!password) return { strength: \"None\", color: \"text-slate-400\", score: 0 };\n    \n    let score = 0;\n    if (password.length >= 8) score++;\n    if (password.length >= 12) score++;\n    if (/[A-Z]/.test(password)) score++;\n    if (/[a-z]/.test(password)) score++;\n    if (/[0-9]/.test(password)) score++;\n    if (/[^A-Za-z0-9]/.test(password)) score++;\n    \n    if (score <= 2) return { strength: \"Weak\", color: \"text-red-600\", score };\n    if (score <= 4) return { strength: \"Medium\", color: \"text-yellow-600\", score };\n    return { strength: \"Strong\", color: \"text-green-600\", score };\n  };\n\n  const strength = getPasswordStrength();\n\n  useEffect(() => {\n    generatePassword();\n  }, [length, includeUppercase, includeLowercase, includeNumbers, includeSymbols, excludeSimilar]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-key text-primary mr-2\"></i>\n              Random Password Generator\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Generate strong, secure passwords with customizable options for length and character types.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Generated Password</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div className=\"relative\">\n                      <Input\n                        type=\"text\"\n                        value={password}\n                        readOnly\n                        className=\"text-lg font-mono pr-20\"\n                        data-testid=\"input-password\"\n                      />\n                      <Button \n                        onClick={copyPassword}\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"absolute right-2 top-1/2 transform -translate-y-1/2\"\n                        data-testid=\"button-copy\"\n                      >\n                        <i className=\"fas fa-copy\"></i>\n                      </Button>\n                    </div>\n\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-sm text-slate-600\">Password Strength:</span>\n                      <span className={`font-semibold ${strength.color}`} data-testid=\"password-strength\">\n                        {strength.strength}\n                      </span>\n                    </div>\n\n                    <div className=\"w-full bg-slate-200 rounded-full h-2\">\n                      <div \n                        className={`h-2 rounded-full transition-all duration-300 ${\n                          strength.score <= 2 ? 'bg-red-500' : \n                          strength.score <= 4 ? 'bg-yellow-500' : 'bg-green-500'\n                        }`}\n                        style={{ width: `${(strength.score / 6) * 100}%` }}\n                      ></div>\n                    </div>\n\n                    <Button onClick={generatePassword} className=\"w-full\" data-testid=\"button-generate\">\n                      <i className=\"fas fa-refresh mr-2\"></i>Generate New Password\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Password Options</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    <div>\n                      <Label>Length: {length[0]}</Label>\n                      <Slider\n                        value={length}\n                        onValueChange={setLength}\n                        max={50}\n                        min={4}\n                        step={1}\n                        className=\"mt-2\"\n                        data-testid=\"slider-length\"\n                      />\n                    </div>\n\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id=\"uppercase\"\n                          checked={includeUppercase}\n                          onCheckedChange={(checked) => setIncludeUppercase(checked as boolean)}\n                          data-testid=\"checkbox-uppercase\"\n                        />\n                        <Label htmlFor=\"uppercase\">Uppercase (A-Z)</Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id=\"lowercase\"\n                          checked={includeLowercase}\n                          onCheckedChange={(checked) => setIncludeLowercase(checked as boolean)}\n                          data-testid=\"checkbox-lowercase\"\n                        />\n                        <Label htmlFor=\"lowercase\">Lowercase (a-z)</Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id=\"numbers\"\n                          checked={includeNumbers}\n                          onCheckedChange={(checked) => setIncludeNumbers(checked as boolean)}\n                          data-testid=\"checkbox-numbers\"\n                        />\n                        <Label htmlFor=\"numbers\">Numbers (0-9)</Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id=\"symbols\"\n                          checked={includeSymbols}\n                          onCheckedChange={(checked) => setIncludeSymbols(checked as boolean)}\n                          data-testid=\"checkbox-symbols\"\n                        />\n                        <Label htmlFor=\"symbols\">Symbols (!@#$%^&*)</Label>\n                      </div>\n\n                      <div className=\"flex items-center space-x-2\">\n                        <Checkbox \n                          id=\"exclude-similar\"\n                          checked={excludeSimilar}\n                          onCheckedChange={(checked) => setExcludeSimilar(checked as boolean)}\n                          data-testid=\"checkbox-exclude-similar\"\n                        />\n                        <Label htmlFor=\"exclude-similar\">Exclude similar characters</Label>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":9463},"client/src/pages/tools/remove-extra-spaces.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n\ninterface CleaningOptions {\n  removeExtraSpaces: boolean;\n  removeLineBreaks: boolean;\n  removeTabs: boolean;\n  trimLines: boolean;\n  removeEmptyLines: boolean;\n}\n\ninterface TextStats {\n  originalLength: number;\n  cleanedLength: number;\n  spacesRemoved: number;\n  linesRemoved: number;\n}\n\nexport default function RemoveExtraSpaces() {\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n  const [options, setOptions] = useState<CleaningOptions>({\n    removeExtraSpaces: true,\n    removeLineBreaks: false,\n    removeTabs: true,\n    trimLines: true,\n    removeEmptyLines: true\n  });\n  const [stats, setStats] = useState<TextStats | null>(null);\n\n  useEffect(() => {\n    document.title = \"Remove Extra Spaces - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Clean up text by removing extra spaces, duplicate spaces, and formatting issues instantly.');\n    }\n  }, []);\n\n  const cleanText = () => {\n    if (!inputText.trim()) return;\n\n    let cleanedText = inputText;\n    const originalLength = inputText.length;\n    const originalLines = inputText.split('\\n').length;\n\n    // Remove extra spaces between words\n    if (options.removeExtraSpaces) {\n      cleanedText = cleanedText.replace(/\\s+/g, ' ');\n    }\n\n    // Remove line breaks\n    if (options.removeLineBreaks) {\n      cleanedText = cleanedText.replace(/\\n/g, ' ');\n    }\n\n    // Remove tabs\n    if (options.removeTabs) {\n      cleanedText = cleanedText.replace(/\\t/g, ' ');\n    }\n\n    // Process line by line for trimming and empty line removal\n    if (options.trimLines || options.removeEmptyLines) {\n      const lines = cleanedText.split('\\n');\n      let processedLines = lines;\n\n      if (options.trimLines) {\n        processedLines = processedLines.map(line => line.trim());\n      }\n\n      if (options.removeEmptyLines) {\n        processedLines = processedLines.filter(line => line.length > 0);\n      }\n\n      cleanedText = processedLines.join('\\n');\n    }\n\n    // Remove any remaining multiple spaces\n    if (options.removeExtraSpaces) {\n      cleanedText = cleanedText.replace(/  +/g, ' ');\n    }\n\n    // Final trim\n    cleanedText = cleanedText.trim();\n\n    setOutputText(cleanedText);\n\n    // Calculate stats\n    const cleanedLength = cleanedText.length;\n    const cleanedLines = cleanedText.split('\\n').length;\n\n    setStats({\n      originalLength,\n      cleanedLength,\n      spacesRemoved: originalLength - cleanedLength,\n      linesRemoved: originalLines - cleanedLines\n    });\n  };\n\n  const copyToClipboard = async () => {\n    try {\n      await navigator.clipboard.writeText(outputText);\n      alert(\"Cleaned text copied to clipboard!\");\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  const clearAll = () => {\n    setInputText(\"\");\n    setOutputText(\"\");\n    setStats(null);\n  };\n\n  const updateOption = (key: keyof CleaningOptions, value: boolean) => {\n    setOptions(prev => ({ ...prev, [key]: value }));\n  };\n\n  const getSampleText = () => {\n    const sample = `This    is   a    sample    text    with     extra    spaces.\n\n\nThere are   multiple    empty lines    above.\n\n\tAnd some\ttabs\there.\n\n  Lines with leading and trailing spaces  \n\nMore    unnecessary    spacing    everywhere.`;\n    setInputText(sample);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-100 to-cyan-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-eraser text-cyan-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"remove-spaces-title\">\n              Remove Extra Spaces\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"remove-spaces-subtitle\">\n              Clean up text by removing extra spaces, duplicate spaces, and formatting issues instantly\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-3 gap-8\">\n            {/* Options Panel */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-cogs text-primary\"></i>\n                  <span>Cleaning Options</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"removeExtraSpaces\"\n                      checked={options.removeExtraSpaces}\n                      onCheckedChange={(checked) => updateOption('removeExtraSpaces', !!checked)}\n                      data-testid=\"option-extra-spaces\"\n                    />\n                    <Label htmlFor=\"removeExtraSpaces\" className=\"text-sm\">\n                      Remove extra spaces between words\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"trimLines\"\n                      checked={options.trimLines}\n                      onCheckedChange={(checked) => updateOption('trimLines', !!checked)}\n                      data-testid=\"option-trim-lines\"\n                    />\n                    <Label htmlFor=\"trimLines\" className=\"text-sm\">\n                      Remove leading/trailing spaces from lines\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"removeTabs\"\n                      checked={options.removeTabs}\n                      onCheckedChange={(checked) => updateOption('removeTabs', !!checked)}\n                      data-testid=\"option-remove-tabs\"\n                    />\n                    <Label htmlFor=\"removeTabs\" className=\"text-sm\">\n                      Replace tabs with spaces\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"removeEmptyLines\"\n                      checked={options.removeEmptyLines}\n                      onCheckedChange={(checked) => updateOption('removeEmptyLines', !!checked)}\n                      data-testid=\"option-empty-lines\"\n                    />\n                    <Label htmlFor=\"removeEmptyLines\" className=\"text-sm\">\n                      Remove empty lines\n                    </Label>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id=\"removeLineBreaks\"\n                      checked={options.removeLineBreaks}\n                      onCheckedChange={(checked) => updateOption('removeLineBreaks', !!checked)}\n                      data-testid=\"option-line-breaks\"\n                    />\n                    <Label htmlFor=\"removeLineBreaks\" className=\"text-sm\">\n                      Remove all line breaks\n                    </Label>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={cleanText} \n                    className=\"w-full bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!inputText.trim()}\n                    data-testid=\"button-clean\"\n                  >\n                    <i className=\"fas fa-broom mr-2\"></i>\n                    Clean Text\n                  </Button>\n\n                  <Button \n                    onClick={getSampleText} \n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"button-sample\"\n                  >\n                    <i className=\"fas fa-file-text mr-2\"></i>\n                    Load Sample Text\n                  </Button>\n\n                  <Button \n                    onClick={clearAll} \n                    variant=\"outline\"\n                    className=\"w-full\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt mr-2\"></i>\n                    Clear All\n                  </Button>\n                </div>\n\n                {/* Stats */}\n                {stats && (\n                  <div className=\"bg-green-50 rounded-xl p-4 text-sm\">\n                    <div className=\"flex items-center space-x-2 mb-3\">\n                      <i className=\"fas fa-chart-bar text-green-600\"></i>\n                      <span className=\"font-medium text-green-800\">Cleaning Stats</span>\n                    </div>\n                    <div className=\"space-y-2 text-green-700\">\n                      <div className=\"flex justify-between\">\n                        <span>Characters removed:</span>\n                        <span className=\"font-semibold\">{stats.spacesRemoved}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Original length:</span>\n                        <span>{stats.originalLength}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Cleaned length:</span>\n                        <span>{stats.cleanedLength}</span>\n                      </div>\n                      {stats.linesRemoved > 0 && (\n                        <div className=\"flex justify-between\">\n                          <span>Lines removed:</span>\n                          <span>{stats.linesRemoved}</span>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Input/Output Section */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Input Text */}\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-edit text-orange-600\"></i>\n                    <span>Input Text</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <Textarea\n                    value={inputText}\n                    onChange={(e) => setInputText(e.target.value)}\n                    placeholder=\"Paste your text here that contains extra spaces, tabs, or line breaks...\"\n                    className=\"min-h-[200px] font-mono text-sm\"\n                    data-testid=\"input-text\"\n                  />\n                  <div className=\"mt-2 text-sm text-slate-500\">\n                    Characters: {inputText.length} | Lines: {inputText.split('\\n').length}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Output Text */}\n              <Card className=\"bg-white shadow-sm\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-check-circle text-green-600\"></i>\n                      <span>Cleaned Text</span>\n                    </div>\n                    {outputText && (\n                      <Button\n                        onClick={copyToClipboard}\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid=\"button-copy\"\n                      >\n                        <i className=\"fas fa-copy mr-2\"></i>\n                        Copy\n                      </Button>\n                    )}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {outputText ? (\n                    <>\n                      <Textarea\n                        value={outputText}\n                        readOnly\n                        className=\"min-h-[200px] font-mono text-sm bg-slate-50\"\n                        data-testid=\"output-text\"\n                      />\n                      <div className=\"mt-2 text-sm text-slate-500\">\n                        Characters: {outputText.length} | Lines: {outputText.split('\\n').length}\n                      </div>\n                    </>\n                  ) : (\n                    <div className=\"text-center py-16 text-slate-500\" data-testid=\"no-output\">\n                      <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                        <i className=\"fas fa-broom text-slate-400 text-2xl\"></i>\n                      </div>\n                      <p>Cleaned text will appear here after processing</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">What This Tool Does</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Removes multiple consecutive spaces</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Cleans up leading and trailing whitespace</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Removes empty lines and unnecessary breaks</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Converts tabs to single spaces</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-check text-green-500 mt-1\"></i>\n                    <span>Provides detailed cleaning statistics</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Use Cases</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-file-word text-blue-500 mt-1\"></i>\n                    <span>Cleaning up copied text from PDFs</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-code text-green-500 mt-1\"></i>\n                    <span>Formatting code and text files</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-envelope text-purple-500 mt-1\"></i>\n                    <span>Preparing email content</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-database text-orange-500 mt-1\"></i>\n                    <span>Data preparation and cleaning</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-edit text-red-500 mt-1\"></i>\n                    <span>Content editing and proofreading</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":16804},"client/src/pages/tools/reverse-text-generator.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface ReverseResults {\n  entireText: string;\n  wordOrder: string;\n  eachWord: string;\n  mirrorText: string;\n}\n\nexport default function ReverseTextGenerator() {\n  const [inputText, setInputText] = useState(\"\");\n  const [results, setResults] = useState<ReverseResults | null>(null);\n\n  useEffect(() => {\n    document.title = \"Reverse Text Generator - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Reverse text in multiple ways: reverse entire text, words, word order, or create mirror text.');\n    }\n  }, []);\n\n  const reverseText = () => {\n    if (!inputText.trim()) return;\n\n    const text = inputText.trim();\n\n    // Reverse entire text (character by character)\n    const entireText = text.split('').reverse().join('');\n\n    // Reverse word order (keep words intact, reverse their order)\n    const wordOrder = text.split(/(\\s+)/).reverse().join('');\n\n    // Reverse each word individually (keep word positions, reverse each word)\n    const eachWord = text.split(/(\\s+)/).map(part => {\n      // Only reverse non-whitespace parts\n      return /\\S/.test(part) ? part.split('').reverse().join('') : part;\n    }).join('');\n\n    // Create mirror text (flip characters horizontally - approximation)\n    const mirrorMap: { [key: string]: string } = {\n      'a': 'ɒ', 'b': 'd', 'c': 'ɔ', 'd': 'b', 'e': 'ɘ', 'f': 'ꟻ', 'g': 'ϱ', 'h': 'ʜ',\n      'i': 'i', 'j': 'į', 'k': 'ʞ', 'l': '|', 'm': 'm', 'n': 'n', 'o': 'o', 'p': 'q',\n      'q': 'p', 'r': 'ɿ', 's': 'ƨ', 't': 'ƚ', 'u': 'υ', 'v': 'v', 'w': 'w', 'x': 'x',\n      'y': 'ʏ', 'z': 'z', 'A': 'A', 'B': 'ᗺ', 'C': 'Ɔ', 'D': 'ᗡ', 'E': 'Ǝ', 'F': 'ꟻ',\n      'G': 'Ϲ', 'H': 'H', 'I': 'I', 'J': 'ſ', 'K': 'ʞ', 'L': '⅃', 'M': 'M', 'N': 'N',\n      'O': 'O', 'P': 'Ԁ', 'Q': 'Q', 'R': 'Я', 'S': 'Ƨ', 'T': 'T', 'U': 'U', 'V': 'V',\n      'W': 'W', 'X': 'X', 'Y': 'Y', 'Z': 'Z', '1': '⇂', '2': 'ᄅ', '3': 'Ɛ', '4': 'ㄣ',\n      '5': 'ϛ', '6': '9', '7': 'ㄥ', '8': '8', '9': '6', '0': '0', '?': '¿', '!': '¡',\n      '.': '˙', ',': \"'\", ';': '؛', ':': ':', '(': ')', ')': '(', '[': ']', ']': '[',\n      '{': '}', '}': '{', '<': '>', '>': '<', '&': '⅋', '\"': '\"'\n    };\n\n    const mirrorText = text.split('').map(char => mirrorMap[char] || char).reverse().join('');\n\n    setResults({\n      entireText,\n      wordOrder,\n      eachWord,\n      mirrorText\n    });\n  };\n\n  const copyToClipboard = async (text: string, type: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      alert(`${type} copied to clipboard!`);\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  const clearAll = () => {\n    setInputText(\"\");\n    setResults(null);\n  };\n\n  const getSampleText = () => {\n    setInputText(\"Hello World! This is a sample text to demonstrate reverse operations.\");\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-indigo-100 to-indigo-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-exchange-alt text-indigo-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"reverse-text-title\">\n              Reverse Text Generator\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"reverse-text-subtitle\">\n              Reverse text in multiple ways: reverse entire text, words, word order, or create mirror text\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-edit text-primary\"></i>\n                  <span>Input Text</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"inputText\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Enter your text to reverse\n                  </Label>\n                  <Textarea\n                    id=\"inputText\"\n                    value={inputText}\n                    onChange={(e) => setInputText(e.target.value)}\n                    placeholder=\"Type or paste your text here...\"\n                    className=\"min-h-[150px]\"\n                    data-testid=\"input-text\"\n                  />\n                  <div className=\"mt-2 text-sm text-slate-500\">\n                    Characters: {inputText.length}\n                  </div>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={reverseText} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!inputText.trim()}\n                    data-testid=\"button-reverse\"\n                  >\n                    <i className=\"fas fa-exchange-alt mr-2\"></i>\n                    Reverse Text\n                  </Button>\n                  \n                  <Button \n                    onClick={getSampleText} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-sample\"\n                  >\n                    <i className=\"fas fa-file-text\"></i>\n                  </Button>\n\n                  <Button \n                    onClick={clearAll} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* How it works */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Reverse Types</span>\n                  </div>\n                  <ul className=\"text-blue-700 space-y-1\">\n                    <li>• <strong>Entire Text:</strong> Reverses every character</li>\n                    <li>• <strong>Word Order:</strong> Reverses order of words</li>\n                    <li>• <strong>Each Word:</strong> Reverses letters in each word</li>\n                    <li>• <strong>Mirror Text:</strong> Creates horizontally flipped text</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-magic text-accent\"></i>\n                  <span>Reversed Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {results ? (\n                  <Tabs defaultValue=\"entire\" className=\"space-y-4\" data-testid=\"results-tabs\">\n                    <TabsList className=\"grid w-full grid-cols-2 lg:grid-cols-4\">\n                      <TabsTrigger value=\"entire\" className=\"text-xs\">Entire</TabsTrigger>\n                      <TabsTrigger value=\"words\" className=\"text-xs\">Word Order</TabsTrigger>\n                      <TabsTrigger value=\"each\" className=\"text-xs\">Each Word</TabsTrigger>\n                      <TabsTrigger value=\"mirror\" className=\"text-xs\">Mirror</TabsTrigger>\n                    </TabsList>\n\n                    <TabsContent value=\"entire\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-slate-800\">Entire Text Reversed</h4>\n                          <Button\n                            onClick={() => copyToClipboard(results.entireText, \"Entire text\")}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            data-testid=\"copy-entire\"\n                          >\n                            <i className=\"fas fa-copy mr-1\"></i>\n                            Copy\n                          </Button>\n                        </div>\n                        <div className=\"bg-slate-50 rounded-lg p-4 font-mono text-sm break-words\" data-testid=\"result-entire\">\n                          {results.entireText}\n                        </div>\n                        <p className=\"text-sm text-slate-600\">\n                          Every character is reversed from end to beginning\n                        </p>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"words\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-slate-800\">Word Order Reversed</h4>\n                          <Button\n                            onClick={() => copyToClipboard(results.wordOrder, \"Word order\")}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            data-testid=\"copy-words\"\n                          >\n                            <i className=\"fas fa-copy mr-1\"></i>\n                            Copy\n                          </Button>\n                        </div>\n                        <div className=\"bg-slate-50 rounded-lg p-4 font-mono text-sm break-words\" data-testid=\"result-words\">\n                          {results.wordOrder}\n                        </div>\n                        <p className=\"text-sm text-slate-600\">\n                          Words are in reverse order but each word remains intact\n                        </p>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"each\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-slate-800\">Each Word Reversed</h4>\n                          <Button\n                            onClick={() => copyToClipboard(results.eachWord, \"Each word\")}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            data-testid=\"copy-each\"\n                          >\n                            <i className=\"fas fa-copy mr-1\"></i>\n                            Copy\n                          </Button>\n                        </div>\n                        <div className=\"bg-slate-50 rounded-lg p-4 font-mono text-sm break-words\" data-testid=\"result-each\">\n                          {results.eachWord}\n                        </div>\n                        <p className=\"text-sm text-slate-600\">\n                          Each word is individually reversed while maintaining word positions\n                        </p>\n                      </div>\n                    </TabsContent>\n\n                    <TabsContent value=\"mirror\">\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-slate-800\">Mirror Text</h4>\n                          <Button\n                            onClick={() => copyToClipboard(results.mirrorText, \"Mirror text\")}\n                            size=\"sm\"\n                            variant=\"outline\"\n                            data-testid=\"copy-mirror\"\n                          >\n                            <i className=\"fas fa-copy mr-1\"></i>\n                            Copy\n                          </Button>\n                        </div>\n                        <div className=\"bg-slate-50 rounded-lg p-4 font-mono text-sm break-words\" data-testid=\"result-mirror\">\n                          {results.mirrorText}\n                        </div>\n                        <p className=\"text-sm text-slate-600\">\n                          Text appears as if viewed in a mirror (horizontally flipped)\n                        </p>\n                      </div>\n                    </TabsContent>\n                  </Tabs>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-exchange-alt text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter Text to Reverse</h3>\n                    <p className=\"text-slate-500\">\n                      Type some text above to see all the different reverse options\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Uses</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-gamepad text-purple-500 mt-1\"></i>\n                    <span>Creating puzzles and word games</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-eye text-blue-500 mt-1\"></i>\n                    <span>Making text harder to read casually</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-code text-green-500 mt-1\"></i>\n                    <span>Creating stylized text for design</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-magic text-pink-500 mt-1\"></i>\n                    <span>Fun text transformations for social media</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-brain text-orange-500 mt-1\"></i>\n                    <span>Brain training and cognitive exercises</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Examples</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Original:</h5>\n                    <p className=\"bg-slate-50 p-2 rounded font-mono\">\"Hello World\"</p>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div>\n                      <span className=\"font-medium text-slate-700\">Entire:</span>\n                      <span className=\"ml-2 font-mono\">\"dlroW olleH\"</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-slate-700\">Word Order:</span>\n                      <span className=\"ml-2 font-mono\">\"World Hello\"</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-slate-700\">Each Word:</span>\n                      <span className=\"ml-2 font-mono\">\"olleH dlroW\"</span>\n                    </div>\n                    <div>\n                      <span className=\"font-medium text-slate-700\">Mirror:</span>\n                      <span className=\"ml-2 font-mono\">\"bloɿW oᴅɘH\"</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":16914},"client/src/pages/tools/speed-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ConversionResult {\n  value: number;\n  unit: string;\n  label: string;\n}\n\nconst speedUnits = [\n  { value: \"mps\", label: \"Meters per second (m/s)\", factor: 1 },\n  { value: \"kph\", label: \"Kilometers per hour (km/h)\", factor: 3.6 },\n  { value: \"mph\", label: \"Miles per hour (mph)\", factor: 2.237 },\n  { value: \"fps\", label: \"Feet per second (ft/s)\", factor: 3.281 },\n  { value: \"knots\", label: \"Knots (kn)\", factor: 1.944 },\n  { value: \"mach\", label: \"Mach (at sea level)\", factor: 0.002915 },\n  { value: \"lightspeed\", label: \"Speed of light (c)\", factor: 3.336e-9 }\n];\n\nexport default function SpeedConverter() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"kph\");\n  const [results, setResults] = useState<ConversionResult[]>([]);\n\n  useEffect(() => {\n    document.title = \"Speed Converter - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between different units of speed including mph, km/h, m/s, and more.');\n    }\n  }, []);\n\n  const convertSpeed = () => {\n    if (!inputValue || isNaN(parseFloat(inputValue))) return;\n\n    const value = parseFloat(inputValue);\n    const fromUnitData = speedUnits.find(unit => unit.value === fromUnit);\n    if (!fromUnitData) return;\n\n    // Convert to base unit (m/s) first\n    const baseValue = value / fromUnitData.factor;\n\n    // Convert to all other units\n    const conversions = speedUnits\n      .filter(unit => unit.value !== fromUnit)\n      .map(unit => ({\n        value: parseFloat((baseValue * unit.factor).toFixed(6)),\n        unit: unit.value,\n        label: unit.label\n      }));\n\n    setResults(conversions);\n  };\n\n  const clearConversion = () => {\n    setInputValue(\"\");\n    setResults([]);\n  };\n\n  const swapToUnit = (unit: string) => {\n    const result = results.find(r => r.unit === unit);\n    if (result) {\n      setInputValue(result.value.toString());\n      setFromUnit(unit);\n      setResults([]);\n    }\n  };\n\n  const getSpeedCategory = (speedMps: number): { category: string; color: string } => {\n    if (speedMps < 1) return { category: \"Very Slow\", color: \"text-green-600\" };\n    if (speedMps < 5) return { category: \"Walking Speed\", color: \"text-blue-600\" };\n    if (speedMps < 15) return { category: \"Cycling Speed\", color: \"text-purple-600\" };\n    if (speedMps < 30) return { category: \"Vehicle Speed\", color: \"text-orange-600\" };\n    if (speedMps < 100) return { category: \"High Speed\", color: \"text-red-600\" };\n    if (speedMps < 340) return { category: \"Supersonic\", color: \"text-pink-600\" };\n    return { category: \"Extreme Speed\", color: \"text-gray-800\" };\n  };\n\n  const getCurrentSpeedInMps = (): number => {\n    if (!inputValue || isNaN(parseFloat(inputValue))) return 0;\n    const value = parseFloat(inputValue);\n    const fromUnitData = speedUnits.find(unit => unit.value === fromUnit);\n    return fromUnitData ? value / fromUnitData.factor : 0;\n  };\n\n  const speedCategory = getSpeedCategory(getCurrentSpeedInMps());\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-purple-100 to-purple-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-tachometer-alt text-purple-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"speed-converter-title\">\n              Speed Converter\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"speed-converter-subtitle\">\n              Convert between different units of speed including mph, km/h, m/s, and more\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-edit text-primary\"></i>\n                  <span>Speed Input</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"inputValue\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Speed Value\n                  </Label>\n                  <Input\n                    id=\"inputValue\"\n                    type=\"number\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"Enter speed value\"\n                    step=\"any\"\n                    data-testid=\"input-speed\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fromUnit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    From Unit\n                  </Label>\n                  <Select value={fromUnit} onValueChange={setFromUnit} data-testid=\"select-from-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {speedUnits.map((unit) => (\n                        <SelectItem key={unit.value} value={unit.value}>\n                          {unit.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={convertSpeed} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!inputValue || isNaN(parseFloat(inputValue))}\n                    data-testid=\"button-convert\"\n                  >\n                    <i className=\"fas fa-exchange-alt mr-2\"></i>\n                    Convert Speed\n                  </Button>\n                  \n                  <Button \n                    onClick={clearConversion} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Speed Category */}\n                {inputValue && !isNaN(parseFloat(inputValue)) && (\n                  <div className=\"bg-slate-50 rounded-xl p-4\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <i className=\"fas fa-tag text-slate-600\"></i>\n                      <span className=\"font-medium text-slate-800\">Speed Category</span>\n                    </div>\n                    <p className={`font-semibold ${speedCategory.color}`}>\n                      {speedCategory.category}\n                    </p>\n                  </div>\n                )}\n\n                {/* Common Examples */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <i className=\"fas fa-lightbulb text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Quick Examples</span>\n                  </div>\n                  <div className=\"space-y-2 text-blue-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Walking pace:</span>\n                      <span>5 km/h (3.1 mph)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Highway speed:</span>\n                      <span>100 km/h (62 mph)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Sound speed:</span>\n                      <span>343 m/s (1,235 km/h)</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-list text-accent\"></i>\n                  <span>Conversion Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {results.length > 0 ? (\n                  <div className=\"space-y-4\" data-testid=\"conversion-results\">\n                    {results.map((result, index) => (\n                      <div \n                        key={result.unit} \n                        className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors cursor-pointer group\"\n                        onClick={() => swapToUnit(result.unit)}\n                        data-testid={`result-${result.unit}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"font-mono text-2xl font-bold text-slate-800\">\n                            {result.value.toLocaleString()}\n                          </div>\n                          <div className=\"text-sm text-slate-600\">\n                            {result.label}\n                          </div>\n                        </div>\n                        <div className=\"opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <i className=\"fas fa-exchange-alt text-primary\"></i>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-tachometer-alt text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter a Speed Value</h3>\n                    <p className=\"text-slate-500\">\n                      Enter a speed value above to see conversions to all units\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Speed Conversion Formulas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Common Conversions:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• 1 m/s = 3.6 km/h = 2.237 mph</li>\n                      <li>• 1 km/h = 0.278 m/s = 0.621 mph</li>\n                      <li>• 1 mph = 0.447 m/s = 1.609 km/h</li>\n                      <li>• 1 knot = 0.514 m/s = 1.852 km/h</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Speed of Sound:</h5>\n                    <p>Mach 1 ≈ 343 m/s (at 20°C, sea level)</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Speed References</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-walking text-green-500 mt-1\"></i>\n                    <span>Human walking: 1.4 m/s (5 km/h)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-running text-blue-500 mt-1\"></i>\n                    <span>Human running: 6 m/s (22 km/h)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-car text-purple-500 mt-1\"></i>\n                    <span>City driving: 14 m/s (50 km/h)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-plane text-orange-500 mt-1\"></i>\n                    <span>Commercial airliner: 250 m/s (900 km/h)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-rocket text-red-500 mt-1\"></i>\n                    <span>Escape velocity: 11,200 m/s</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13794},"client/src/pages/tools/stopwatch.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface LapTime {\n  id: number;\n  time: number;\n  lapDuration: number;\n  timestamp: Date;\n}\n\nexport default function Stopwatch() {\n  const [time, setTime] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [lapTimes, setLapTimes] = useState<LapTime[]>([]);\n  const intervalRef = useRef<number | null>(null);\n  const startTimeRef = useRef<number>(0);\n  const pausedTimeRef = useRef<number>(0);\n\n  useEffect(() => {\n    document.title = \"Stopwatch Tool - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Precise online stopwatch with millisecond accuracy, lap times, and statistics for timing activities.');\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isRunning) {\n      intervalRef.current = window.setInterval(() => {\n        setTime(Date.now() - startTimeRef.current + pausedTimeRef.current);\n      }, 10);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isRunning]);\n\n  const start = () => {\n    if (!isRunning) {\n      startTimeRef.current = Date.now();\n      setIsRunning(true);\n    }\n  };\n\n  const pause = () => {\n    if (isRunning) {\n      pausedTimeRef.current = time;\n      setIsRunning(false);\n    }\n  };\n\n  const reset = () => {\n    setIsRunning(false);\n    setTime(0);\n    pausedTimeRef.current = 0;\n    setLapTimes([]);\n  };\n\n  const addLap = () => {\n    if (isRunning && time > 0) {\n      const currentTime = time;\n      const previousLapTime = lapTimes.length > 0 ? lapTimes[lapTimes.length - 1].time : 0;\n      const lapDuration = currentTime - previousLapTime;\n      \n      const newLap: LapTime = {\n        id: lapTimes.length + 1,\n        time: currentTime,\n        lapDuration,\n        timestamp: new Date()\n      };\n      \n      setLapTimes(prev => [...prev, newLap]);\n    }\n  };\n\n  const formatTime = (milliseconds: number): string => {\n    const totalSeconds = Math.floor(milliseconds / 1000);\n    const minutes = Math.floor(totalSeconds / 60);\n    const seconds = totalSeconds % 60;\n    const ms = Math.floor((milliseconds % 1000) / 10);\n    \n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}.${ms.toString().padStart(2, '0')}`;\n  };\n\n  const formatTimeDetailed = (milliseconds: number): string => {\n    const hours = Math.floor(milliseconds / 3600000);\n    const minutes = Math.floor((milliseconds % 3600000) / 60000);\n    const seconds = Math.floor((milliseconds % 60000) / 1000);\n    const ms = milliseconds % 1000;\n    \n    if (hours > 0) {\n      return `${hours}h ${minutes}m ${seconds}s ${ms}ms`;\n    } else if (minutes > 0) {\n      return `${minutes}m ${seconds}s ${ms}ms`;\n    } else {\n      return `${seconds}s ${ms}ms`;\n    }\n  };\n\n  const getStatistics = () => {\n    if (lapTimes.length === 0) return null;\n    \n    const lapDurations = lapTimes.map(lap => lap.lapDuration);\n    const fastest = Math.min(...lapDurations);\n    const slowest = Math.max(...lapDurations);\n    const average = lapDurations.reduce((sum, duration) => sum + duration, 0) / lapDurations.length;\n    \n    return { fastest, slowest, average };\n  };\n\n  const statistics = getStatistics();\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-stopwatch text-blue-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"stopwatch-title\">\n              Stopwatch Tool\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"stopwatch-subtitle\">\n              Precise online stopwatch with millisecond accuracy, lap times, and statistics for timing activities\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Stopwatch Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-primary\"></i>\n                  <span>Stopwatch</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-8\">\n                {/* Time Display */}\n                <div className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-slate-800 to-slate-900 rounded-3xl p-8 text-white mb-6\">\n                    <div className=\"text-6xl md:text-7xl font-mono font-bold mb-2\" data-testid=\"time-display\">\n                      {formatTime(time)}\n                    </div>\n                    <div className=\"text-slate-300 text-sm\">\n                      {formatTimeDetailed(time)}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Controls */}\n                <div className=\"flex gap-4 justify-center\">\n                  {!isRunning ? (\n                    <Button \n                      onClick={start}\n                      className=\"bg-green-500 hover:bg-green-600 text-white px-8 py-3 text-lg\"\n                      data-testid=\"button-start\"\n                    >\n                      <i className=\"fas fa-play mr-2\"></i>\n                      Start\n                    </Button>\n                  ) : (\n                    <Button \n                      onClick={pause}\n                      className=\"bg-yellow-500 hover:bg-yellow-600 text-white px-8 py-3 text-lg\"\n                      data-testid=\"button-pause\"\n                    >\n                      <i className=\"fas fa-pause mr-2\"></i>\n                      Pause\n                    </Button>\n                  )}\n\n                  <Button \n                    onClick={addLap}\n                    className=\"bg-blue-500 hover:bg-blue-600 text-white px-8 py-3 text-lg\"\n                    disabled={!isRunning || time === 0}\n                    data-testid=\"button-lap\"\n                  >\n                    <i className=\"fas fa-flag mr-2\"></i>\n                    Lap\n                  </Button>\n\n                  <Button \n                    onClick={reset}\n                    variant=\"outline\"\n                    className=\"px-8 py-3 text-lg\"\n                    data-testid=\"button-reset\"\n                  >\n                    <i className=\"fas fa-redo mr-2\"></i>\n                    Reset\n                  </Button>\n                </div>\n\n                {/* Status */}\n                <div className=\"text-center\">\n                  <div className={`inline-flex items-center px-4 py-2 rounded-full text-sm font-medium ${\n                    isRunning \n                      ? 'bg-green-100 text-green-800' \n                      : time > 0 \n                        ? 'bg-yellow-100 text-yellow-800'\n                        : 'bg-slate-100 text-slate-800'\n                  }`}>\n                    <div className={`w-2 h-2 rounded-full mr-2 ${\n                      isRunning ? 'bg-green-500' : time > 0 ? 'bg-yellow-500' : 'bg-slate-500'\n                    }`}></div>\n                    {isRunning ? 'Running' : time > 0 ? 'Paused' : 'Stopped'}\n                  </div>\n                </div>\n\n                {/* Keyboard Shortcuts */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <i className=\"fas fa-keyboard text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Keyboard Shortcuts</span>\n                  </div>\n                  <div className=\"space-y-1 text-blue-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Space:</span>\n                      <span>Start/Pause</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>L:</span>\n                      <span>Add Lap</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>R:</span>\n                      <span>Reset</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Lap Times & Statistics */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-list text-accent\"></i>\n                  <span>Lap Times & Statistics</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {statistics && (\n                  <div className=\"mb-6\">\n                    <h4 className=\"font-medium text-slate-800 mb-4\">Lap Statistics</h4>\n                    <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                      <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                        <div className=\"text-sm text-green-600 mb-1\">Fastest</div>\n                        <div className=\"font-mono text-green-800 font-semibold\" data-testid=\"fastest-lap\">\n                          {formatTime(statistics.fastest)}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                        <div className=\"text-sm text-blue-600 mb-1\">Average</div>\n                        <div className=\"font-mono text-blue-800 font-semibold\" data-testid=\"average-lap\">\n                          {formatTime(statistics.average)}\n                        </div>\n                      </div>\n                      <div className=\"text-center p-3 bg-red-50 rounded-lg\">\n                        <div className=\"text-sm text-red-600 mb-1\">Slowest</div>\n                        <div className=\"font-mono text-red-800 font-semibold\" data-testid=\"slowest-lap\">\n                          {formatTime(statistics.slowest)}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                {lapTimes.length > 0 ? (\n                  <div className=\"space-y-2\" data-testid=\"lap-times\">\n                    <h4 className=\"font-medium text-slate-800 mb-3\">\n                      Lap Times ({lapTimes.length})\n                    </h4>\n                    <div className=\"max-h-80 overflow-y-auto space-y-2\">\n                      {lapTimes.slice().reverse().map((lap, index) => {\n                        const isFastest = statistics && lap.lapDuration === statistics.fastest;\n                        const isSlowest = statistics && lap.lapDuration === statistics.slowest;\n                        \n                        return (\n                          <div \n                            key={lap.id} \n                            className={`flex items-center justify-between p-3 rounded-lg border ${\n                              isFastest ? 'bg-green-50 border-green-200' :\n                              isSlowest ? 'bg-red-50 border-red-200' : \n                              'bg-slate-50 border-slate-200'\n                            }`}\n                            data-testid={`lap-${lap.id}`}\n                          >\n                            <div className=\"flex items-center space-x-3\">\n                              <span className={`px-2 py-1 rounded text-xs font-medium ${\n                                isFastest ? 'bg-green-500 text-white' :\n                                isSlowest ? 'bg-red-500 text-white' : \n                                'bg-slate-500 text-white'\n                              }`}>\n                                #{lap.id}\n                              </span>\n                              <div>\n                                <div className=\"font-mono font-semibold text-slate-800\">\n                                  {formatTime(lap.lapDuration)}\n                                </div>\n                                <div className=\"text-xs text-slate-500\">\n                                  Total: {formatTime(lap.time)}\n                                </div>\n                              </div>\n                            </div>\n                            {isFastest && <i className=\"fas fa-trophy text-green-500\"></i>}\n                            {isSlowest && <i className=\"fas fa-snail text-red-500\"></i>}\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-laps\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-flag text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">No Lap Times Yet</h3>\n                    <p className=\"text-slate-500\">\n                      Start the stopwatch and add lap times to see statistics\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Perfect For</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-running text-blue-500 mt-1\"></i>\n                    <span>Running and athletic training</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-dumbbell text-green-500 mt-1\"></i>\n                    <span>Workout intervals and rest periods</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-utensils text-orange-500 mt-1\"></i>\n                    <span>Cooking and baking timing</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-briefcase text-purple-500 mt-1\"></i>\n                    <span>Work productivity tracking</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-gamepad text-red-500 mt-1\"></i>\n                    <span>Gaming and speedrun timing</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Features</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-stopwatch text-blue-500 mt-1\"></i>\n                    <span>Millisecond precision timing</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-flag text-green-500 mt-1\"></i>\n                    <span>Unlimited lap time recording</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-chart-bar text-purple-500 mt-1\"></i>\n                    <span>Automatic lap statistics</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-keyboard text-orange-500 mt-1\"></i>\n                    <span>Keyboard shortcuts support</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-mobile-alt text-red-500 mt-1\"></i>\n                    <span>Works on all devices</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":17097},"client/src/pages/tools/temperature-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface TemperatureInfo {\n  name: string;\n  value: string;\n}\n\nexport default function TemperatureConverter() {\n  const [fromValue, setFromValue] = useState(\"\");\n  const [toValue, setToValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"celsius\");\n  const [toUnit, setToUnit] = useState(\"fahrenheit\");\n  const [formula, setFormula] = useState(\"\");\n  const [showFormula, setShowFormula] = useState(false);\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Temperature Converter - ToolHub | Free Online Temperature Unit Converter\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between temperature units instantly. Convert Celsius, Fahrenheit, Kelvin, and Rankine. Free, fast, and accurate temperature converter.');\n    }\n  }, []);\n\n  const convertTemperature = () => {\n    const value = parseFloat(fromValue);\n    \n    if (isNaN(value) || fromValue === '') {\n      setToValue('');\n      setShowFormula(false);\n      return;\n    }\n\n    let convertedValue = value;\n    let formulaText = '';\n\n    // Convert from source unit to Celsius first\n    let celsius = value;\n    switch(fromUnit) {\n      case 'fahrenheit':\n        celsius = (value - 32) * 5/9;\n        break;\n      case 'kelvin':\n        celsius = value - 273.15;\n        break;\n      case 'rankine':\n        celsius = (value - 491.67) * 5/9;\n        break;\n    }\n\n    // Convert from Celsius to target unit\n    switch(toUnit) {\n      case 'celsius':\n        convertedValue = celsius;\n        break;\n      case 'fahrenheit':\n        convertedValue = celsius * 9/5 + 32;\n        break;\n      case 'kelvin':\n        convertedValue = celsius + 273.15;\n        break;\n      case 'rankine':\n        convertedValue = celsius * 9/5 + 491.67;\n        break;\n    }\n\n    // Generate formula text\n    if (fromUnit === toUnit) {\n      formulaText = 'Same unit, no conversion needed';\n    } else if (fromUnit === 'celsius' && toUnit === 'fahrenheit') {\n      formulaText = '°F = (°C × 9/5) + 32';\n    } else if (fromUnit === 'fahrenheit' && toUnit === 'celsius') {\n      formulaText = '°C = (°F - 32) × 5/9';\n    } else if (fromUnit === 'celsius' && toUnit === 'kelvin') {\n      formulaText = 'K = °C + 273.15';\n    } else if (fromUnit === 'kelvin' && toUnit === 'celsius') {\n      formulaText = '°C = K - 273.15';\n    } else if (fromUnit === 'fahrenheit' && toUnit === 'kelvin') {\n      formulaText = 'K = (°F - 32) × 5/9 + 273.15';\n    } else if (fromUnit === 'kelvin' && toUnit === 'fahrenheit') {\n      formulaText = '°F = (K - 273.15) × 9/5 + 32';\n    } else if (fromUnit === 'celsius' && toUnit === 'rankine') {\n      formulaText = '°R = °C × 9/5 + 491.67';\n    } else if (fromUnit === 'rankine' && toUnit === 'celsius') {\n      formulaText = '°C = (°R - 491.67) × 5/9';\n    } else {\n      formulaText = `Convert via Celsius: ${fromUnit} → °C → ${toUnit}`;\n    }\n    \n    setToValue(convertedValue.toFixed(2));\n    setFormula(formulaText);\n    setShowFormula(true);\n  };\n\n  const resetForm = () => {\n    setFromValue('');\n    setToValue('');\n    setShowFormula(false);\n  };\n\n  const swapUnits = () => {\n    setFromUnit(toUnit);\n    setToUnit(fromUnit);\n    setFromValue(toValue);\n    setToValue(fromValue);\n  };\n\n  useEffect(() => {\n    if (fromValue) {\n      convertTemperature();\n    }\n  }, [fromValue, fromUnit, toUnit]);\n\n  const temperatureReferences: TemperatureInfo[] = [\n    { name: \"Absolute Zero\", value: \"-273.15°C\" },\n    { name: \"Water Freezes\", value: \"0°C / 32°F\" },\n    { name: \"Room Temperature\", value: \"20°C / 68°F\" },\n    { name: \"Water Boils\", value: \"100°C / 212°F\" }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Page Header */}\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-thermometer-half text-primary mr-2\"></i>\n              Temperature Converter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Convert between different temperature scales instantly. Our free temperature converter supports Celsius, Fahrenheit, Kelvin, and Rankine.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Converter Tool */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Convert Temperature Units</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {/* Input Section */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    {/* From Unit */}\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">From</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter value\"\n                          step=\"0.01\"\n                          value={fromValue}\n                          onChange={(e) => setFromValue(e.target.value)}\n                          data-testid=\"input-from-value\"\n                        />\n                        <Select value={fromUnit} onValueChange={setFromUnit}>\n                          <SelectTrigger data-testid=\"select-from-unit\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"celsius\">Celsius (°C)</SelectItem>\n                            <SelectItem value=\"fahrenheit\">Fahrenheit (°F)</SelectItem>\n                            <SelectItem value=\"kelvin\">Kelvin (K)</SelectItem>\n                            <SelectItem value=\"rankine\">Rankine (°R)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    {/* To Unit */}\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">To</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Result\"\n                          value={toValue}\n                          readOnly\n                          className=\"bg-slate-50\"\n                          data-testid=\"input-to-value\"\n                        />\n                        <Select value={toUnit} onValueChange={setToUnit}>\n                          <SelectTrigger data-testid=\"select-to-unit\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"fahrenheit\">Fahrenheit (°F)</SelectItem>\n                            <SelectItem value=\"celsius\">Celsius (°C)</SelectItem>\n                            <SelectItem value=\"kelvin\">Kelvin (K)</SelectItem>\n                            <SelectItem value=\"rankine\">Rankine (°R)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Buttons */}\n                  <div className=\"flex flex-col sm:flex-row gap-3 mb-6\">\n                    <Button onClick={convertTemperature} className=\"flex-1\" data-testid=\"button-convert\">\n                      <i className=\"fas fa-sync-alt mr-2\"></i>Convert\n                    </Button>\n                    <Button onClick={resetForm} variant=\"secondary\" className=\"flex-1\" data-testid=\"button-reset\">\n                      <i className=\"fas fa-undo mr-2\"></i>Reset\n                    </Button>\n                    <Button onClick={swapUnits} variant=\"outline\" data-testid=\"button-swap\">\n                      <i className=\"fas fa-exchange-alt mr-2\"></i>Swap\n                    </Button>\n                  </div>\n\n                  {/* Formula Display */}\n                  {showFormula && (\n                    <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\" data-testid=\"formula-display\">\n                      <h3 className=\"text-sm font-semibold text-blue-800 mb-2\">Conversion Formula</h3>\n                      <p className=\"text-blue-700 text-sm\">{formula}</p>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Temperature Reference */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Temperature Reference</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {temperatureReferences.map((ref, index) => (\n                      <div key={index} className=\"flex justify-between\">\n                        <span className=\"text-slate-600\">{ref.name}</span>\n                        <span className=\"font-medium\">{ref.value}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":10143},"client/src/pages/tools/text-case-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function TextCaseConverter() {\n  const [inputText, setInputText] = useState(\"\");\n  const [outputText, setOutputText] = useState(\"\");\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Text Case Converter - ToolHub | Free Online Text Case Converter\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert text between different cases: uppercase, lowercase, title case, camel case, and more. Free text case converter tool.');\n    }\n  }, []);\n\n  const convertToUppercase = () => {\n    setOutputText(inputText.toUpperCase());\n  };\n\n  const convertToLowercase = () => {\n    setOutputText(inputText.toLowerCase());\n  };\n\n  const convertToTitleCase = () => {\n    const titleCase = inputText.replace(/\\w\\S*/g, (txt) => \n      txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n    );\n    setOutputText(titleCase);\n  };\n\n  const convertToSentenceCase = () => {\n    const sentenceCase = inputText.toLowerCase().replace(/(^\\w|\\.\\s+\\w)/g, (txt) => \n      txt.toUpperCase()\n    );\n    setOutputText(sentenceCase);\n  };\n\n  const convertToCamelCase = () => {\n    const camelCase = inputText\n      .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word, index) => \n        index === 0 ? word.toLowerCase() : word.toUpperCase()\n      )\n      .replace(/\\s+/g, '');\n    setOutputText(camelCase);\n  };\n\n  const convertToPascalCase = () => {\n    const pascalCase = inputText\n      .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (word) => word.toUpperCase())\n      .replace(/\\s+/g, '');\n    setOutputText(pascalCase);\n  };\n\n  const convertToSnakeCase = () => {\n    const snakeCase = inputText\n      .replace(/\\W+/g, ' ')\n      .split(/ |\\B(?=[A-Z])/)\n      .map(word => word.toLowerCase())\n      .join('_');\n    setOutputText(snakeCase);\n  };\n\n  const convertToKebabCase = () => {\n    const kebabCase = inputText\n      .replace(/\\W+/g, ' ')\n      .split(/ |\\B(?=[A-Z])/)\n      .map(word => word.toLowerCase())\n      .join('-');\n    setOutputText(kebabCase);\n  };\n\n  const clearText = () => {\n    setInputText(\"\");\n    setOutputText(\"\");\n  };\n\n  const copyOutput = () => {\n    navigator.clipboard.writeText(outputText);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-font text-primary mr-2\"></i>\n              Text Case Converter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Convert text between different cases: uppercase, lowercase, title case, camel case, and more.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Input Text</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"Enter your text here...\"\n                  value={inputText}\n                  onChange={(e) => setInputText(e.target.value)}\n                  className=\"w-full h-48 resize-y\"\n                  data-testid=\"textarea-input\"\n                />\n                <div className=\"flex gap-2 mt-4\">\n                  <Button onClick={clearText} variant=\"secondary\" size=\"sm\" data-testid=\"button-clear\">\n                    <i className=\"fas fa-trash mr-2\"></i>Clear\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Output Text</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Textarea\n                  placeholder=\"Converted text will appear here...\"\n                  value={outputText}\n                  readOnly\n                  className=\"w-full h-48 resize-y bg-slate-50\"\n                  data-testid=\"textarea-output\"\n                />\n                <div className=\"flex gap-2 mt-4\">\n                  <Button \n                    onClick={copyOutput} \n                    variant=\"outline\" \n                    size=\"sm\"\n                    disabled={!outputText}\n                    data-testid=\"button-copy\"\n                  >\n                    <i className=\"fas fa-copy mr-2\"></i>Copy\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card className=\"mt-8\">\n            <CardHeader>\n              <CardTitle>Conversion Options</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3\">\n                <Button \n                  onClick={convertToUppercase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-uppercase\"\n                >\n                  UPPERCASE\n                </Button>\n                <Button \n                  onClick={convertToLowercase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-lowercase\"\n                >\n                  lowercase\n                </Button>\n                <Button \n                  onClick={convertToTitleCase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-title-case\"\n                >\n                  Title Case\n                </Button>\n                <Button \n                  onClick={convertToSentenceCase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-sentence-case\"\n                >\n                  Sentence case\n                </Button>\n                <Button \n                  onClick={convertToCamelCase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-camel-case\"\n                >\n                  camelCase\n                </Button>\n                <Button \n                  onClick={convertToPascalCase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-pascal-case\"\n                >\n                  PascalCase\n                </Button>\n                <Button \n                  onClick={convertToSnakeCase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-snake-case\"\n                >\n                  snake_case\n                </Button>\n                <Button \n                  onClick={convertToKebabCase}\n                  variant=\"outline\"\n                  disabled={!inputText}\n                  data-testid=\"button-kebab-case\"\n                >\n                  kebab-case\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":7652},"client/src/pages/tools/timezone-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ConversionResult {\n  fromTime: string;\n  toTime: string;\n  fromZone: string;\n  toZone: string;\n  timeDifference: string;\n}\n\nconst timeZones = [\n  { value: \"America/New_York\", label: \"Eastern Time (ET)\" },\n  { value: \"America/Chicago\", label: \"Central Time (CT)\" },\n  { value: \"America/Denver\", label: \"Mountain Time (MT)\" },\n  { value: \"America/Los_Angeles\", label: \"Pacific Time (PT)\" },\n  { value: \"UTC\", label: \"UTC (Coordinated Universal Time)\" },\n  { value: \"Europe/London\", label: \"London (GMT)\" },\n  { value: \"Europe/Paris\", label: \"Paris (CET)\" },\n  { value: \"Europe/Berlin\", label: \"Berlin (CET)\" },\n  { value: \"Asia/Tokyo\", label: \"Tokyo (JST)\" },\n  { value: \"Asia/Shanghai\", label: \"Shanghai (CST)\" },\n  { value: \"Asia/Kolkata\", label: \"India (IST)\" },\n  { value: \"Australia/Sydney\", label: \"Sydney (AEDT)\" },\n  { value: \"America/Sao_Paulo\", label: \"São Paulo (BRT)\" },\n  { value: \"Asia/Dubai\", label: \"Dubai (GST)\" }\n];\n\nexport default function TimezoneConverter() {\n  const [time, setTime] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [fromZone, setFromZone] = useState(\"UTC\");\n  const [toZone, setToZone] = useState(\"America/New_York\");\n  const [result, setResult] = useState<ConversionResult | null>(null);\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    document.title = \"Time Zone Converter - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert time between different time zones instantly. Perfect for scheduling meetings across time zones.');\n    }\n\n    // Set current date and time as default\n    const now = new Date();\n    setDate(now.toISOString().split('T')[0]);\n    setTime(now.toTimeString().slice(0, 5));\n\n    // Update current time every second\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const convertTime = () => {\n    if (!time || !date) return;\n\n    try {\n      // Create a date object from the input\n      const inputDateTime = new Date(`${date}T${time}`);\n      \n      // Get the time in the source timezone\n      const sourceTime = new Intl.DateTimeFormat('en-US', {\n        timeZone: fromZone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      }).format(inputDateTime);\n\n      // Convert to target timezone\n      const targetTime = new Intl.DateTimeFormat('en-US', {\n        timeZone: toZone,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: false\n      }).format(inputDateTime);\n\n      // Calculate time difference\n      const fromOffset = getTimezoneOffset(fromZone);\n      const toOffset = getTimezoneOffset(toZone);\n      const diffHours = (toOffset - fromOffset) / 60;\n      const timeDifference = diffHours >= 0 ? `+${diffHours}` : `${diffHours}`;\n\n      setResult({\n        fromTime: sourceTime,\n        toTime: targetTime,\n        fromZone: timeZones.find(tz => tz.value === fromZone)?.label || fromZone,\n        toZone: timeZones.find(tz => tz.value === toZone)?.label || toZone,\n        timeDifference: `${timeDifference} hours`\n      });\n    } catch (error) {\n      console.error('Error converting time:', error);\n    }\n  };\n\n  const getTimezoneOffset = (timezone: string) => {\n    const now = new Date();\n    const utc = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));\n    const targetTime = new Date(utc.toLocaleString(\"en-US\", {timeZone: timezone}));\n    return (targetTime.getTime() - utc.getTime()) / 60000;\n  };\n\n  const useCurrentTime = () => {\n    const now = new Date();\n    setDate(now.toISOString().split('T')[0]);\n    setTime(now.toTimeString().slice(0, 5));\n  };\n\n  const swapTimezones = () => {\n    const temp = fromZone;\n    setFromZone(toZone);\n    setToZone(temp);\n    setResult(null);\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-blue-100 to-blue-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-globe-americas text-blue-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"timezone-title\">\n              Time Zone Converter\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"timezone-subtitle\">\n              Convert time between different time zones instantly. Perfect for scheduling meetings across time zones.\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-clock text-primary\"></i>\n                  <span>Convert Time</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"date\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Date\n                    </Label>\n                    <Input\n                      id=\"date\"\n                      type=\"date\"\n                      value={date}\n                      onChange={(e) => setDate(e.target.value)}\n                      className=\"w-full\"\n                      data-testid=\"input-date\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"time\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                      Time\n                    </Label>\n                    <Input\n                      id=\"time\"\n                      type=\"time\"\n                      value={time}\n                      onChange={(e) => setTime(e.target.value)}\n                      className=\"w-full\"\n                      data-testid=\"input-time\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fromZone\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    From Time Zone\n                  </Label>\n                  <Select value={fromZone} onValueChange={setFromZone} data-testid=\"select-from-zone\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select source timezone\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeZones.map((tz) => (\n                        <SelectItem key={tz.value} value={tz.value}>\n                          {tz.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex justify-center\">\n                  <Button\n                    onClick={swapTimezones}\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"px-3 py-1\"\n                    data-testid=\"button-swap\"\n                  >\n                    <i className=\"fas fa-exchange-alt\"></i>\n                  </Button>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"toZone\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    To Time Zone\n                  </Label>\n                  <Select value={toZone} onValueChange={setToZone} data-testid=\"select-to-zone\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select target timezone\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeZones.map((tz) => (\n                        <SelectItem key={tz.value} value={tz.value}>\n                          {tz.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={convertTime} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!time || !date}\n                    data-testid=\"button-convert\"\n                  >\n                    <i className=\"fas fa-exchange-alt mr-2\"></i>\n                    Convert Time\n                  </Button>\n                  \n                  <Button \n                    onClick={useCurrentTime} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-now\"\n                  >\n                    <i className=\"fas fa-clock\"></i>\n                  </Button>\n                </div>\n\n                {/* Quick Info */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-2\">\n                    <i className=\"fas fa-info-circle text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Current Time</span>\n                  </div>\n                  <p className=\"text-blue-700\">\n                    {currentTime.toLocaleString()}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-globe text-accent\"></i>\n                  <span>Conversion Result</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {result ? (\n                  <div className=\"space-y-6\" data-testid=\"conversion-results\">\n                    {/* From Time */}\n                    <div className=\"bg-gradient-to-r from-blue-500 to-indigo-600 rounded-2xl p-6 text-white\">\n                      <div className=\"text-sm text-blue-100 mb-1\">From</div>\n                      <div className=\"text-2xl font-bold mb-1\">{result.fromTime}</div>\n                      <div className=\"text-blue-100\">{result.fromZone}</div>\n                    </div>\n\n                    {/* Arrow */}\n                    <div className=\"text-center\">\n                      <i className=\"fas fa-arrow-down text-slate-400 text-2xl\"></i>\n                    </div>\n\n                    {/* To Time */}\n                    <div className=\"bg-gradient-to-r from-accent to-green-600 rounded-2xl p-6 text-white\">\n                      <div className=\"text-sm text-green-100 mb-1\">To</div>\n                      <div className=\"text-2xl font-bold mb-1\">{result.toTime}</div>\n                      <div className=\"text-green-100\">{result.toZone}</div>\n                    </div>\n\n                    {/* Time Difference */}\n                    <div className=\"bg-slate-50 rounded-xl p-4 text-center\">\n                      <div className=\"text-sm text-slate-600 mb-1\">Time Difference</div>\n                      <div className=\"text-lg font-semibold text-slate-800\">{result.timeDifference}</div>\n                    </div>\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-globe text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Select Time and Zones</h3>\n                    <p className=\"text-slate-500\">\n                      Choose a time and time zones to see the conversion\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Popular Time Zones</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3 text-sm\">\n                  {timeZones.slice(0, 6).map((tz) => (\n                    <div key={tz.value} className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-700\">{tz.label}</span>\n                      <span className=\"text-slate-500 font-mono\">\n                        {new Date().toLocaleTimeString('en-US', {\n                          timeZone: tz.value,\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          hour12: false\n                        })}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Common Uses</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-video text-blue-500 mt-1\"></i>\n                    <span>Schedule international meetings</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-plane text-green-500 mt-1\"></i>\n                    <span>Plan travel itineraries</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-phone text-purple-500 mt-1\"></i>\n                    <span>Coordinate with global teams</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-calendar text-orange-500 mt-1\"></i>\n                    <span>Schedule events across time zones</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-handshake text-red-500 mt-1\"></i>\n                    <span>Plan international business calls</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15429},"client/src/pages/tools/volume-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface ConversionResult {\n  value: number;\n  unit: string;\n  label: string;\n}\n\nconst volumeUnits = [\n  { value: \"liter\", label: \"Liters (L)\", factor: 1 },\n  { value: \"ml\", label: \"Milliliters (mL)\", factor: 1000 },\n  { value: \"gallon_us\", label: \"US Gallons (gal)\", factor: 0.264172 },\n  { value: \"gallon_uk\", label: \"UK Gallons (gal)\", factor: 0.219969 },\n  { value: \"quart_us\", label: \"US Quarts (qt)\", factor: 1.05669 },\n  { value: \"pint_us\", label: \"US Pints (pt)\", factor: 2.11338 },\n  { value: \"cup_us\", label: \"US Cups\", factor: 4.22675 },\n  { value: \"fl_oz_us\", label: \"US Fluid Ounces (fl oz)\", factor: 33.814 },\n  { value: \"fl_oz_uk\", label: \"UK Fluid Ounces (fl oz)\", factor: 35.1951 },\n  { value: \"tbsp_us\", label: \"US Tablespoons (tbsp)\", factor: 67.628 },\n  { value: \"tsp_us\", label: \"US Teaspoons (tsp)\", factor: 202.884 },\n  { value: \"cubic_m\", label: \"Cubic Meters (m³)\", factor: 0.001 },\n  { value: \"cubic_cm\", label: \"Cubic Centimeters (cm³)\", factor: 1000 },\n  { value: \"cubic_ft\", label: \"Cubic Feet (ft³)\", factor: 0.0353147 },\n  { value: \"cubic_in\", label: \"Cubic Inches (in³)\", factor: 61.0237 },\n  { value: \"barrel\", label: \"Barrels (oil)\", factor: 0.00628981 }\n];\n\nexport default function VolumeConverter() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"liter\");\n  const [results, setResults] = useState<ConversionResult[]>([]);\n\n  useEffect(() => {\n    document.title = \"Volume Converter - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between different units of volume including liters, gallons, cubic meters, and more.');\n    }\n  }, []);\n\n  const convertVolume = () => {\n    if (!inputValue || isNaN(parseFloat(inputValue))) return;\n\n    const value = parseFloat(inputValue);\n    const fromUnitData = volumeUnits.find(unit => unit.value === fromUnit);\n    if (!fromUnitData) return;\n\n    // Convert to base unit (liters) first\n    const baseValue = value / fromUnitData.factor;\n\n    // Convert to all other units\n    const conversions = volumeUnits\n      .filter(unit => unit.value !== fromUnit)\n      .map(unit => ({\n        value: parseFloat((baseValue * unit.factor).toFixed(10)),\n        unit: unit.value,\n        label: unit.label\n      }));\n\n    setResults(conversions);\n  };\n\n  const clearConversion = () => {\n    setInputValue(\"\");\n    setResults([]);\n  };\n\n  const swapToUnit = (unit: string) => {\n    const result = results.find(r => r.unit === unit);\n    if (result) {\n      setInputValue(result.value.toString());\n      setFromUnit(unit);\n      setResults([]);\n    }\n  };\n\n  const getVolumeCategory = (volumeLiters: number): { category: string; color: string } => {\n    if (volumeLiters < 0.001) return { category: \"Drop\", color: \"text-blue-600\" };\n    if (volumeLiters < 0.1) return { category: \"Small Amount\", color: \"text-green-600\" };\n    if (volumeLiters < 1) return { category: \"Cup/Glass\", color: \"text-purple-600\" };\n    if (volumeLiters < 5) return { category: \"Bottle/Jug\", color: \"text-orange-600\" };\n    if (volumeLiters < 100) return { category: \"Bucket/Tank\", color: \"text-red-600\" };\n    if (volumeLiters < 1000) return { category: \"Large Container\", color: \"text-pink-600\" };\n    return { category: \"Industrial Volume\", color: \"text-gray-800\" };\n  };\n\n  const getCurrentVolumeInLiters = (): number => {\n    if (!inputValue || isNaN(parseFloat(inputValue))) return 0;\n    const value = parseFloat(inputValue);\n    const fromUnitData = volumeUnits.find(unit => unit.value === fromUnit);\n    return fromUnitData ? value / fromUnitData.factor : 0;\n  };\n\n  const volumeCategory = getVolumeCategory(getCurrentVolumeInLiters());\n\n  const formatNumber = (num: number): string => {\n    if (num === 0) return \"0\";\n    if (num < 0.000001) return num.toExponential(3);\n    if (num < 0.01) return num.toFixed(6);\n    if (num < 1) return num.toFixed(4);\n    if (num < 1000) return num.toFixed(2);\n    return num.toLocaleString();\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-100 to-cyan-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-cube text-cyan-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"volume-converter-title\">\n              Volume Converter\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"volume-converter-subtitle\">\n              Convert between different units of volume including liters, gallons, cubic meters, and more\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-8\">\n            {/* Input Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-edit text-primary\"></i>\n                  <span>Volume Input</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div>\n                  <Label htmlFor=\"inputValue\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    Volume Value\n                  </Label>\n                  <Input\n                    id=\"inputValue\"\n                    type=\"number\"\n                    value={inputValue}\n                    onChange={(e) => setInputValue(e.target.value)}\n                    className=\"w-full text-lg\"\n                    placeholder=\"Enter volume value\"\n                    step=\"any\"\n                    data-testid=\"input-volume\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"fromUnit\" className=\"text-sm font-medium text-slate-700 mb-2 block\">\n                    From Unit\n                  </Label>\n                  <Select value={fromUnit} onValueChange={setFromUnit} data-testid=\"select-from-unit\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select unit\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {volumeUnits.map((unit) => (\n                        <SelectItem key={unit.value} value={unit.value}>\n                          {unit.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={convertVolume} \n                    className=\"flex-1 bg-primary hover:bg-blue-600 text-white\"\n                    disabled={!inputValue || isNaN(parseFloat(inputValue))}\n                    data-testid=\"button-convert\"\n                  >\n                    <i className=\"fas fa-exchange-alt mr-2\"></i>\n                    Convert Volume\n                  </Button>\n                  \n                  <Button \n                    onClick={clearConversion} \n                    variant=\"outline\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear\"\n                  >\n                    <i className=\"fas fa-trash-alt\"></i>\n                  </Button>\n                </div>\n\n                {/* Volume Category */}\n                {inputValue && !isNaN(parseFloat(inputValue)) && (\n                  <div className=\"bg-slate-50 rounded-xl p-4\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <i className=\"fas fa-tag text-slate-600\"></i>\n                      <span className=\"font-medium text-slate-800\">Volume Category</span>\n                    </div>\n                    <p className={`font-semibold ${volumeCategory.color}`}>\n                      {volumeCategory.category}\n                    </p>\n                  </div>\n                )}\n\n                {/* Common Examples */}\n                <div className=\"bg-blue-50 rounded-xl p-4 text-sm\">\n                  <div className=\"flex items-center space-x-2 mb-3\">\n                    <i className=\"fas fa-lightbulb text-blue-600\"></i>\n                    <span className=\"font-medium text-blue-800\">Quick Examples</span>\n                  </div>\n                  <div className=\"space-y-2 text-blue-700\">\n                    <div className=\"flex justify-between\">\n                      <span>Water bottle:</span>\n                      <span>0.5 L (16.9 fl oz)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Milk jug:</span>\n                      <span>1 gallon (3.79 L)</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Swimming pool:</span>\n                      <span>50,000 L (13,208 gal)</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Results Section */}\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-list text-accent\"></i>\n                  <span>Conversion Results</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {results.length > 0 ? (\n                  <div className=\"space-y-4\" data-testid=\"conversion-results\">\n                    {results.map((result, index) => (\n                      <div \n                        key={result.unit} \n                        className=\"flex items-center justify-between p-4 bg-slate-50 rounded-xl hover:bg-slate-100 transition-colors cursor-pointer group\"\n                        onClick={() => swapToUnit(result.unit)}\n                        data-testid={`result-${result.unit}`}\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"font-mono text-xl font-bold text-slate-800\">\n                            {formatNumber(result.value)}\n                          </div>\n                          <div className=\"text-sm text-slate-600\">\n                            {result.label}\n                          </div>\n                        </div>\n                        <div className=\"opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <i className=\"fas fa-exchange-alt text-primary\"></i>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-12\" data-testid=\"no-results\">\n                    <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                      <i className=\"fas fa-cube text-slate-400 text-2xl\"></i>\n                    </div>\n                    <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">Enter a Volume Value</h3>\n                    <p className=\"text-slate-500\">\n                      Enter a volume value above to see conversions to all units\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Volume Conversion Formulas</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4 text-sm text-slate-600\">\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Common Conversions:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• 1 L = 1,000 mL = 0.264 US gal</li>\n                      <li>• 1 US gallon = 3.785 L = 4 quarts</li>\n                      <li>• 1 m³ = 1,000 L = 264.2 US gal</li>\n                      <li>• 1 cup = 8 fl oz = 236.6 mL</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h5 className=\"font-medium text-slate-800 mb-2\">Cooking Conversions:</h5>\n                    <ul className=\"space-y-1 ml-4\">\n                      <li>• 1 tbsp = 3 tsp = 14.8 mL</li>\n                      <li>• 1 cup = 16 tbsp = 240 mL</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Volume References</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-tint text-blue-500 mt-1\"></i>\n                    <span>Teaspoon: 5 mL</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-coffee text-brown-500 mt-1\"></i>\n                    <span>Coffee cup: 240 mL (8 fl oz)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-wine-bottle text-purple-500 mt-1\"></i>\n                    <span>Wine bottle: 750 mL (25.4 fl oz)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-gas-pump text-orange-500 mt-1\"></i>\n                    <span>Car fuel tank: 50-80 L (13-21 gal)</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-swimming-pool text-cyan-500 mt-1\"></i>\n                    <span>Olympic pool: 2.5 million L</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":14914},"client/src/pages/tools/weight-converter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nconst weightUnits = {\n  kilogram: { name: \"Kilogram (kg)\", factor: 1 },\n  gram: { name: \"Gram (g)\", factor: 0.001 },\n  pound: { name: \"Pound (lb)\", factor: 0.453592 },\n  ounce: { name: \"Ounce (oz)\", factor: 0.0283495 },\n  stone: { name: \"Stone (st)\", factor: 6.35029 },\n  ton: { name: \"Metric Ton (t)\", factor: 1000 },\n  shortTon: { name: \"Short Ton\", factor: 907.185 },\n  longTon: { name: \"Long Ton\", factor: 1016.05 }\n};\n\nexport default function WeightConverter() {\n  const [fromValue, setFromValue] = useState(\"\");\n  const [toValue, setToValue] = useState(\"\");\n  const [fromUnit, setFromUnit] = useState(\"kilogram\");\n  const [toUnit, setToUnit] = useState(\"pound\");\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Weight Converter - ToolHub | Free Online Weight Unit Converter\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Convert between weight units instantly. Convert kilograms, pounds, ounces, grams, stones and more. Free, fast, and accurate weight converter.');\n    }\n  }, []);\n\n  const convertWeight = () => {\n    const value = parseFloat(fromValue);\n    \n    if (isNaN(value) || fromValue === '') {\n      setToValue('');\n      return;\n    }\n\n    // Convert to kilograms first, then to target unit\n    const kilograms = value * weightUnits[fromUnit as keyof typeof weightUnits].factor;\n    const convertedValue = kilograms / weightUnits[toUnit as keyof typeof weightUnits].factor;\n    \n    setToValue(convertedValue.toFixed(6).replace(/\\.?0+$/, ''));\n  };\n\n  const resetForm = () => {\n    setFromValue('');\n    setToValue('');\n  };\n\n  const swapUnits = () => {\n    setFromUnit(toUnit);\n    setToUnit(fromUnit);\n    setFromValue(toValue);\n    setToValue(fromValue);\n  };\n\n  useEffect(() => {\n    if (fromValue) {\n      convertWeight();\n    }\n  }, [fromValue, fromUnit, toUnit]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-weight-hanging text-primary mr-2\"></i>\n              Weight Converter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Convert between different weight units instantly. Our free weight converter supports kilograms, pounds, ounces, grams, and more.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Convert Weight Units</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">From</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"number\"\n                          placeholder=\"Enter value\"\n                          value={fromValue}\n                          onChange={(e) => setFromValue(e.target.value)}\n                          data-testid=\"input-from-value\"\n                        />\n                        <Select value={fromUnit} onValueChange={setFromUnit}>\n                          <SelectTrigger data-testid=\"select-from-unit\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(weightUnits).map(([key, unit]) => (\n                              <SelectItem key={key} value={key}>{unit.name}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n\n                    <div>\n                      <Label className=\"text-slate-700 mb-2\">To</Label>\n                      <div className=\"space-y-3\">\n                        <Input\n                          type=\"text\"\n                          placeholder=\"Result\"\n                          value={toValue}\n                          readOnly\n                          className=\"bg-slate-50\"\n                          data-testid=\"input-to-value\"\n                        />\n                        <Select value={toUnit} onValueChange={setToUnit}>\n                          <SelectTrigger data-testid=\"select-to-unit\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {Object.entries(weightUnits).map(([key, unit]) => (\n                              <SelectItem key={key} value={key}>{unit.name}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button onClick={convertWeight} className=\"flex-1\" data-testid=\"button-convert\">\n                      <i className=\"fas fa-sync-alt mr-2\"></i>Convert\n                    </Button>\n                    <Button onClick={resetForm} variant=\"secondary\" className=\"flex-1\" data-testid=\"button-reset\">\n                      <i className=\"fas fa-undo mr-2\"></i>Reset\n                    </Button>\n                    <Button onClick={swapUnits} variant=\"outline\" data-testid=\"button-swap\">\n                      <i className=\"fas fa-exchange-alt mr-2\"></i>Swap\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Common Conversions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 kilogram</span>\n                      <span className=\"font-medium\">2.20 pounds</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 pound</span>\n                      <span className=\"font-medium\">16 ounces</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 stone</span>\n                      <span className=\"font-medium\">14 pounds</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 ton</span>\n                      <span className=\"font-medium\">1000 kg</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-600\">1 ounce</span>\n                      <span className=\"font-medium\">28.35 grams</span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":8122},"client/src/pages/tools/word-counter.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\ninterface TextStats {\n  words: number;\n  characters: number;\n  charactersNoSpaces: number;\n  paragraphs: number;\n  sentences: number;\n  readingTime: number;\n}\n\nexport default function WordCounter() {\n  const [text, setText] = useState(\"\");\n  const [stats, setStats] = useState<TextStats>({\n    words: 0,\n    characters: 0,\n    charactersNoSpaces: 0,\n    paragraphs: 0,\n    sentences: 0,\n    readingTime: 0\n  });\n\n  useEffect(() => {\n    // Scroll to top when component mounts - use multiple methods to ensure it works\n    window.scrollTo({ top: 0, left: 0, behavior: 'instant' });\n    document.documentElement.scrollTop = 0;\n    document.body.scrollTop = 0;\n    \n    document.title = \"Word Counter - ToolHub | Free Online Word & Character Counter Tool\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Count words, characters, paragraphs, and sentences in your text. Free word counter with real-time statistics and reading time estimate.');\n    }\n  }, []);\n\n  const countText = (inputText: string) => {\n    if (!inputText.trim()) {\n      setStats({\n        words: 0,\n        characters: 0,\n        charactersNoSpaces: 0,\n        paragraphs: 0,\n        sentences: 0,\n        readingTime: 0\n      });\n      return;\n    }\n\n    // Count characters\n    const characters = inputText.length;\n    const charactersNoSpaces = inputText.replace(/\\s/g, '').length;\n\n    // Count words\n    const words = inputText.trim().split(/\\s+/).filter(word => word.length > 0).length;\n\n    // Count paragraphs\n    const paragraphs = inputText.trim().split(/\\n\\s*\\n/).filter(p => p.trim().length > 0).length;\n\n    // Count sentences\n    const sentences = inputText.split(/[.!?]+/).filter(s => s.trim().length > 0).length;\n\n    // Calculate reading time (average 200 words per minute)\n    const readingTime = Math.ceil(words / 200);\n\n    setStats({\n      words,\n      characters,\n      charactersNoSpaces,\n      paragraphs,\n      sentences,\n      readingTime\n    });\n  };\n\n  const clearText = () => {\n    setText(\"\");\n    setStats({\n      words: 0,\n      characters: 0,\n      charactersNoSpaces: 0,\n      paragraphs: 0,\n      sentences: 0,\n      readingTime: 0\n    });\n  };\n\n  useEffect(() => {\n    countText(text);\n  }, [text]);\n\n  return (\n    <div className=\"min-h-screen bg-slate-50\">\n      <Header />\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-8\">\n            <h1 className=\"text-3xl font-bold text-slate-800 mb-4\">\n              <i className=\"fas fa-file-word text-primary mr-2\"></i>\n              Word Counter\n            </h1>\n            <p className=\"text-slate-600 max-w-2xl mx-auto\">\n              Count words, characters, paragraphs, and sentences in your text with real-time analysis and reading time estimates.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-8\">\n            <div className=\"lg:col-span-3\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Enter Your Text</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"mb-6\">\n                    <Textarea\n                      placeholder=\"Type or paste your text here...\"\n                      value={text}\n                      onChange={(e) => setText(e.target.value)}\n                      className=\"w-full h-64 resize-y\"\n                      data-testid=\"textarea-text-input\"\n                    />\n                  </div>\n\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Button onClick={clearText} variant=\"secondary\" data-testid=\"button-clear\">\n                      <i className=\"fas fa-trash mr-2\"></i>Clear Text\n                    </Button>\n                    <Button \n                      onClick={() => navigator.clipboard.writeText(text)}\n                      variant=\"outline\"\n                      disabled={!text}\n                      data-testid=\"button-copy\"\n                    >\n                      <i className=\"fas fa-copy mr-2\"></i>Copy Text\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Text Statistics</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Words</span>\n                      <span className=\"text-2xl font-bold text-primary\" data-testid=\"stat-words\">{stats.words}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Characters</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-characters\">{stats.characters}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Characters (no spaces)</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-characters-no-spaces\">{stats.charactersNoSpaces}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Paragraphs</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-paragraphs\">{stats.paragraphs}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Sentences</span>\n                      <span className=\"text-lg font-semibold\" data-testid=\"stat-sentences\">{stats.sentences}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-slate-600\">Reading Time</span>\n                      <span className=\"text-lg font-semibold text-accent\" data-testid=\"stat-reading-time\">\n                        {stats.readingTime} min\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":6894},"client/src/pages/tools/world-clock.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface WorldClock {\n  id: string;\n  timezone: string;\n  city: string;\n  country: string;\n  time: string;\n  date: string;\n  offset: string;\n}\n\nconst worldTimeZones = [\n  { value: \"America/New_York\", city: \"New York\", country: \"USA\" },\n  { value: \"America/Los_Angeles\", city: \"Los Angeles\", country: \"USA\" },\n  { value: \"America/Chicago\", city: \"Chicago\", country: \"USA\" },\n  { value: \"America/Denver\", city: \"Denver\", country: \"USA\" },\n  { value: \"UTC\", city: \"UTC\", country: \"Coordinated Universal Time\" },\n  { value: \"Europe/London\", city: \"London\", country: \"UK\" },\n  { value: \"Europe/Paris\", city: \"Paris\", country: \"France\" },\n  { value: \"Europe/Berlin\", city: \"Berlin\", country: \"Germany\" },\n  { value: \"Europe/Rome\", city: \"Rome\", country: \"Italy\" },\n  { value: \"Europe/Madrid\", city: \"Madrid\", country: \"Spain\" },\n  { value: \"Asia/Tokyo\", city: \"Tokyo\", country: \"Japan\" },\n  { value: \"Asia/Shanghai\", city: \"Shanghai\", country: \"China\" },\n  { value: \"Asia/Hong_Kong\", city: \"Hong Kong\", country: \"Hong Kong\" },\n  { value: \"Asia/Singapore\", city: \"Singapore\", country: \"Singapore\" },\n  { value: \"Asia/Kolkata\", city: \"Mumbai\", country: \"India\" },\n  { value: \"Asia/Dubai\", city: \"Dubai\", country: \"UAE\" },\n  { value: \"Australia/Sydney\", city: \"Sydney\", country: \"Australia\" },\n  { value: \"Australia/Melbourne\", city: \"Melbourne\", country: \"Australia\" },\n  { value: \"Pacific/Auckland\", city: \"Auckland\", country: \"New Zealand\" },\n  { value: \"America/Sao_Paulo\", city: \"São Paulo\", country: \"Brazil\" },\n  { value: \"America/Mexico_City\", city: \"Mexico City\", country: \"Mexico\" },\n  { value: \"America/Toronto\", city: \"Toronto\", country: \"Canada\" },\n  { value: \"Africa/Cairo\", city: \"Cairo\", country: \"Egypt\" },\n  { value: \"Africa/Johannesburg\", city: \"Johannesburg\", country: \"South Africa\" },\n  { value: \"Asia/Seoul\", city: \"Seoul\", country: \"South Korea\" },\n  { value: \"Asia/Bangkok\", city: \"Bangkok\", country: \"Thailand\" },\n  { value: \"Europe/Moscow\", city: \"Moscow\", country: \"Russia\" },\n  { value: \"America/Argentina/Buenos_Aires\", city: \"Buenos Aires\", country: \"Argentina\" }\n];\n\nexport default function WorldClock() {\n  const [clocks, setClocks] = useState<WorldClock[]>([]);\n  const [selectedTimezone, setSelectedTimezone] = useState(\"\");\n  const [currentTime, setCurrentTime] = useState(new Date());\n\n  useEffect(() => {\n    document.title = \"World Clock Tool - ToolHub\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'View current time in major cities worldwide. Real-time world clock with multiple time zones.');\n    }\n\n    // Add default clocks\n    const defaultTimezones = [\n      \"UTC\",\n      \"America/New_York\", \n      \"Europe/London\",\n      \"Asia/Tokyo\"\n    ];\n\n    const defaultClocks = defaultTimezones.map((tz, index) => {\n      const tzInfo = worldTimeZones.find(zone => zone.value === tz)!;\n      return createClock(tz, tzInfo.city, tzInfo.country, `default-${index}`);\n    });\n\n    setClocks(defaultClocks);\n\n    // Update time every second\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  useEffect(() => {\n    // Update all clocks when current time changes\n    setClocks(prevClocks => \n      prevClocks.map(clock => updateClockTime(clock))\n    );\n  }, [currentTime]);\n\n  const createClock = (timezone: string, city: string, country: string, id: string): WorldClock => {\n    const now = new Date();\n    const timeString = now.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true\n    });\n    \n    const dateString = now.toLocaleDateString('en-US', {\n      timeZone: timezone,\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric'\n    });\n\n    const offset = getTimezoneOffset(timezone);\n\n    return {\n      id,\n      timezone,\n      city,\n      country,\n      time: timeString,\n      date: dateString,\n      offset\n    };\n  };\n\n  const updateClockTime = (clock: WorldClock): WorldClock => {\n    const now = new Date();\n    const timeString = now.toLocaleTimeString('en-US', {\n      timeZone: clock.timezone,\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: true\n    });\n    \n    const dateString = now.toLocaleDateString('en-US', {\n      timeZone: clock.timezone,\n      weekday: 'short',\n      month: 'short',\n      day: 'numeric'\n    });\n\n    return {\n      ...clock,\n      time: timeString,\n      date: dateString\n    };\n  };\n\n  const getTimezoneOffset = (timezone: string): string => {\n    const now = new Date();\n    const utc = now.getTime() + (now.getTimezoneOffset() * 60000);\n    const targetTime = new Date(utc + (getOffsetMinutes(timezone) * 60000));\n    const offsetMinutes = getOffsetMinutes(timezone);\n    const hours = Math.floor(Math.abs(offsetMinutes) / 60);\n    const minutes = Math.abs(offsetMinutes) % 60;\n    const sign = offsetMinutes >= 0 ? '+' : '-';\n    return `UTC${sign}${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n  };\n\n  const getOffsetMinutes = (timezone: string): number => {\n    const now = new Date();\n    const utc = new Date(now.getTime() + (now.getTimezoneOffset() * 60000));\n    const targetTime = new Date(utc.toLocaleString(\"en-US\", {timeZone: timezone}));\n    return (targetTime.getTime() - utc.getTime()) / 60000;\n  };\n\n  const addClock = () => {\n    if (!selectedTimezone) return;\n    \n    // Check if timezone already exists\n    if (clocks.some(clock => clock.timezone === selectedTimezone)) {\n      alert(\"This timezone is already added!\");\n      return;\n    }\n\n    const tzInfo = worldTimeZones.find(zone => zone.value === selectedTimezone);\n    if (!tzInfo) return;\n\n    const newClock = createClock(\n      selectedTimezone, \n      tzInfo.city, \n      tzInfo.country,\n      `clock-${Date.now()}`\n    );\n\n    setClocks(prev => [...prev, newClock]);\n    setSelectedTimezone(\"\");\n  };\n\n  const removeClock = (id: string) => {\n    setClocks(prev => prev.filter(clock => clock.id !== id));\n  };\n\n  const getClockGradient = (index: number): string => {\n    const gradients = [\n      \"from-blue-500 to-indigo-600\",\n      \"from-green-500 to-emerald-600\", \n      \"from-purple-500 to-pink-600\",\n      \"from-orange-500 to-red-600\",\n      \"from-cyan-500 to-blue-600\",\n      \"from-yellow-500 to-orange-600\",\n      \"from-red-500 to-pink-600\",\n      \"from-indigo-500 to-purple-600\"\n    ];\n    return gradients[index % gradients.length];\n  };\n\n  const isDaytime = (timezone: string): boolean => {\n    const now = new Date();\n    const hour = parseInt(now.toLocaleTimeString('en-US', {\n      timeZone: timezone,\n      hour: '2-digit',\n      hour12: false\n    }));\n    return hour >= 6 && hour < 18;\n  };\n\n  return (\n    <div className=\"min-h-screen font-inter bg-slate-50 text-slate-800\">\n      <Header />\n      \n      <main className=\"container mx-auto px-4 py-16\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-cyan-100 to-cyan-200 rounded-2xl flex items-center justify-center mx-auto mb-6\">\n              <i className=\"fas fa-globe text-cyan-600 text-2xl\"></i>\n            </div>\n            <h1 className=\"text-4xl md:text-5xl font-bold text-slate-800 mb-6\" data-testid=\"world-clock-title\">\n              World Clock Tool\n            </h1>\n            <p className=\"text-xl text-secondary max-w-2xl mx-auto\" data-testid=\"world-clock-subtitle\">\n              View current time in major cities worldwide. Real-time world clock with multiple time zones.\n            </p>\n          </div>\n\n          {/* Add New Clock */}\n          <Card className=\"bg-white shadow-sm mb-8\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-plus-circle text-primary\"></i>\n                <span>Add World Clock</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex gap-4 items-end\">\n                <div className=\"flex-1\">\n                  <Select value={selectedTimezone} onValueChange={setSelectedTimezone} data-testid=\"select-timezone\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a city or timezone\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {worldTimeZones.map((tz) => (\n                        <SelectItem key={tz.value} value={tz.value}>\n                          {tz.city}, {tz.country}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <Button \n                  onClick={addClock}\n                  className=\"bg-primary hover:bg-blue-600 text-white\"\n                  disabled={!selectedTimezone}\n                  data-testid=\"button-add-clock\"\n                >\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Add Clock\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* World Clocks Grid */}\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\" data-testid=\"clocks-grid\">\n            {clocks.map((clock, index) => (\n              <Card key={clock.id} className=\"bg-white shadow-sm hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-0\">\n                  <div className={`bg-gradient-to-br ${getClockGradient(index)} p-6 text-white relative`}>\n                    {clocks.length > 1 && (\n                      <Button\n                        onClick={() => removeClock(clock.id)}\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute top-2 right-2 text-white hover:bg-white hover:bg-opacity-20 h-8 w-8 p-0\"\n                        data-testid={`remove-clock-${clock.id}`}\n                      >\n                        <i className=\"fas fa-times text-sm\"></i>\n                      </Button>\n                    )}\n                    \n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <i className={`fas ${isDaytime(clock.timezone) ? 'fa-sun' : 'fa-moon'} text-lg`}></i>\n                      <span className=\"text-sm opacity-90\">{clock.offset}</span>\n                    </div>\n                    \n                    <h3 className=\"text-xl font-bold mb-1\" data-testid={`clock-city-${clock.id}`}>\n                      {clock.city}\n                    </h3>\n                    <p className=\"text-sm opacity-75 mb-4\">{clock.country}</p>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-3xl font-mono font-bold mb-1\" data-testid={`clock-time-${clock.id}`}>\n                        {clock.time}\n                      </div>\n                      <div className=\"text-sm opacity-90\" data-testid={`clock-date-${clock.id}`}>\n                        {clock.date}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {clocks.length === 0 && (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-slate-100 rounded-2xl flex items-center justify-center mx-auto mb-4\">\n                <i className=\"fas fa-globe text-slate-400 text-2xl\"></i>\n              </div>\n              <h3 className=\"text-lg font-semibold text-slate-600 mb-2\">No Clocks Added</h3>\n              <p className=\"text-slate-500\">\n                Add your first world clock from the dropdown above\n              </p>\n            </div>\n          )}\n\n          {/* Additional Info */}\n          <div className=\"mt-12 grid md:grid-cols-2 gap-8\">\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Features</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-sync text-blue-500 mt-1\"></i>\n                    <span>Real-time updates every second</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-sun text-yellow-500 mt-1\"></i>\n                    <span>Day/night indicators for each timezone</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-plus text-green-500 mt-1\"></i>\n                    <span>Add multiple cities and timezones</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-clock text-purple-500 mt-1\"></i>\n                    <span>UTC offset display for each timezone</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-mobile-alt text-orange-500 mt-1\"></i>\n                    <span>Responsive design for all devices</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white shadow-sm\">\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Perfect For</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 text-sm text-slate-600\">\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-briefcase text-blue-500 mt-1\"></i>\n                    <span>Remote work and global teams</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-video text-green-500 mt-1\"></i>\n                    <span>Scheduling international meetings</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-plane text-purple-500 mt-1\"></i>\n                    <span>Travel planning and coordination</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-phone text-orange-500 mt-1\"></i>\n                    <span>International calling at appropriate times</span>\n                  </li>\n                  <li className=\"flex items-start space-x-2\">\n                    <i className=\"fas fa-chart-line text-red-500 mt-1\"></i>\n                    <span>Global stock market monitoring</span>\n                  </li>\n                </ul>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15402}},"version":1}